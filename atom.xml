<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我要码代码</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-03T02:22:29.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王苏苏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于架构</title>
    <link href="http://yoursite.com/2017/09/03/%E5%85%B3%E4%BA%8E%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2017/09/03/关于架构/</id>
    <published>2017-09-03T02:21:05.000Z</published>
    <updated>2017-09-03T02:22:29.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于架构"><a href="#关于架构" class="headerlink" title="关于架构"></a>关于架构</h2><hr>
<p>太久没写博客了。标题起的很大，有点虚。</p>
<p>写这篇文章是因为前段时间试着玩了下，Dubbo &amp; Zookeeper &amp; SpringBoot搭建SOA，顺带看了几篇博客，学到了点东西想写下搭建的过程。</p>
<p>一个月前我还觉得这三个东西是宇宙无敌高大上的存在，现在一用起来，发现真是异常的方便。感觉这些东西确实是牛逼，封装的好，功能也强大。难怪这么多人推崇。</p>
<p>但是发现光写怎样操作怎样编码有点不够，架构的基础知识应该先于技术。自己能把这东西用会也是在对架构有点理解的基础上，所以决定还是先整一篇自己关于架构的学习与理解。</p>
<hr>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://geek.csdn.net/news/detail/73332" target="_blank" rel="external">在首席架构师手里，应用架构如此设计：http://geek.csdn.net/news/detail/73332</a></li>
</ul>
<h2 id="架构分类"><a href="#架构分类" class="headerlink" title="架构分类"></a>架构分类</h2><p>先简单说一下架构的基本概念吧，软件架构师应该是程序员从事技术道路的一个终极目标之一，一般说起架构师都是干了十几年的牛逼程序员才能担当的起的，其实每个行业应该都是一样，做一款产品，基础的架构的工作当然得要最有经验的人才能承担。好了，不哔哔了。</p>
<p>在计算机软件领域，可谓是无架构，不系统，架构是大型系统的关键。从形上看，架构是系统的骨架，支撑和链接各个部分；从神上看，架构是系统的灵魂，深刻体现业务本质。</p>
<p>对于一个计算机软件的架构，可以分为以下几种：</p>
<ul>
<li>业务架构</li>
<li>技术架构</li>
<li>应用架构</li>
</ul>
<p>业务架构很好理解，软件需要做什么事，满足用户怎样的需求，实现怎样的功能，这就是业务架构，这些多半是产品经理做的事情，当然如果程序员能做好拿更多工资也是妥妥的。</p>
<p>技术架构也很好理解，就是这些功能具体的实现，比如如果我要做一个个人web网页，前端使用html/css/js语言，采用angularjs框架，ajax与后台交互，部署在nginx服务器上。后台采用java语言，springboot一站式解决。数据库。前后交互采用json数据格式。</p>
<p>应用架构是本文要说的重点了，应用架构是衡量架构师6不6的精髓了，应用架构是作为一个承上启下的的作用，一方面承接业务架构的落地，另一方面影响技术选型。</p>
<h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p>理解应用架构先要理解什么是应用，应用是系统中独立的部署单元，是系统划分明确的边界。而应用架构定义系统有哪些应用，以及应用之间是如何分工与合作的。</p>
<p>应用的分，主要有两种方式，</p>
<ul>
<li>水平划分，在javaweb项目中，习惯把系统拆分成web前端/controller或action层/service层/dao层/数据库，这是面向业务深度的划分</li>
<li>垂直划分，按照不同的业务类型划分应用。举个栗子，比如一个商城系统，可以类比淘宝，有商品应用，客户可以访问淘宝网，购买商品；另外与商家交谈，淘宝还提供了阿里旺旺的应用，在具体的商品页里点击交谈客服就可以发送商品订单详情给商家客服的阿里旺旺。这是应用之间的交互。然后和商家砍价之后，商家可以修改你的价格。这就是应用与应用之间的交互</li>
</ul>
<p>而应用的合，反应应用之间如何协作，共同完成复杂的业务。主要体现在应用的通讯机制与数据格式，通讯机制包括同步调用/异步消息/共享DB等，数据格式可以是文本/xml/json/二进制等。</p>
<p>总之，应用架构的本质是通过系统的拆分，平衡业务和技术的复杂性，保证系统形散神不散。</p>
<p>以上的话是从参考文献的文档里抄的加上了点自己的理解，还是有点玄。没事，硬着头皮看应用架构的分类就能理解了。</p>
<h3 id="单体式应用"><a href="#单体式应用" class="headerlink" title="单体式应用"></a>单体式应用</h3><h4 id="架构模型"><a href="#架构模型" class="headerlink" title="架构模型"></a>架构模型</h4><p>单体式算是架构里最简单的了，单体表示系统只有一个应用，所有的代码放在一个工程里管理，打包成一个应用，部署在一台机器，在一个DB里存储数据，java初学者们写的应用，一般都是单体式应用。拿一个最开始写的javaweb层次结构来看，图形结构类似如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou01.jpg" alt=""></p>
<p>单体式的应用采用分层架构，按照调用的顺序，从上到下一般为表示层，业务层，数据访问层，DB层，表示层负责用户的体验（html，css，js），业务层负责业务逻辑，数据访问层负责DB层的数据存取</p>
<p>单体应用在水平方向上，上下层之间的职责划分清晰；但是垂直方向上缺乏清晰的边界，上下层模块间是多对多的依赖关系。</p>
<p>单体应用通过水平分层，降低了业务复杂性；同时模块间是进程内部调用，技术实现简单。</p>
<p>单体应用对系统的切分不彻底，只有水平切分，并且是逻辑上的，因此适合的业务比较单一但是深度上比较复杂的系统，比如网络协议，从应用层/传输层/网络层/链路层，层层递进，类似这样的系统可以方便的增加水平层次去适配。</p>
<p>对于广度上复杂的业务，由于缺乏垂直切分，强行把不同业务绑定在一起，会导致系统的维护困难等一系列问题。OTA（Online Trave Agent）网站包括机票\酒店\旅游等多个垂直业务板块，每个板块比较独立，不适合放在一起开发。</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>单体应用的优缺点还是比较明显的。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>现有IDE都是集成开发环境，非常适合单体式应用的开发、编译调试，基本上一站式搞定，非常爽</li>
<li>运行在一个物理结点，环境单一，运行稳定，故障恢复简单</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>业务边界模糊，模块职责不清晰，当系统逐渐变大，代码依赖复杂，难以维护</li>
<li>所有人同时在一个工程上开发，容易发生代码修改冲突，依赖复杂导致项目协调困难，并且局部修改影响不可知，需要全覆盖测试，需要重新部署，难以支持大团队并行开发</li>
<li>当系统很大时，编译和部署耗时</li>
<li>应用水平扩展难，一方面状态再应用内部管理，无法透明路由；另一方面，不同模块对资源需求差异大，当业务量增大时，一视同仁地为所有模块增加机器导致硬件浪费</li>
</ul>
<h3 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h3><h4 id="架构模型-1"><a href="#架构模型-1" class="headerlink" title="架构模型"></a>架构模型</h4><p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou02.jpg" alt=""></p>
<p>分布式架构应用中，应用是相互独立的，每个应用代码独立开发，独立部署，应用通过有限的API接口互相关联。API接口属于应用的一部分，一般和表示层处于同一个层次（这里的表示层，如果套用在JavaWeb开发里应该是理解成controller层），两者共享业务逻辑层，API和表示层采用同样的web端技术，通讯协议一般使用HTTP，数据格式是JSON，应用集成方式比较简单。</p>
<p>分布式架构首先对系统按照业务进行垂直划分，对广度上复杂的业务实现了物理解耦，单个应用内部还是水平切分，对深度上复杂的业务也实现了逻辑解耦。分布式架构可以解决业务量大的问题，对于某些高并发/大流量系统，把系统切分为不同应用，针对资源需求特点(比如CPU/IO/存储密集型)，通过加强硬件配置满足不同应用需求，避免一刀切方式带来的资源浪费。</p>
<p>技术上，API采用标准的HTTP/JSON进行通讯，调用双方实现难度都不大，但是API一般都是“裸奔”的，在系统层面，调用依赖关系不透明，调用可靠性缺乏保障，因此只使用应用之间链路较少，调用量不大的系统，即应用之间耦合确实够松的系统。</p>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p>分布式架构的每个应用内部高内聚，独立开发、测试和部署，支持敏捷开发；同时应用之间松耦合，业务边界清晰，业务依赖明确，支持大项目并行开发，实现业务敏捷。</p>
<p>在分布式架构中，应用的表示层和API没有物理分离，需要同时满足自身业务需求和关联业务需求，相互影响，比如API接口会随外部应用的需求经常变化，导致整个应用重新部署。</p>
<p>在运行时，API以HTTP/JSON方式通过网络对外提供接口，其通信可靠性和数据的封装性相对于进程内调用比较差，如果没有一些可靠的技术机制，如路由保障/失败重试/监控等，裸奔API的方式将严重影响系统整体可用性</p>
<h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><h4 id="架构模型-2"><a href="#架构模型-2" class="headerlink" title="架构模型"></a>架构模型</h4><p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou03.jpg" alt=""></p>
<p>SOA，Service-Oriented-Architecture，面向服务架构，广义上SOA也是分布式应用架构的一种，但是内涵不同。这里有两种类型“应用”，应用1~N是前端应用，面向用户，服务1~N是service，只提供业务逻辑和数据。这些应用都是独立部署，前端应用不再通过API直接关联，而是通过后端服务共享业务逻辑。</p>
<p>此外相对于“裸奔”的API，SOA架构提供配套的服务治理，包括服务注册、服务路由、服务授权、服务降级、服务监控等。这些功能通过专门的中间件支持，有中心化和去中心化两种方式。具体的实现方式与框架有dubbo+zookeeper，或是springcloud等技术，在今后的博客里会讲到。</p>
<p>SOA架构在分布式架构垂直切分的基础上，进一步把原来单体应用的业务逻辑层独立成service，做到了物理上的彻底分离。</p>
<p>每个service专注于特定的职责，实现系统核心业务逻辑，前端应用通过调用不同service，可以完成复杂业务逻辑，解决业务深度上的问题；对于service，以共享的方式支持众多的应用，达到逻辑复用的效果。所以SOA架构既体现业务的分，又体现业务的和，更多地从业务整体上考虑系统拆分。</p>
<p>相比分布式应用架构，基于SOA的系统有大量的service应用，整个系统基础服务调用，所以对服务依赖的透明性和服务调用的可靠性提出很高的要求，需要专门的SOA框架（dubbo）支持，还需要配套的监控体系（zookeeper）和自动化的运维系统支持，技术复杂性高，SOA框架可以集中体现一个企业IT技术能力</p>
<h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><p>SOA架构优缺点如下图所示：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou04.jpg" alt=""></p>
<p>相比较普通API方式，SOA架构更进一步：</p>
<ul>
<li>每个service都是浓缩的精华，聚焦某方面核心业务，同时以复用的方式供整个系统共享</li>
<li>服务作为独立的应用，独立部署，接口清晰，很容易做自动化测试和部署</li>
<li>服务是无状态的，很容易做水平扩展；通过容器虚拟化技术（docker，后期得学学），实现故障隔离和资源高效利用，业务量大的时候，加机器即可</li>
<li>基于SOA的系统可以根据服务运行情况，灵活调控服务资源，包括服务上下架、服务升降级等，使系统真正具备可运营的能力</li>
</ul>
<p>当然SOA也带来了额外的复杂性和弊端</p>
<ol>
<li>系统依赖复杂，给开发/测试/部署增加难度</li>
<li>端到端的调用链路长，可靠性降低，依赖网络状况、服务框架以及具体的service质量</li>
<li>分布式数据一致性和分布式事务支持困难，一般通过最终一致性简化解决（这个问题没遇到过，暂时理解起来有困难）</li>
<li>端到端的测试和排障复杂，SOA对运维提出更高要求</li>
</ol>
<h3 id="SOA的落地方式"><a href="#SOA的落地方式" class="headerlink" title="SOA的落地方式"></a>SOA的落地方式</h3><p>在实践中，SOA架构不断发展，具体的落地形式也多种多样。</p>
<h4 id="面向外部SOA"><a href="#面向外部SOA" class="headerlink" title="面向外部SOA"></a>面向外部SOA</h4><p>SOA的前身是webservice，webservice初衷是企业间通过Internet进行互联，如下图</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou05.jpg" alt=""></p>
<p>每个公司把自己的优势资源通过webservice发布，如图中天气服务/机票服务/酒店预订服务来自不同公司，其他企业可以直接调用服务或整合多个服务，实现企业间资源共享</p>
<h4 id="面向应用SOA"><a href="#面向应用SOA" class="headerlink" title="面向应用SOA"></a>面向应用SOA</h4><p>面向应用SOA把原来单体应用里的业务逻辑剥离出来，作为单独的服务对外提供。</p>
<p>举个栗子，一个电商有两个应用，首先是商品应用，顾客使用商品详情页，展示商品的信息、商品库存、商品价格；内部客服人员使用客服系统，根据顾客来电要求，修改订单，同时也需要获取商品的基本信息、价格信息等。</p>
<p>如果单体应用就需要为两套应用提供不同的service层，两套service会出现重合等现象，不利于开发与维护。但是经过SOA改造，应用架构可以设计成如下图所示结构：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou06.jpg" alt=""></p>
<p>这里的service实现底层数据对与前端页面的透明化，表示层和业务逻辑各自独立维护，同时全部业务逻辑对其他应用开放，新应用可以自由整合来自多个服务的接口，快速支持业务创新。</p>
<p>面向应用的SOA架构对系统进行物理上的水平切分，结果是表示层单飞，逻辑层对外全开放。但每个service是原系统业务逻辑的封装，接口设计面向原应用业务case，如果其他应用的需求有差异，则自己创建service访问底层数据。如此导致service职责不够聚焦，类似的接口分散化，同时底层数据被多方修改，数据模型修改困难，数据一致性难以保障。</p>
<p>最终系统整体依赖复杂，容易形成网状结构，修改时，往往牵一发动全身。</p>
<h4 id="微内核SOA"><a href="#微内核SOA" class="headerlink" title="微内核SOA"></a>微内核SOA</h4><p>每个企业都有自己的核心数据，比如对于电商系统来说，用户/商品/订单/库存/价格都是核心数据，称之为主数据。微内核SOA聚焦各类主数据，封装相关表的所有访问，架构如下图</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou07.jpg" alt=""></p>
<p>每个服务独占式地封装对应主数据表的访问，这些服务构成系统的基础服务，一起组成系统的微内核，供所有上层应用共享。</p>
<p>微内核服务是原子服务，接口粒度比较细，可以在其上构造聚合服务，为上层应用提供粗粒度服务。可以是信息聚合，比如图中商品聚合服务整合商品的基本信息/库存/价格；也可以是流程聚合，比如下单接口，调用来自多个服务的接口，共同完成复杂的下单操作。</p>
<p>这里服务是分层次的，聚合服务是上层，基础服务是底层，依赖规则如下：</p>
<ul>
<li>上层服务可以调用同层服务和基础服务</li>
<li>基础服务是原子服务，不可相互调用</li>
<li>前端应用可以调用聚合服务和跨层调用基础服务</li>
</ul>
<p>微内核的微表示服务的数量有限，接口粒度细；微内核的内核表示这些基础服务处于调用底层，负责核心数据和业务，这和操作系统的内核概念上相似，主数据相当于核心的硬件，如CPU/内存/外存等，微内核的各个基础服务分别负责这些核心资源的管理，屏蔽底层的复杂性，对上层应用提供统一入口和透明化访问。</p>
<p>最近微服务很火，其特征是职责单一、接口粒度细、轻量级通讯协议等，微内核SOA架构有微服务的形，同时又业务内核的神，是架构形散神不散思想的很好体现，这个在淘宝，京东等大型电商系统已有丰富实践。</p>
<h4 id="方式比较"><a href="#方式比较" class="headerlink" title="方式比较"></a>方式比较</h4><p>面向企业外部SOA，业务场景有特殊性，不深入分析，这里主要比较面向应用SOA和微内核SOA区别，一个大型B2C电商系统，应用和主数据时多对多依赖关系，如下图：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou08.jpg" alt=""></p>
<h5 id="面向应用"><a href="#面向应用" class="headerlink" title="面向应用"></a>面向应用</h5><p>面向应用的服务从特定应用出发，整合应用相关数据的访问需求；微内核服务从特定主数据为中心，收敛各个业务对数据的访问需求</p>
<p>在面向应用的服务设计下，数据表的访问入口是发散的，来自多个应用，这带来一系列弊端：</p>
<ul>
<li>数据模型碎片化<br>每个应用都会基于自己的需求，往表里加字段，很多电商的商品表/订单表有多达200个字段，都是野蛮增长，缺少控制的结果</li>
<li>数据模型修改困难<br>类似的访问需求散步在多个服务，缺乏整理，同时表schema修改会影响很多服务和应用</li>
<li>连接资源利用率低<br>多个服务直连数据库，并且每个服务会尽可能多地配置连接数，在应用数量多，业务并发量大的情况下，往往导致数据库连接数不够</li>
</ul>
<h5 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h5><p>微内核SOA通过收敛对主数据的访问，保证数据模型一致性、优化接口和有效利用数据库连接资源。同时通过服务分层，简化系统依赖关系。更为重要的是，微内核服务保证了业务模型的一致性，比如电商系统的商品体系，包含单品/系列商品/组合商品/搭售商品/虚拟商品等一系列复杂概念，这些复杂逻辑在基础商品服务里处理，对上层业务透明一致。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>如果业务模式简单，应用数量少，特定主数据的访问绝大多数（比如80%）来自某个应用，则服务设计以应用为中心是可行的，不利影响较少。</p>
<p>但是对于大型互联网系统，业务广度和深度都复杂，但无论多复杂的系统，主数据类型都是有限的，可以通过聚焦有限的基础业务，以此支持无线的应用业务，结果是底层业务模型稳定，上层业务可以灵活扩展。</p>
<p>面向应用的服务设计是SOA初级阶段，从具体业务着手，自底向下，难度小；微内核服务设计是SOA高级阶段，从全局着手，对业务和数据模型高度抽象，自顶向下，难度大。</p>
<p>值得注意的是，在提供基础服务的同时，每个应用也可以创建自己的服务（但主数据的访问必须通过基础服务），所以为微内核服务和面向应用的服务可以有机的结合在一起，当业务应用变得很多，并且不断增长，可以考虑逐步往基础服务过度，整合特定主数据有关的业务逻辑。</p>
<p>顺带提一下，应用架构会影响组织架构，如果采用面向应用的服务设计，具体service一般由相关应用团队负责；如果是微内核的服务设计，一般由单独的共享服务部门负责所有的基础服务开发，和各个业务研发部门并列，保证设计的中立性和需求响应的及时性</p>
<h2 id="应用架构的进化"><a href="#应用架构的进化" class="headerlink" title="应用架构的进化"></a>应用架构的进化</h2><p>软件是人类活动的虚拟，业务架构是生产活动的体现，应用架构是具体分工合作关系的体现。<br>单体应用类似原始氏族时代，氏族内部有简单分工，氏族之间没有联系；分布式架构类似封建社会，每个家庭自给自足，家庭之间有少量交换关系；SOA架构类似工业时代，企业提供各种成品服务，我为人人，人人为我，相互依赖。微内核的SOA架构类似后工业时代，有些企业聚焦提供水电煤等基础设施服务，其他企业在之上提供生活服务，依赖有层次。</p>
<p>业务架构是生产力，应用架构是生产关系，技术架构是生产工具。业务架构决定应用架构，应用架构需要适配业务架构，并随着业务架构不断进化，同时应用架构依托技术架构最终落地。</p>
<p>企业一开始业务比较简单，比如进销存，此时面向内部用户，提供简单的信息管理系统（MIS），支持数据增删改查即可，单体应用可以满足要求。</p>
<p>随着业务深入，进销存每块业务都变复杂，同时新增客户关系管理，以更好支持营销，业务的深度和广度都增加，这时需要对系统按照业务拆分，变成一个分布式系统。</p>
<p>更进一步，企业转向互联网+战略，拓展在线交易，线上系统和内部系统业务类似，没必要重做一套，此时把内部系统的逻辑做服务化改造，同时供线上线下系统使用，变成一个简单的SOA架构。</p>
<p>紧接着业务模式越来越复杂，订单、商品、库存、价格每块玩法都很深入，比如价格区分会员等级，访问渠道（无线还是PC），销售方式（团购还是普通）等，还有大量的价格促销，这些规则很复杂，容易相互冲突，需要把分散到各个业务的价格逻辑进行统一管理，以基础价格服务的方式透明地提供给上层应用，变成一个微内核的SOA架构。</p>
<p>同时不管是企业内部用户，还是外部顾客所需要的功能，都由很多细分的应用提供支持，需要提供portal，集成相关应用，为不同用户提供统一视图，顶层变成一个AOA的架构（application orientated architecture）。</p>
<p>随着业务和系统不断进化，最后一个比较完善的大型互联网应用架构如下图所示：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/jiagou09.jpg" alt=""></p>
<p>最终整个系统化整为零，形神兼备，支持积木式拼装，支持开发敏捷和业务敏捷。</p>
<p>应用架构，需要站在业务和技术中间，在正确的时间点做正确的架构选择，保证系统有序进化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于架构&quot;&gt;&lt;a href=&quot;#关于架构&quot; class=&quot;headerlink&quot; title=&quot;关于架构&quot;&gt;&lt;/a&gt;关于架构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;太久没写博客了。标题起的很大，有点虚。&lt;/p&gt;
&lt;p&gt;写这篇文章是因为前段时间试着玩了下，Dubbo &amp;amp; 
    
    </summary>
    
      <category term="web软件架构" scheme="http://yoursite.com/categories/web%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="SOA" scheme="http://yoursite.com/tags/SOA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门（四）</title>
    <link href="http://yoursite.com/2017/09/03/SpringBoot%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/03/SpringBoot入门（四）/</id>
    <published>2017-09-03T02:20:03.000Z</published>
    <updated>2017-09-03T02:20:33.480Z</updated>
    
    <content type="html"><![CDATA[<p>今天公司一大早就有人在吵架，感觉气氛弥漫着紧张与不和谐。也没有人出来解调。我问另一个要走的同事这是为什么，他说就是这样。不知道这是公司出了什么问题还是怎么的。</p>
<p>接着SpringBoot入门（三）来</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.imooc.com/learn/767" target="_blank" rel="external">2小时学会SpringBoot</a></li>
<li><a href="http://blog.csdn.net/Peng_Hong_fu/article/details/53691705" target="_blank" rel="external">IntelliJ Idea SpringBoot 数据库增删改查实例</a></li>
<li><a href="http://git.oschina.net/lonecloud/springBoot-imooc-girl" target="_blank" rel="external">2小时学会SpringBoot实例代码</a></li>
</ul>
<hr>
<h2 id="数据库查询补充"><a href="#数据库查询补充" class="headerlink" title="数据库查询补充"></a>数据库查询补充</h2><p>上回说到了基本的增删改查方法，只用继承JpaRepository就有了基本的方法。但是需要增加较为特殊的方法，比如按照年龄来查询肥宅这些基本方法就实现不了了。</p>
<p>按年龄来查询的实现方式也比较简单，在FattyRepository里加入一个接口方法就好，不过要注意命名和返回值的准确。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface FattyRepository extends JpaRepository&lt;Fatty, Integer&gt; &#123;</div><div class="line">    List&lt;Fatty&gt; findByAge(Integer age);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后在FattyController里写按年龄查找的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@GetMapping(<span class="string">"/fatty/age/&#123;age&#125;"</span>)</div><div class="line">public List&lt;Fatty&gt; fattyFindByAge(@PathVariable(<span class="string">"age"</span>) Integer age) &#123;</div><div class="line">    <span class="keyword">return</span> fattyRepository.findByAge(age);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完了之后点击运行，试着在postman里访问下，可以得到</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-4-1.png" alt=""></p>
<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>事务管理的基本概念这里就不多说了，参考博客<a href="http://www.wangsusu.com.cn/2017/06/11/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89/" target="_blank" rel="external">Spring框架（四）</a>。简单的说就是两条 sql 语句同时在一个方法中执行，为了防止一个 sql 语句执行成功而另一个 sql 语句执行失败，引入了事务管理。</p>
<p>SpringBoot为方法添加事务的方式也十分简单。只需要在方法上添加一个@Transaction就可以。试验一下，先添加一个service包，在service包里添加FattyService类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.just4fun.dao.FattyRepository;</div><div class="line"><span class="keyword">import</span> com.just4fun.entity.Fatty;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.transaction.Transactional;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/12.</div><div class="line"> */</div><div class="line">@Service</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FattyService</span> </span>&#123;</div><div class="line">    @Autowired</div><div class="line">    private FattyRepository fattyRepository;</div><div class="line"></div><div class="line">    <span class="comment">//@Transactional</span></div><div class="line">    public <span class="keyword">void</span> insertTwoFatty() &#123;</div><div class="line">        Fatty fatty = <span class="keyword">new</span> Fatty();</div><div class="line">        fatty.setAge(<span class="number">100</span>);</div><div class="line">        fatty.setName(<span class="string">"old fatty"</span>);</div><div class="line">        fatty.setWeight(<span class="number">114115</span>);</div><div class="line">        fattyRepository.save(fatty);</div><div class="line"></div><div class="line">        System.out.println(<span class="number">255</span>/<span class="number">0</span>);</div><div class="line"></div><div class="line">        Fatty fatty1 = <span class="keyword">new</span> Fatty();</div><div class="line">        fatty1.setAge(<span class="number">99</span>);</div><div class="line">        fatty1.setName(<span class="string">"old fatty2"</span>);</div><div class="line">        fatty1.setWeight(<span class="number">115114</span>);</div><div class="line">        fattyRepository.save(fatty);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在Controller里注入fattyService，添加插入两个肥宅的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FattyController</span> </span>&#123;</div><div class="line">    @Autowired</div><div class="line">    FattyRepository fattyRepository;</div><div class="line"></div><div class="line">    ···</div><div class="line">    </div><div class="line">    @PostMapping(<span class="string">"/fatty/two"</span>)</div><div class="line">    public <span class="keyword">void</span> fattyInsertTwo() &#123;</div><div class="line">        fattyService.insertTwoFatty();</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先试试水，注释点@Transaction，试试没有事务的情况下回怎么样。首先运行程序，在postman中输入url，post测试</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-4-2.png" alt=""></p>
<p>返回了错误的json信息，在log里可以看到异常信息</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-4-3.png" alt=""></p>
<p>但是数据库里，可以看到</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-4-4.png" alt=""></p>
<p>添加了一条肥宅信息，另一条没有添加。这个是没有事务的情况下。现在我们希望的是，在service的insertTwo方法里，如果出现异常，则方法里所有的对数据库的操作都要回滚。下面在把@Transaction的注释去掉，删掉数据库的old fatty数据。重新运行程序。</p>
<p>在postman里再次测试，程序同样报了异常，但是数据库里什么也没有发生。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-4-5.png" alt=""></p>
<p>以上就是事务管理。</p>
<p><a href="https://github.com/kentwood/springbootfatty" target="_blank" rel="external">代码地址：https://github.com/kentwood/springbootfatty</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天公司一大早就有人在吵架，感觉气氛弥漫着紧张与不和谐。也没有人出来解调。我问另一个要走的同事这是为什么，他说就是这样。不知道这是公司出了什么问题还是怎么的。&lt;/p&gt;
&lt;p&gt;接着SpringBoot入门（三）来&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门（三）</title>
    <link href="http://yoursite.com/2017/09/03/SpringBoot%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/03/SpringBoot入门（三）/</id>
    <published>2017-09-03T02:18:56.000Z</published>
    <updated>2017-09-03T02:19:49.657Z</updated>
    
    <content type="html"><![CDATA[<p>马上就要去参加公司的培训了，感觉好紧张。真是不想去军训。捉鸡</p>
<p>接着SpringBoot入门（二）来</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.imooc.com/learn/767" target="_blank" rel="external">2小时学会SpringBoot</a></li>
<li><a href="http://blog.csdn.net/Peng_Hong_fu/article/details/53691705" target="_blank" rel="external">IntelliJ Idea SpringBoot 数据库增删改查实例</a></li>
<li><a href="http://git.oschina.net/lonecloud/springBoot-imooc-girl" target="_blank" rel="external">2小时学会SpringBoot实例代码</a></li>
</ul>
<hr>
<h2 id="SpringBoot数据库增删改查实例"><a href="#SpringBoot数据库增删改查实例" class="headerlink" title="SpringBoot数据库增删改查实例"></a>SpringBoot数据库增删改查实例</h2><h3 id="Restful与Controller"><a href="#Restful与Controller" class="headerlink" title="Restful与Controller"></a>Restful与Controller</h3><p>Restful交互方式是现在流行的一种，SpringBoot同样作为流行高逼格的框架，当然也得有支持Restful开发的方式。具体的体现就是在Controller的注解上。</p>
<p>首先是Controller类上的注解。之前SpringMVC使用Restful的时候，需要在Controller类上写@Controller与@ResponseBody两个注解。而在SpringBoot中，只需要使用一个@RestController即可，用来返回json。</p>
<p>另外，参考<a href="http://www.wangsusu.com.cn/2017/05/07/Restful_API%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/" target="_blank" rel="external">Restful_API设计指南</a>，这篇博客，Restful中将对数据库的增删改查与http的方法对应的起来。可以参考教程上的图片</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-1.png" alt=""></p>
<p>那么这些GET，POST，DELETE等http方法，在controller里也有对应的注解来表示。</p>
<p>SpringMVC中Controller采用如下的注解来规定只能用对应的http方法访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">@RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.POST)</div><div class="line">@RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.DELETE)</div><div class="line">@RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.PUT)</div></pre></td></tr></table></figure></p>
<p>而在SpringBoot中增加了如下注解来简化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@GetMapping(value = <span class="string">"/girls"</span>)</div><div class="line">@PostMapping(value = <span class="string">"/girls"</span>)</div><div class="line">@PutMapping(value = <span class="string">"/girls/&#123;id&#125;"</span>)</div><div class="line">@DeleteMapping(value = <span class="string">"/girls/&#123;id&#125;"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="spring-data-jpa"><a href="#spring-data-jpa" class="headerlink" title="spring-data-jpa"></a>spring-data-jpa</h3><p>第一次用这种东西，以前用的都是直接使用框架Hibernate，Mybatis啥的。</p>
<p>JPA全称Java Persistence API.JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</p>
<p>Hibernate3.2+、TopLink 10.1.3以及OpenJPA都提供了JPA的实现。</p>
<p>这种东西用起来和hibernate应该是差不多。</p>
<h3 id="利用jpa创建数据库"><a href="#利用jpa创建数据库" class="headerlink" title="利用jpa创建数据库"></a>利用jpa创建数据库</h3><p>重新建一个SpringBoot项目，与（一）中的步骤一样，选web就好。</p>
<p>首先得在pom.xml里加入jpa与mysql-connector的依赖<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>之后把配置文件改为yml格式，写入如下内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  profiles:</div><div class="line">    active: a</div><div class="line">  datasource:</div><div class="line">      driver-class-name: com.mysql.jdbc.Driver</div><div class="line">      url: jdbc:mysql://127.0.0.1:3306/sb_fatty</div><div class="line">      username: root</div><div class="line">      password: a4570155</div><div class="line"></div><div class="line">  jpa:</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: update</div><div class="line">    show-sql: true</div><div class="line">    </div><div class="line">server:</div><div class="line">  context-path: /fattyProj</div><div class="line">  port: 80</div></pre></td></tr></table></figure></p>
<p>注意行的间距不能错，jpa属于sping下的东西。spring-boot-start-data-jpa应该是直接把hibernate的jar包也封装进去了。用起来非常方便，但是也越来越傻了。我觉得是好事。</p>
<p>之后需要在数据库里新建一个数据库叫sb_fatty，sb是springboot的意思，不是shabi。</p>
<p>之后创建一个Fatty实例，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/11.</div><div class="line"> */</div><div class="line">@Entity</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Fatty</span> </span>&#123;</div><div class="line">    @Id</div><div class="line">    @GeneratedValue</div><div class="line">    private Integer id;</div><div class="line"></div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line"></div><div class="line">    private Integer age;</div><div class="line"></div><div class="line">    private Integer weight;</div><div class="line"></div><div class="line">    public Fatty() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个Fatty实例用来映射数据库，首先需要在类上加入@Entity注解，之后在主键id上加入@Id，@GeneratedValue注解分别用来表示主键与自增长。另外默认构造函数一定要有，所有属性的getter与setter方法也必须有。</p>
<p>然后先试着运行一下程序。完事之后应该可以看见sb_fatty数据库里有了fatty表</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-2.png" alt=""></p>
<p>之后新建一个dao包，写个FattyRepository。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.just4fun.entity.Fatty;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/11.</div><div class="line"> */</div><div class="line">public interface FattyRepository extends JpaRepository&lt;Fatty, Integer&gt; &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个FattyRepository接口什么也没有，只是继承了JpaRepository，因为这个JpaRepository已经提供了数据库增删改查，查所有等基本方法。</p>
<p>之后写FattyController<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.just4fun.dao.FattyRepository;</div><div class="line"><span class="keyword">import</span> com.just4fun.entity.Fatty;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/11.</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FattyController</span> </span>&#123;</div><div class="line">    @Autowired</div><div class="line">    FattyRepository fattyRepository;</div><div class="line"></div><div class="line">    @GetMapping(<span class="string">"/fatty"</span>)</div><div class="line">    public List&lt;Fatty&gt; fattyList() &#123;</div><div class="line">        <span class="keyword">return</span> fattyRepository.findAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注入FattyRepository，方法里写findAll()就会查找到所有的肥宅。</p>
<p>接下来试试水，在数据库里手动添加两条数据</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-3.png" alt=""></p>
<p>运行程序，可以得到返回正确的json结果，测试的话采用chrome插件postman，装chrome插件需要科学上网。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-4.png" alt=""></p>
<p>同时可以看见控制台输出了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hibernate: select fatty0_.id <span class="keyword">as</span> id1_0_, fatty0_.age <span class="keyword">as</span> age2_0_, fatty0_.name <span class="keyword">as</span> name3_0_, fatty0_.weight <span class="keyword">as</span> weight4_0_ <span class="keyword">from</span> fatty fatty0_</div></pre></td></tr></table></figure></p>
<p>下面补全增删改查的所有操作，在Controller里补全方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.just4fun.dao.FattyRepository;</div><div class="line"><span class="keyword">import</span> com.just4fun.entity.Fatty;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/11.</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FattyController</span> </span>&#123;</div><div class="line">    @Autowired</div><div class="line">    FattyRepository fattyRepository;</div><div class="line"></div><div class="line">    @GetMapping(<span class="string">"/fatty"</span>)</div><div class="line">    public List&lt;Fatty&gt; fattyList() &#123;</div><div class="line">        <span class="keyword">return</span> fattyRepository.findAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @PostMapping(<span class="string">"/fatty"</span>)</div><div class="line">    public Fatty fattyAdd(@RequestParam(<span class="string">"name"</span>) <span class="built_in">String</span> name,</div><div class="line">                          @RequestParam(<span class="string">"age"</span>) Integer age,</div><div class="line">                          @RequestParam(<span class="string">"weight"</span>) Integer weight) &#123;</div><div class="line">        Fatty fatty = <span class="keyword">new</span> Fatty();</div><div class="line">        fatty.setName(name);</div><div class="line">        fatty.setAge(age);</div><div class="line">        fatty.setWeight(weight);</div><div class="line">        <span class="keyword">return</span> fattyRepository.save(fatty);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @DeleteMapping(<span class="string">"/fatty/&#123;id&#125;"</span>)</div><div class="line">    public <span class="keyword">void</span> fattyDelete(@PathVariable(<span class="string">"id"</span>) Integer id) &#123;</div><div class="line">        fattyRepository.delete(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @PutMapping(<span class="string">"/fatty/&#123;id&#125;"</span>)</div><div class="line">    public Fatty fattyUpdate(@PathVariable(<span class="string">"id"</span>) Integer id,</div><div class="line">                             @RequestParam(<span class="string">"name"</span>) <span class="built_in">String</span> name,</div><div class="line">                             @RequestParam(<span class="string">"age"</span>) Integer age,</div><div class="line">                             @RequestParam(<span class="string">"weight"</span>) Integer weight) &#123;</div><div class="line">        Fatty fatty = <span class="keyword">new</span> Fatty();</div><div class="line">        fatty.setId(id);</div><div class="line">        fatty.setName(name);</div><div class="line">        fatty.setAge(age);</div><div class="line">        fatty.setWeight(weight);</div><div class="line">        <span class="keyword">return</span> fattyRepository.save(fatty);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @GetMapping(<span class="string">"fatty/&#123;id&#125;"</span>)</div><div class="line">    public Fatty fattyFindOne(@PathVariable(<span class="string">"id"</span>) Integer id)&#123;</div><div class="line">        <span class="keyword">return</span> fattyRepository.findOne(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来重新运行，</p>
<ul>
<li>测试查询单个：</li>
</ul>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-5.png" alt=""></p>
<ul>
<li>测试插入方法：</li>
</ul>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-6.png" alt=""></p>
<p>可以看到数据库里多了肥傲天的信息。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-7.png" alt=""></p>
<ul>
<li>测试更新方法：</li>
</ul>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-8.png" alt=""></p>
<p>看数据库里的信息：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-9.png" alt=""></p>
<ul>
<li>测试删除方法</li>
</ul>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-10.png" alt=""></p>
<p>看数据库</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-3-11.png" alt=""></p>
<p>妥妥的，需要注意的点是PUT方法的param，不能选择form-data传输，要选择x-www-form-urlencoded。</p>
<p>今天的先到这里。明天继续加一点数据库内容和事务管理</p>
<p><a href="https://github.com/kentwood/springbootfatty" target="_blank" rel="external">代码地址：https://github.com/kentwood/springbootfatty</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上就要去参加公司的培训了，感觉好紧张。真是不想去军训。捉鸡&lt;/p&gt;
&lt;p&gt;接着SpringBoot入门（二）来&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门（二）</title>
    <link href="http://yoursite.com/2017/09/03/SpringBoot%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/03/SpringBoot入门（二）/</id>
    <published>2017-09-03T02:16:31.000Z</published>
    <updated>2017-09-03T02:17:56.498Z</updated>
    
    <content type="html"><![CDATA[<p>我发现博客还是不要写太长，不然自己都难找到，每次一个知识点，见好就收。简单点写写起来还更有成就感，我打算SpringBoot入门就搞他个七八篇。</p>
<p>接着SpringBoot入门（一）来</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.imooc.com/learn/767" target="_blank" rel="external">2小时学会SpringBoot</a></li>
<li><a href="http://blog.csdn.net/Peng_Hong_fu/article/details/53691705" target="_blank" rel="external">IntelliJ Idea SpringBoot 数据库增删改查实例</a></li>
<li><a href="http://git.oschina.net/lonecloud/springBoot-imooc-girl" target="_blank" rel="external">2小时学会SpringBoot实例代码</a></li>
</ul>
<hr>
<h2 id="自定义属性配置"><a href="#自定义属性配置" class="headerlink" title="自定义属性配置"></a>自定义属性配置</h2><p>SpringBoot的属性文件就是在resources文件夹里的application.properties</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-1.png" alt=""></p>
<p>具体怎么配置，有哪些东西可以配置，我也没法说全，在IJ上输入就会有提示，记住一些常用的，其他的等需要的时候再去网上查查就好。按照教程上的，先配置下访问端口与前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server.port=<span class="number">8081</span></div><div class="line">server.context-path=<span class="regexp">/girl</span></div></pre></td></tr></table></figure>
<p>妥了之后重新运行，输入 localhost:8081/girl/hello 可以得到：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-2.png" alt=""></p>
<p>在SpringBoot中，一般流行逼格高一点的.yml配置文件而不使用.properties配置文件，下面就搞一个。SpringBoot是根据文件名来定位配置文件的，把application.properties改成application1.properties。新建一个application.yml文件</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-3.png" alt=""></p>
<p>在里面写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: <span class="number">8082</span></div><div class="line">  context-path: <span class="regexp">/girl</span></div></pre></td></tr></table></figure></p>
<p>注意中间的空格，其实不注意也没关系，反正工具会给你提示的。yml的感觉，就要java里包的树状体系结构一样，看起来确实要更清晰。</p>
<p>重启运行程序，浏览器输入 localhost:8082/girl/hello</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-4.png" alt=""></p>
<h2 id="配置文件高级玩法"><a href="#配置文件高级玩法" class="headerlink" title="配置文件高级玩法"></a>配置文件高级玩法</h2><p>可以在配置文件中配置数据，在Controller里获取。先来简单的，在application.yml里写<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8082</div><div class="line">  context-path: /girl</div><div class="line"></div><div class="line">name: 肥宅</div></pre></td></tr></table></figure></p>
<p>增加了一个肥宅。然后在HelloController里写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    @Value(<span class="string">"$&#123;name&#125;"</span>)</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line"></div><div class="line">    @RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">    public <span class="built_in">String</span> sayHello() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里对name的取值类似于jsp里用到的el表达式。写完点运行</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-5.png" alt=""></p>
<p>这是单个的配置文件，但是这样不足以体现出yml的分层的优势，看到yml的写法，自然可以联想到，这不就是对象么。下面就在yml增加一个配置，然后直接封装到对象里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fatty:</div><div class="line">  name: 肥傲天</div><div class="line">  age: <span class="number">18</span></div><div class="line">  weight: <span class="number">65535</span></div></pre></td></tr></table></figure></p>
<p>之后写一个对象，对应配置里的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.model;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/11.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">@ConfigurationProperties(prefix = <span class="string">"fatty"</span>)</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FattyProperties</span> </span>&#123;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line"></div><div class="line">    private int age;</div><div class="line"></div><div class="line">    private int weight;</div><div class="line"></div><div class="line">    public <span class="built_in">String</span> getName() &#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setName(<span class="built_in">String</span> name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getAge() &#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setAge(int age) &#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getWeight() &#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setWeight(int weight) &#123;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public <span class="built_in">String</span> toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"死肥宅："</span> + name + <span class="string">", "</span> + age + <span class="string">"岁, "</span> + weight + <span class="string">"斤"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的数据名称与类型要注意对应，添加Component注解，ConfigurationProperties注解。</p>
<p>之后写Controller<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    @Value(<span class="string">"$&#123;name&#125;"</span>)</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private FattyProperties fattyProperties;</div><div class="line"></div><div class="line">    @RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">    public <span class="built_in">String</span> sayHello() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @RequestMapping(value = <span class="string">"/fatty"</span>, method = RequestMethod.GET)</div><div class="line">    public <span class="built_in">String</span> sayHelloToFatty() &#123;</div><div class="line">        <span class="keyword">return</span> fattyProperties.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后运行，可得到</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-5.png" alt=""></p>
<p>最后说一下SpringBoot里多套配置文件的写法，用于解决切换生产环境与调试环境，解决i18n国际化问题等。写法如下，先新建一个application.yml，application-zh.yml，application-en.yml。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-7.png" alt=""></p>
<p>zh与en就是中英文的区别，写法如下：</p>
<ul>
<li><p>application-zh.yml:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8082</div><div class="line">  context-path: /girl</div><div class="line"></div><div class="line">name: 肥宅</div><div class="line"></div><div class="line">fatty:</div><div class="line">  name: 肥傲天</div><div class="line">  age: 18</div><div class="line">  weight: 65535</div></pre></td></tr></table></figure>
</li>
<li><p>application-en.yml:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8082</div><div class="line">  context-path: /girl</div><div class="line"></div><div class="line">name: fatOtaku</div><div class="line"></div><div class="line">fatty:</div><div class="line">  name: fatArroganceSky</div><div class="line">  age: 18</div><div class="line">  weight: 65535</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后是在主配置文件application.yml里选择用哪个配置文件</p>
<ul>
<li>application.yml:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  profiles:</div><div class="line">    active: en</div></pre></td></tr></table></figure>
</li>
</ul>
<p>下面试一下效果，点击运行</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-2-6.png" alt=""></p>
<p>妥妥的，第二篇就到这里</p>
<p><a href="https://github.com/kentwood/girl" target="_blank" rel="external">代码地址：https://github.com/kentwood/girl</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我发现博客还是不要写太长，不然自己都难找到，每次一个知识点，见好就收。简单点写写起来还更有成就感，我打算SpringBoot入门就搞他个七八篇。&lt;/p&gt;
&lt;p&gt;接着SpringBoot入门（一）来&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门（一）</title>
    <link href="http://yoursite.com/2017/09/03/SpringBoot%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/03/SpringBoot入门（一）/</id>
    <published>2017-09-03T02:08:48.000Z</published>
    <updated>2017-09-03T02:10:09.112Z</updated>
    
    <content type="html"><![CDATA[<p>学了这么久的Java，终于有一种快赶上时代潮流的感觉。虽然SpringBoot也是出来了很久了，而且越来越火，现在也是恰逢好时候学习这个东西。今天看了慕课网的教程，感觉还可以，这里自己也稍微<del>抄袭</del>总结下吧</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.imooc.com/learn/767" target="_blank" rel="external">2小时学会SpringBoot</a></li>
<li><a href="http://blog.csdn.net/Peng_Hong_fu/article/details/53691705" target="_blank" rel="external">IntelliJ Idea SpringBoot 数据库增删改查实例</a></li>
<li><a href="http://git.oschina.net/lonecloud/springBoot-imooc-girl" target="_blank" rel="external">2小时学会SpringBoot实例代码</a></li>
</ul>
<hr>
<h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></div><div class="line">( ( )\___ | '_ | <span class="string">'_| | '</span>_ \/ _<span class="string">` | \ \ \ \</span></div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.4.2.RELEASE)</div></pre></td></tr></table></figure>
<p>这个标志，就是SpringBoot运行时终端打印出来的图案，算是一个颜文字标志。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-1.jpg" alt=""></p>
<p>SpringBoot是SpringMVC的一个升级版，在编码，配置，部署与监控方面会比SpringMVC要简单很多··很多！</p>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>微服务是个比较新的概念，我的理解就是把整个应用，拆分成多个服务，增加复用减少耦合。当然我的理解太过于浅显。想要了解微服务的可以参考写这篇文章：<a href="http://www.oschina.net/news/70121/microservice" target="_blank" rel="external">微服务（Microservice）那点事</a>。</p>
<p>Spring为微服务提供了一整套的组件SpringCloud，用户可以调用需要的服务，而SpringBoot就是该微服务的基础。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-2.png" alt=""></p>
<h2 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h2><p>原理什么的，我还是不打算深究，只要能用上就妥了。这里还是通过教程上的实例来搞定SpringBoot的用法就OK。</p>
<p>用Intellij Idea新建一个Spring Initializr</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-3.png" alt=""></p>
<p>点next</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-4.png" alt=""></p>
<p>注意填好包名（Group），工程名（Artifact），以及选择jar打包，继续点next</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-5.png" alt=""></p>
<p>教程开发的是web项目，所以这里选择web就好了，其他的我还没试过，反正看见这么多眼花缭乱的东西，感觉这东西还是很棒。之后点下一步</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-6.png" alt=""></p>
<p>点finish，就创建好了工程，第一个创建SpringBoot会比较慢，因为会从Maven仓库里下载很多组件。</p>
<p>工程建立好了之后，先删掉看起来很显眼但是没什么用的文件。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-7.png" alt=""></p>
<p>一个完整的新建SpringBoot项目结构如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-8.png" alt=""></p>
<p>先来看看maven配置文件pom.xml：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.just4fun&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;girl&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;girl&lt;/name&gt;</div><div class="line">	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到这个parent结点配置的就是spring-boot-starter-parent，这个Maven的SpringBoot默认配置。之后在dependencies依赖结点里添加了test与web的依赖，因为一开始配置的时候选择了web。</p>
<p>之后还有一个空配置文件application.properties用于配置工程，与一个Application的java文件作为启动入口。下面就来启动一下。</p>
<p>SpringBoot启动方式异常简单，直接像运行普通java程序一样，右键GirlApplication，点击run就可以了。</p>
<p>点击run之后出现如下log<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></div><div class="line">( ( )\___ | '_ | <span class="string">'_| | '</span>_ \/ _<span class="string">` | \ \ \ \</span></div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.5.4.RELEASE)</div><div class="line"></div><div class="line">2017-07-10 11:20:57.954  INFO 7012 --- [           main] com.just4fun.GirlApplication             : Starting GirlApplication on sdt14096 with PID 7012 (E:\IntellijProject\girl\target\classes started by sdt14096 in E:\IntellijProject\girl)</div><div class="line">2017-07-10 11:20:57.958  INFO 7012 --- [           main] com.just4fun.GirlApplication             : No active profile set, falling back to default profiles: default</div><div class="line">2017-07-10 11:20:58.478  INFO 7012 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@71d15f18: startup date [Mon Jul 10 11:20:58 CST 2017]; root of context hierarchy</div><div class="line">2017-07-10 11:21:02.226  INFO 7012 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</div><div class="line">2017-07-10 11:21:02.341  INFO 7012 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</div><div class="line">2017-07-10 11:21:02.372  INFO 7012 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.15</div><div class="line">2017-07-10 11:21:02.810  INFO 7012 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</div><div class="line">2017-07-10 11:21:02.811  INFO 7012 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4336 ms</div><div class="line">2017-07-10 11:21:03.095  INFO 7012 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: 'dispatcherServlet' to [/]</div><div class="line">2017-07-10 11:21:03.100  INFO 7012 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'characterEncodingFilter' to: [/*]</div><div class="line">2017-07-10 11:21:03.101  INFO 7012 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]</div><div class="line">2017-07-10 11:21:03.102  INFO 7012 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'httpPutFormContentFilter' to: [/*]</div><div class="line">2017-07-10 11:21:03.102  INFO 7012 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'requestContextFilter' to: [/*]</div><div class="line">2017-07-10 11:21:03.669  INFO 7012 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@71d15f18: startup date [Mon Jul 10 11:20:58 CST 2017]; root of context hierarchy</div><div class="line">2017-07-10 11:21:03.811  INFO 7012 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "&#123;[/error]&#125;" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</div><div class="line">2017-07-10 11:21:03.812  INFO 7012 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "&#123;[/error],produces=[text/html]&#125;" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</div><div class="line">2017-07-10 11:21:03.835  INFO 7012 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-07-10 11:21:03.835  INFO 7012 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-07-10 11:21:03.908  INFO 7012 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-07-10 11:21:04.188  INFO 7012 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</div><div class="line">2017-07-10 11:21:04.348  INFO 7012 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</div><div class="line">2017-07-10 11:21:04.366  INFO 7012 --- [           main] com.just4fun.GirlApplication             : Started GirlApplication in 8.455 seconds (JVM running for 9.972)</div></pre></td></tr></table></figure></p>
<p>可以看到SpringBoot的logo，最后有一条，tomcat在8080端口上运行，这里是SpringBoot很棒的地方，使用SpringBoot web就会隐式的引入了tomcat的相关包，这样就不比先下载服务器软件，然后打包，再发布再调试，省略了很多步骤，这对在开发环境下大大提高了效率。到了生产环境下再打包发布war。</p>
<p>下面是一下在浏览器里输入 localhost:8080</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-9.png" alt=""></p>
<p>虽然是404，但是看页面也是服务器返回的数据。算是启动服务了吧，下面还是写一个自定义的存在的页面。</p>
<p>新建一个controller，如下图</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-10.png" alt=""></p>
<p>在controller里写如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.just4fun.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sdt14096 on 2017/7/10.</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    @RequestMapping(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">    public <span class="built_in">String</span> sayHello() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello AutumnShut"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>学过SpringMVC的应该会很熟悉Controller的这一套流程，其中@RestController注解是一个新名词而不是新概念，其实就是@Controller与@ResponseBody的结合。</p>
<p>接下来重启下应用。在浏览器里输入 localhost:8080/hello  可以得到：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springboot-1-11.png" alt=""></p>
<p>算是运行起来了SpringBoot的第一个程序。</p>
<p><a href="https://github.com/kentwood/girl" target="_blank" rel="external">代码地址：https://github.com/kentwood/girl</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学了这么久的Java，终于有一种快赶上时代潮流的感觉。虽然SpringBoot也是出来了很久了，而且越来越火，现在也是恰逢好时候学习这个东西。今天看了慕课网的教程，感觉还可以，这里自己也稍微&lt;del&gt;抄袭&lt;/del&gt;总结下吧&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>rsync+inotify实现数据实时同步备份</title>
    <link href="http://yoursite.com/2017/06/24/rsync-inotify%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2017/06/24/rsync-inotify实现数据实时同步备份/</id>
    <published>2017-06-24T00:56:56.000Z</published>
    <updated>2017-06-24T00:57:50.812Z</updated>
    
    <content type="html"><![CDATA[<p>干搞了一天运维的活，做一个工作总结，自己也学点东西。</p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>全名是remote synchronize，远程同步。rsync是linux下一款非常强大的同步工具，采用差异同步的方法，只上传文件/文件夹的不同部分，同时可以对上传部分先进行压缩，所以rsync的传输效率是很高的但rsync也有缺点，最大的问题就是每次执行rsync命令都会遍历目标目录，当文件不多时，这没什么问题，一旦文件数到了一定规模，那么每次遍历都会消耗很多资源，如果只对经常改动的目录进行同步，也可以忽略这个问题，如果每次改动的目录多较大，那么就要用到inotify了，Inotify是一种强大的、细粒度的、异步的文件系统事件监控机制，Linux内核从2.6.13起，加入了对Inotify的支持，通过Inotify可以监控文件系统中的添加、删除、修改、移动等各种事件。</p>
<p>关于rsync的四种模式等等基本理论知识不做过多介绍，具体可参考其他文档，下面只谈如何操作。</p>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>操作系统：CentOS_6.9-x86_64</li>
<li>更新源服务器：192.168.1.2</li>
<li>目的服务器：192.168.1.3  192.168.1.4  … …</li>
</ul>
<h3 id="目的服务操作"><a href="#目的服务操作" class="headerlink" title="目的服务操作"></a>目的服务操作</h3><p>首先安装rsync<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install rsync xinetd</div></pre></td></tr></table></figure></p>
<p>安装好之后在/etc/xinetd.d/这个目录下有一个rsync的文件。</p>
<p>之后需要为rsync服务提供配置文件，新建一个rsyncd.conf。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/rsync.conf</div></pre></td></tr></table></figure></p>
<p>为文件添加如下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">uid = nobody</div><div class="line">gid = nobody</div><div class="line">use chroot = no</div><div class="line">max connections = 10</div><div class="line">strict modes = yes</div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">log file = /var/log/rsyncd.log</div><div class="line"># Directory to be synced</div><div class="line">[shareData]</div><div class="line">path = /usr/local/mydata</div><div class="line">ignore errors = yes</div><div class="line">read only = no</div><div class="line">write noly = no</div><div class="line">hosts allow = 132.148.129.154</div><div class="line">#hosts allow = *</div><div class="line">hosts deny = *</div><div class="line">list = false</div><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">#auth users = bingetv</div><div class="line">#secrets file = /etc/rsync.passwd</div></pre></td></tr></table></figure></p>
<p>关于这里面参数的介绍，截取网上的一段说明<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">uid = nobody      //运行RSYNC守护进程的用户</div><div class="line">gid = nobody      //运行RSYNC守护进程的组</div><div class="line">use chroot = 0    //不使用chroot</div><div class="line">max connections = 0   // 最大连接数,0为不限制</div><div class="line">port = 873  //默认端口873</div><div class="line">下面这些文件是安装完RSYNC服务后自动生成的文件</div><div class="line">pid file = /var/run/rsyncd.pid    //pid文件的存放位置</div><div class="line">lock file = /var/run/rsync.lock   //锁文件的存放位置.指定支持max connections参数的锁文件,默认值是/var/run/rsyncd.lock.</div><div class="line">log file = /var/log/rsyncd.log    //日志记录文件的存放位置</div><div class="line">Timeout = 300</div><div class="line">通过该选项可以覆盖客户指定的IP超时时间.通过该选项可以确保rsync服务器不会永远等待一个崩溃的客户端.超时单位为秒钟,0表示没有超时定义,这也是默认值.对于匿名rsync服务器来说,一个理想的数字是600.</div><div class="line">Log format = %t %a %m %f %b</div><div class="line">通过该选项用户在使用transfer logging可以自己定制日志文件的字段.其格式是一个包含格式定义符的字符串,可以使用的格式定义符如下所示：</div><div class="line">%h 远程主机名</div><div class="line">%a 远程IP地址</div><div class="line">%l 文件长度字符数</div><div class="line">%p 该次rsync会话的进程id</div><div class="line">%o 操作类型：" send" 或" recv"</div><div class="line">%f 文件名</div><div class="line">%P 模块路径</div><div class="line">%m 模块名</div><div class="line">%t 当前时间</div><div class="line">%u 认证的用户名(匿名时是null)</div><div class="line">%b 实际传输的字节数</div><div class="line">%c 当发送文件时,该字段记录该文件的校验码</div><div class="line">默认log格式为：" %o %h [%a] %m (%u) %f %l" ,一般来说,在每行的头上会添加" %t [%p] " .在源代码中同时发布有一个叫rsyncstats的perl脚本程序来统计这种格式的日志文件.</div><div class="line">#transfer logging = yes</div><div class="line">使rsync服务器使用ftp格式的文件来记录下载和上载操作在自己单独的日志中.</div><div class="line">syslog facility = local3 </div><div class="line">指定rsync发送日志消息给syslog时的消息级别,常见的消息级别是：uth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, sys-log, user, uucp, local0, local1, local2, local3,local4, local5, local6和local7.默认值是daemon.</div><div class="line">模块参数</div><div class="line">[web1]   //这里是认证的模块名,在client端需要指定</div><div class="line">path = /data/www1/  //需要做镜像的目录,不可缺少！</div><div class="line">comment = backup web  //这个模块的注释信息</div><div class="line">ignore errors    //可以忽略一些无关的IO错误</div><div class="line">read only = yes  //该选项设定是否允许客户上载文件.如果为true那么任何上载请求都会失败,如果为false并且服务器目录读写权限允许那么上载是允许的.默认值为true.</div><div class="line">list = no        //不允许列文件</div><div class="line">auth users = bak    //认证的用户名,如果没有这行则表明是匿名,此用户与系统无关</div><div class="line">该选项指定由空格或逗号分隔的用户名列表,只有这些用户才允许连接该模块.这里的用户和系统用户没有任何关系.如果" auth users" 被设置,那么客户端发出对该模块的连接请求以后会被rsync请求challenged进行验证身份这里使用的challenge/response认证协议.用户的名和密码以明文方式存放在" secrets file" 选项指定的文件中.默认情况下无需密码就可以连接模块(也就是匿名方式).</div><div class="line">secrets file = /etc/www1.pwd      //密码和用户名对比表,密码文件自己生成</div><div class="line">该选项指定一个包含定义用户名:密码对的文件.只有在" auth users" 被定义时,该文件才有作用.文件每行包含一个username:passwd对.一般来说密码最好不要超过8个字符.没有默认的secures file名,需要限式指定一个(例如：/etc/www1.pwd).注意：该文件的权限一定要是600,否则客户端将不能连接服务器.</div><div class="line">hosts allow = 192.168.9.0/255.255.255.0  //允许主机或网段</div><div class="line">该选项指定哪些IP的客户允许连接该模块.客户模式定义可以是以下形式：</div><div class="line">单个IP地址,例如：192.168.9.227</div><div class="line">整个网段,例如：192.168.9.0/24,也可以是192.168.9.0/255.255.255.0</div><div class="line">多个IP或网段需要用空格隔开,“*”则表示所有,默认是允许所有主机连接.</div><div class="line">hosts deny = 0.0.0.0/0  //禁止主机</div></pre></td></tr></table></figure></p>
<p>我在配置的时候遇到了模块名称错误的问题，[shareData]是指模块名称，待会会用到，还有权限错误问题，账号密码明明是对的却推送不到目的主机，然后我直接把账号密码的一套去掉了，就是那个auth user以及secrets file配置，这个问题暂时保留。</p>
<p>假如，需要用到权限的话，需要再配置一个/etc/rsyncd.passwd。</p>
<p>同样用vim新建一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/rsync.passwd</div></pre></td></tr></table></figure></p>
<p>写入系统的登录信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bingetv:zhebushimima</div></pre></td></tr></table></figure></p>
<p>写法是这样  yourUserName:yourPassword</p>
<p>之后需要更改passwd文件权限，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod <span class="number">600</span> /etc/.rsyncd.passwd</div></pre></td></tr></table></figure></p>
<p>然后启动监听，开启服务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig rsync on</div><div class="line">service xinetd start</div></pre></td></tr></table></figure></p>
<p>目的服务器的配置到此结束</p>
<h3 id="更新源服务器"><a href="#更新源服务器" class="headerlink" title="更新源服务器"></a>更新源服务器</h3><p>由于inotify特性需要Linux内核的支持，在安装inotify-tools前要先确认Linux系统内核是否达到了2.6.13以上，如果Linux内核低于2.6.13版本，就需要重新编译内核加入inotify的支持，也可以用如下方法判断，内核是否支持inotify：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># uname -r</div><div class="line">2.6.32-431.el6.x86_64</div></pre></td></tr></table></figure></p>
<p>查看内核是否支持inotify API，如果有以下三项，表示系统已经默认支持inotify，接着就可以开始安装inotify-tools了<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># ll /proc/sys/fs/inotify/</div><div class="line"></div><div class="line">total 0</div><div class="line">-rw-r--r-- 1 root root 0 Nov  7 10:29 max_queued_events</div><div class="line">-rw-r--r-- 1 root root 0 Nov  7 10:29 max_user_instances</div><div class="line">-rw-r--r-- 1 root root 0 Nov  7 10:29 max_user_watches</div></pre></td></tr></table></figure></p>
<p>简单介绍一下这三个文件是做什么用的：</p>
<ul>
<li>max_queued_evnets:表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。</li>
<li>max_user_instances:表示每一个real user ID可创建的inotify instatnces的数量上限。</li>
<li>max_user_watches:表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小，例如：echo “9000000” &gt; /proc/sys/fs/inotify/max_user_watches</li>
</ul>
<p>如果有这些信息就可以安装了，我这里不知道为啥yum安装不了，直接从网上下一个下载包下来装的，步骤如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@bingetv ~]#wget http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz             #下载inotify-tools软件</div><div class="line">[root@bingetv ~]# ls</div><div class="line">anaconda-ks.cfg            install.log  </div><div class="line">inotify-tools-3.14.tar.gz  install.log.syslog</div><div class="line">[root@bingetv ~]# tar xf inotify-tools-3.14.tar.gz          #解压软件</div><div class="line">[root@bingetv ~]# cd inotify-tools-3.14</div><div class="line">[root@bingetv inotify-tools-3.14]# ./configure --prefix=/usr/local/inotify &amp;&amp; make &amp;&amp; make install                 #编译安装软件</div><div class="line">[root@bingetv ~]#cd /usr/local/inotify/</div><div class="line">[root@bingetv inotify]# echo "PATH=/usr/local/inotify/bin:$PATH" &gt;&gt;/etc/profile.d/inotify.sh             #设置能与系统关联的path路径</div><div class="line">[root@bingetv inotify]# source /etc/profile.d/inotify.sh</div><div class="line">[root@bingetv inotify]# echo "/usr/local/inotify/lib" &gt;/etc/ld.so.conf.d/inotify.conf         #设置系统能识别软件的库文件</div><div class="line">[root@bingetv inotify]# ldconfig -v | grep inotify</div><div class="line">/usr/local/inotify/lib:</div><div class="line">libinotifytools.so.0 -&gt; libinotifytools.so.0.4.1</div><div class="line">[root@bingetv inotify]# ln -sv /usr/local/inotify/include/ /usr/include/inotify                      #链接头文件到系统能识别的路径下</div><div class="line">`/usr/include/inotify' -&gt; `/usr/local/inotify/include/'</div><div class="line">[root@bingetv inotify]#</div></pre></td></tr></table></figure></p>
<p>之后配置一个能连接rsync的密码文件和传输数据的脚本。</p>
<p>首先写个远程密码文件，权限设为600，在文件里写远程服务器的密码就可以了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/rsyncd.pwd</div><div class="line"></div><div class="line">yourPassword</div><div class="line"></div><div class="line">chmod <span class="number">600</span> /etc/rsyncd.pwd</div></pre></td></tr></table></figure></p>
<p>先建一个需要共享的目录<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/</div><div class="line">mkdir mydata</div><div class="line">cd mydata</div></pre></td></tr></table></figure></p>
<p>接着在此目录里建立一个运行脚本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim inotifyrsync.sh</div></pre></td></tr></table></figure></p>
<p>写入以下内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">host=<span class="number">132.148</span><span class="number">.129</span><span class="number">.153</span></div><div class="line">data_dir=<span class="regexp">/usr/</span>local/mydata/</div><div class="line">dst=shareData</div><div class="line">username=bingetv</div><div class="line"></div><div class="line">inotifywait -mrq --timefmt <span class="string">'%d/%m/%y %H:%M'</span> --format <span class="string">'%T %w%f%e'</span> -e modify,<span class="keyword">delete</span>,create,attrib $data_dir | <span class="keyword">while</span> read fil</div><div class="line">es</div><div class="line"><span class="keyword">do</span></div><div class="line">/usr/bin/rsync -vzrtopg --<span class="keyword">delete</span> --progress --password-file=<span class="regexp">/etc/</span>rsyncd.passwd $data_dir $username@$host::$dst</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>之后后台执行此脚本文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/bash inotifyrsync.sh &amp;</div></pre></td></tr></table></figure></p>
<p>然后在更新源服务器的/usr/local/mydata里添加文件，在目标服务器的/usr/local/mydata里也能得到了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;干搞了一天运维的活，做一个工作总结，自己也学点东西。&lt;/p&gt;
&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;全名是remote synchronize，远程同步。r
    
    </summary>
    
      <category term="系统运维" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="数据同步" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架（四）</title>
    <link href="http://yoursite.com/2017/06/11/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/06/11/Spring框架（四）/</id>
    <published>2017-06-11T01:46:26.000Z</published>
    <updated>2017-06-11T02:03:41.302Z</updated>
    
    <content type="html"><![CDATA[<p>已经有几个星期没写博客了，一方面是把全身心投入的工作（其实也没做出什么成绩），另一方面是自己太懒了。如果自己不坚持写下去的话，我怕以后都不会坚持了，我还是决定好好写写博客。</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.mamicode.com/info-detail-1248286.html" target="_blank" rel="external">Spring事务管理详解与实例：http://www.mamicode.com/info-detail-1248286.html</a></li>
</ul>
<hr>
<h3 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h3><p>这一篇博客还是得接着之前的Spring框架来，说一说Spring里的事务管理。先来看看什么是事务。举一个被用滥了的例子。从ATM里取钱，你取1000块出来，一方面银行的ATM机吐出1000块，另一方面你得到1000块。这是两件事，虽然在日常生活中这往往被认定为一件事，但是在程序中具体来说是对数据库的操作中将数据从一边转移到另一边是分为delete与insert两个步骤的。这样其实就引出来一个问题，如果你的银行卡里的金额数据在delete了1000之后，忽然ATM机器断电或者出现其他的异常，那么你将会损失1000块钱，这是将是非常不愉快的事情。为了应对这类问题，<strong>事务</strong>的概念被引出。</p>
<p>所谓的事务，其实就是一系列动作的集合，这些集合动作共同完成一个工作单元。只有所有动作执行成功了，才算事务完毕。如果有一个动作执行失败，则会回滚到所有系列动作都未执行的状态，就和什么事都没发生过一下。</p>
<p>应用到取钱的例子，如果ATM在扣款未吐钞票后断电，事务在中途中断，会回滚到未扣款的状态。这样虽然也不是很愉快，因为没取到钱，但是至少没有损失什么。</p>
<p>以上是事物的基本概念。</p>
<hr>
<h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><p>关于事务，根据它的概念提取出它的四个特性。</p>
<ul>
<li>原子性（Atomicity）：事务时一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用</li>
<li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不是部分完成部分失败。在现实中数据不应该被破坏</li>
<li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li>
<li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写道持久化存储器中</li>
</ul>
<h3 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h3><p>具体到程序中，我所理解的对事务的管理，实质上就是对持久层的事务管理。一般来说，优秀的持久层框架都有自己的一套管理事务的机制。Spring也不会傻到花功夫对所有的持久层框架做事务管理的具体实现。Spring并不直接管理事务，而是提供了多种事务管理器，将事务管理的职责委托给持久层去实现。实质上就是提供事务管理的接口来给持久层框架去实现。</p>
<h4 id="Spring事务管理核心接口"><a href="#Spring事务管理核心接口" class="headerlink" title="Spring事务管理核心接口"></a>Spring事务管理核心接口</h4><p>Spring事务管理的实现由许多的细节，这里没读源码也不知道是个怎样的过程。但是如果对整体的接口框架有大体了解的话会非常有助于理解试图，Spring事务管理涉及的接口以及接口联系如下图：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springday4_1.jpg" alt=""></p>
<p>Spring事务管理的接口是org.springframework.transaction.PlatformTransactionManager，通过这个接口，Spring为各个平台如JDBK、Hibernate等都提供了对应的事务管理器，但是具体的实现由各个平台自己完成。接口的内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Public interface PlatformTransactionManager()...&#123;  </div><div class="line">    <span class="comment">// 由TransactionDefinition得到TransactionStatus对象</span></div><div class="line">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </div><div class="line">    <span class="comment">// 提交</span></div><div class="line">    Void commit(TransactionStatus status) throws TransactionException;  </div><div class="line">    <span class="comment">// 回滚</span></div><div class="line">    Void rollback(TransactionStatus status) throws TransactionException;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这不是完整的源码，只是从网上抄的部分。</p>
<p>从这里可以看到，具体的事务管理机制对Spring来说是透明的，它不关心具体实现，具体的实现是由各个平台来做的。Spring事务管理的一个优点就是为不同事务的API提供一致的编程模型。</p>
<h4 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h4><p>如果应用程序中直接使用JDBC，或者是MyBatis来进行持久化，DataSource TransactionManager会为你处理好事务边界。为了使用DataSourceTransactionManager，需要使用如下的XML将其装配到应用程序上下文中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">    &lt;property name="dataSource" ref="dataSource" /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>实际上，DataSourceTransactionManager是通过调用java.sql.Connection来管理事务，Connection通过DataSource获取得到。通过调用连接的commit()方法来提交事务，同样，事务失败则通过rollback()方法进行回滚。</p>
<h4 id="Hibernate事务"><a href="#Hibernate事务" class="headerlink" title="Hibernate事务"></a>Hibernate事务</h4><p>如果应用程序中的持久化是通过Hibernate实现的，那么则需要使用HibernateTransactionManager。对于Hibernate4，需要定义如下bean声明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</div><div class="line">    &lt;property name="sessionFactory" ref="sessionFactory" /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>sessionFactory属性需要装配一个Hibernate的session工厂，HibernateTransactionManager的实现细节是它将事务管理的职责委托给org.hibernate.Transaction对象，而后者是从Hibernate Session中获得到的。当事务成功完成时，HibernateTransactionManager将会调用Transaction对象的commit()方法，反之，将会调用rollback()方法。</p>
<p>另外，Spring还有JPA，JTA的事务管理配置。</p>
<p>将到了这里只是说明了Spring大体的几种事务配置方式，以及应对框架的配置写法。但是知道这些还是不能很好的理解事务的具体以及如何写出具有事务的代码。下面先把代码放一放，再说说在Spring中基本的事务属性定义。</p>
<h3 id="基本事务属性的定义"><a href="#基本事务属性的定义" class="headerlink" title="基本事务属性的定义"></a>基本事务属性的定义</h3><p>事务管理的接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里的参数TransactionDefinition类，这个类就定义了一些事务的基本属性。</p>
<p>说了半天，到底什么事是事务属性？事务属性可以理解为事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面，如下图:</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springday4_2.jpg" alt=""></p>
<p>而TransactionDefinition接口的内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public interface TransactionDefinition &#123;</div><div class="line">    <span class="comment">// 返回事务的传播行为</span></div><div class="line">    int getPropagationBehavior(); </div><div class="line">    <span class="comment">//返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></div><div class="line">    int getIsolationLevel();</div><div class="line">    <span class="comment">// 返回事务必须在多少秒内完成</span></div><div class="line">    int getTimeout();</div><div class="line">    <span class="comment">//事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的</span></div><div class="line">    boolean isReadOnly(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面来介绍下具体的事务属性。</p>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有的事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>
<p>Spring定义了七种传播行为：</p>
<table>
<thead>
<tr>
<th>传播行为</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PROPAGATION_REQUIRED</td>
<td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则会启动一个新的事务</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>表示该方法必须运行在事务中，如果事务不存在，则会抛出一个异常</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRED_NEW</td>
<td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>表示如果当前已经存在一个事务，那么该方法将会在嵌套的事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。另外需要注意各厂商对这种传播行为有差异。需要参考文档来确定它们是否支持嵌套事务</td>
</tr>
</tbody>
</table>
<p>下面通过代码实例来稍微详细介绍下各个传播行为的。</p>
<h5 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a>PROPAGATION_REQUIRED</h5><p>如果存在一个事务，则支持当前事务。如果没有事务则开启一个新事务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//PROPAGATION_REQUIRED</span></div><div class="line">methodA&#123;</div><div class="line">  ···</div><div class="line">  methodB();</div><div class="line">  ···</div><div class="line">&#125;</div><div class="line"></div><div class="line">methodB&#123;</div><div class="line">    ···</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Spring使用AOP来支持声明式的事务，假定已经配置好了PROPAGATION_REQUIRED来支持事务，Spring会根据这个事务属性，自动在调用方法之前决定是否开启一个事务，并在执行之后决定事务的提交或回滚。<br>单独调用methodB时：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">main&#123;</div><div class="line">    methodB();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相当于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Main&#123;</div><div class="line">    Connection con=<span class="literal">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        con = getConnection();</div><div class="line">        con.setAutoCommit(<span class="literal">false</span>);</div><div class="line">        </div><div class="line">        methodB();</div><div class="line">        </div><div class="line">        con.commit();</div><div class="line">    &#125;<span class="keyword">catch</span>(RuntimeException ex)&#123;</div><div class="line">        con.rollback();</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        closeCon();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是针对但个方法的简单事务管理，在调用methodB时，没有存在一个事务，所以spring让methodB获得一个新的连接，开启了一个新的事务。</p>
<p>而另一种情况，就是单独调用methodA方法，在methodA内会调用methodB。执行的效果相当于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">main&#123;</div><div class="line">    Connection con = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        con = getConnection();</div><div class="line">        methodA();</div><div class="line">        con.commit();</div><div class="line">    </div><div class="line">    &#125;<span class="keyword">catch</span>(RuntimeException ex)&#123;</div><div class="line">        con.rollback();</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        closeCon();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用methodA时，环境中没有事务，所以开启一个新的事务。当在methodA中调用methodB时，环境中已经有了一个事务，所以methodB就加入当前事务。</p>
<h5 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a>PROPAGATION_SUPPORTS</h5><p>表示如果存在一个事务，则支持当前的事务。如果没有事务，则以非事务执行。但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。</p>
<p>还是以1中所述methodA与methodB的关系为示例说明。如果单独调用methodB时，methodB方法是以非事务执行的。当调用methodA时，methodB则加入了methodA的事务中。</p>
<h5 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a>PROPAGATION_MANDATORY</h5><p>表示如果已经存在一个事务，则支持当前事务，如果没有一个活动的事务，则抛出异常。</p>
<p>以1中所述methodA与methodB的关系为示例说明。单独调用methodB时，因为没有当前一个活动的事务，则会抛出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(“Transaction propagation ‘mandatory’ but no existing transaction found”);</div></pre></td></tr></table></figure></p>
<p>的异常。当调用methodA时，methodB会加入到methodA的事务中。</p>
<h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h5><p>表示总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。</p>
<p>以1中methodA与methodB为示例。单独执行methodB方法会开启新事务。但调用methodA方法时。执行的事务逻辑为为如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">main()&#123;</div><div class="line">    TransactionManager tm = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="comment">//获得一个JTA事务管理器</span></div><div class="line">        tm = getTransactionManager();</div><div class="line">        tm.begin();<span class="comment">//开启一个新的事务</span></div><div class="line">        Transaction ts1 = tm.getTransaction();</div><div class="line">        tm.suspend();<span class="comment">//挂起当前事务</span></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            tm.begin();<span class="comment">//重新开启第二个事务</span></div><div class="line">            Transaction ts2 = tm.getTransaction();</div><div class="line">            methodB();</div><div class="line">            ts2.commit();<span class="comment">//提交第二个事务</span></div><div class="line">        &#125; Catch(RunTimeException ex) &#123;</div><div class="line">            ts2.rollback();<span class="comment">//回滚第二个事务</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//释放资源</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//methodB执行完后，恢复第一个事务</span></div><div class="line">        tm.resume(ts1);</div><div class="line">        ts1.commit();<span class="comment">//提交第一个事务</span></div><div class="line">    &#125; <span class="keyword">catch</span>(RunTimeException ex) &#123;</div><div class="line">        ts1.rollback();<span class="comment">//回滚第一个事务</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里称ts1为外层事务，ts2位内层事务。从上面的代码可以看出ts2与ts1是两个独立的事务，互不相干。ts2是否成功不依赖于ts1，如果methodB中抛出了异常导致回滚，不会影响methodA的执行。</p>
<h5 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a>PROPAGATION_NOT_SUPPORTED</h5><p>总是以非事务执行，并挂起任何存在的事务。代码示例就不写了，反正都是非事务</p>
<h5 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a>PROPAGATION_NEVER</h5><p>总是非事务地执行，如果存在一个事务则抛出异常</p>
<h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h5><p>如果一个活动的事务存在，则运行在一个嵌套的事务中，如果没有活动的事务，则按PROPAGATION_REQUIRED属性执行。</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>事务的第二个维度就是隔离级别（isolation level）。隔离级别定义了一个事务可能受其他并发事务影响的程度。</p>
<h5 id="并发事务引起的问题"><a href="#并发事务引起的问题" class="headerlink" title="并发事务引起的问题"></a>并发事务引起的问题</h5><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务。并发虽然是必须的，但可能导致以下问题：</p>
<ul>
<li>脏读（Dirty Reads）： 脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。</li>
<li>不可重复读（Nonrepeatable Read）：不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据。这通常是因为另一个并发事务在两次查询期间进行了更新。</li>
<li>幻读（Phantom Read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录。</li>
</ul>
<p><strong>不可重复读 与 幻读 的区别</strong>：</p>
<p>不可重复读的重点是修改，同样的条件，读取过的数据，再次读取发现值不一样了。例如：在事务1中，Wnagsusu读取了自己的工资为1000，操作并没有完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">con1 = getConnection();</div><div class="line"></div><div class="line">select salary <span class="keyword">from</span> employee empId = <span class="string">"wangsusu"</span></div></pre></td></tr></table></figure></p>
<p>而在事务2中，财务人员修改了Wangsusu的工资为2000，并提交了事务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">con2 = getConnection();</div><div class="line"></div><div class="line">updata employee set salary = <span class="number">2000</span> where empId = <span class="string">"wangsusu"</span>;</div><div class="line"></div><div class="line">con2.commit();</div></pre></td></tr></table></figure></p>
<p>在事务1中，Wangsusu再次读取自己的工资时，工资变为了2000。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//con1</span></div><div class="line">select salary <span class="keyword">from</span> employee where empId = <span class="string">"wangsusu"</span></div></pre></td></tr></table></figure></p>
<p>在一个事务中前后两次读取的结果并不一致，导致了不可重复读。</p>
<p>而幻读的重点在于增加或者删除：同样的条件，第一次与第二次读出来的记录数不一样。例如：目前工资为1000的员工有10人。事务1，读取所有工资为1000的员工。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">con1 = getConnection();</div><div class="line"></div><div class="line">select * <span class="keyword">from</span> employee where salary = <span class="number">1000</span>;</div></pre></td></tr></table></figure></p>
<p>共读取10条记录。</p>
<p>这时，另一个事务想employee表插入了一条员工记录，工资也为1000<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">con2 = getConnection();</div><div class="line"></div><div class="line">insert into employee(empId,salary) values(<span class="string">"huniu"</span>,<span class="number">1000</span>);</div><div class="line"></div><div class="line">con2.commit();</div></pre></td></tr></table></figure></p>
<p>事务1再次读取所有工资为1000的员工，就会读到11条数据，这就产生了幻读。</p>
<p>从总得结果来看，似乎不可重复读和幻读都表现为两次读取的结果不一致。但如果从控制的角度来看，两者的区别就比较大。<br>对于前者，只需要锁住满足条件的记录。<br>对于后者，要锁住满足条件及其相近的记录。</p>
<h5 id="隔离级别-1"><a href="#隔离级别-1" class="headerlink" title="隔离级别"></a>隔离级别</h5><table>
<thead>
<tr>
<th>隔离级别</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ISOLATION_DEFAULT</td>
<td>使用后端数据库默认隔离级别</td>
</tr>
<tr>
<td>ISOLATION_READ_UNCOMMITTED</td>
<td>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</td>
</tr>
<tr>
<td>ISOLATION_READ_COMMITTED</td>
<td>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</td>
</tr>
<tr>
<td>ISOLATION_REPEATABLE_READ</td>
<td>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己修改的，可以阻止脏读和不可重复读，但幻读仍有可能发生</td>
</tr>
<tr>
<td>ISOLATION_SERIALIZABLE</td>
<td>最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的</td>
</tr>
</tbody>
</table>
<h4 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h4><p>事务的第三个特性是它是否为只读事务。如果事务只对后端的数据库进行操作，数据库可以利用事务的只读特性来进行一些特定的优化。通过将事务设置为只读，你就可以给数据库一个机会，让它应用它认为合适的优化措施</p>
<h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>为了使应用程序很好地运行，事务不能运行太长时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库的资源。事务超时就是事务的一个定时器，在特定的时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束</p>
<h4 id="回滚规则"><a href="#回滚规则" class="headerlink" title="回滚规则"></a>回滚规则</h4><p>事务五边形的最后一个方面是一组规则，这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行时期异常时才会回滚，而在遇到检查型异常时不会回滚。但是你可以声明事务在遇到特定的检查型异常时像遇到运行时异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常时运行时异常。</p>
<h3 id="事务状态"><a href="#事务状态" class="headerlink" title="事务状态"></a>事务状态</h3><p>上面讲到调用PlatformTransactionManager接口的getTransaction()的方法得到的是TransactionStatus接口的一个实现，这个接口的内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface TransactionStatus&#123;</div><div class="line">    boolean isNewTransaction();<span class="comment">//是否是新的事务</span></div><div class="line">    boolean hasSavepoint();<span class="comment">//是否有恢复点</span></div><div class="line">    <span class="keyword">void</span> setRollbackOnly();<span class="comment">//设置为只回滚</span></div><div class="line">    boolean isRollbackOnly();<span class="comment">//是否为只回滚</span></div><div class="line">    boolean isCompleted();<span class="comment">//是否已完成</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以发现这个接口描述的是一些处理事务提供简单的控制事务执行和查询事务状态的方法，在回滚或提交的时候需要应用对应的事务状态。</p>
<p>感觉内容有点多，今天先到这里，Spring（五）在通过实例来演示下事务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已经有几个星期没写博客了，一方面是把全身心投入的工作（其实也没做出什么成绩），另一方面是自己太懒了。如果自己不坚持写下去的话，我怕以后都不会坚持了，我还是决定好好写写博客。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;head
    
    </summary>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架（三）</title>
    <link href="http://yoursite.com/2017/05/07/SpringMVC%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/07/SpringMVC框架（三）/</id>
    <published>2017-05-07T14:39:13.000Z</published>
    <updated>2017-05-07T14:40:14.291Z</updated>
    
    <content type="html"><![CDATA[<p>五一结束了，要上班的感觉好忧伤，但是总不能继续放假颓下去，否则人会废掉。这种状态的快速切换有点受不了，归结到最后还是心态的问题。我要做到波澜不惊。</p>
<p>早上看代码会困，所以决定今天拿上午的时间来学习，写博客。今天主要想学会SpringMVC操作文件上传与下载的功能。文件上传与下载应该还是很常见的，比如在论坛上上传自己珍藏多件的片，然后做个网盘链接传出去，但是这样容易被封。不哔哔了，下面来正题，如何使用SpringMVC提供的文件处理功能实现文件上传与下载。</p>
<hr>
<h2 id="SpringMVC处理文件上传下载"><a href="#SpringMVC处理文件上传下载" class="headerlink" title="SpringMVC处理文件上传下载"></a>SpringMVC处理文件上传下载</h2><hr>
<p>先添加jar包，关于springmvc的jar包参考<a href="http://www.wangsusu.com.cn/2017/04/26/SpringMVC%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">SpringMVC框架（一）</a>里给出的jar包示例。在其基础之上，还要添加以下两个jar包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">commons-io<span class="number">-2.5</span>.jar</div><div class="line">commons-fileupload<span class="number">-2.0</span><span class="number">.0</span>.jar</div></pre></td></tr></table></figure></p>
<p>最后添加的jar包图如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-1.png" alt=""></p>
<p>这里的tomcat的lib也是添加进来，如果不手动添加，在写servlet相关的时候工具会自动提示你下载，我是在没网的情况下，才发现其实可以通过添加tomcat的lib导入servlet相关jar的，不过你看后面那个scope是provided，参考<a href="http://www.wangsusu.com.cn/2017/04/24/Maven%E8%AF%95%E8%AF%95%E6%B0%B4/" target="_blank" rel="external">Maven试试水</a>，也就是说只在你写代码的时候可以引用，在部署项目之后就不会把jar包添加到工程里，因为tomcat里本来就有这些jar文件。</p>
<p>添加好jar，写好spring-mvc.xml配置文件与web.xml配置文件之后，就可以开始写代码了。</p>
<h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>先写前端是因为上传文件的前端页面写法是简单而固定，就拿index.jsp来写。只需要注意提交表单的enctype与method即可，先上个代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;$Title$&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div align="center"&gt;</div><div class="line">      &lt;form enctype="multipart/form-data" method="post" action="$&#123;pageContext.request.contextPath&#125;/upload.do"&gt;</div><div class="line">        &lt;input type="file" name="file"&gt;&lt;br&gt;</div><div class="line">        &lt;input type="submit" value="提交"&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这个前端代码上传文件只有一个form表单，里面有type为file的input标签，需要注意的是表单的enctype为multipart/form-data，这个是固定写法，所有框架如果要实现文件上传，前端的表单都必须写成这样，然后是上传方式必须是post。以上就是前端代码</p>
<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>先新建一个controller，取名FileController，在类名上添加Controller注解，再写一个方法，添加RequestMapping注解为upload。还是直接看代码把，看着直观，而且我懒得打字了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</div><div class="line">    @RequestMapping(<span class="string">"upload"</span>)</div><div class="line">    public <span class="built_in">String</span> upload(MultipartFile file, HttpSession httpSession) throws IOException &#123;</div><div class="line">        <span class="keyword">if</span> (file.getSize() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">String</span> dirPath = httpSession.getServletContext().getRealPath(<span class="string">"/image"</span>);</div><div class="line">            <span class="built_in">String</span> fileName = file.getOriginalFilename();</div><div class="line">            File destFile = <span class="keyword">new</span> File(dirPath, fileName);</div><div class="line">            file.transferTo(destFile);</div><div class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前端传来的名字为file的input会传入MultipartFile file里，httpSession的作用是找到工程的目录，image为在web目录下建立的文件夹。在此要说明的是intellij这个工具不会把空文件夹部署，所以我很蛋疼的添加了一个README.txt文件到自己新建的image文件夹里面···捉鸡··。</p>
<p>之后在WEB-INF/views里新建一个success.jsp，这里玩一个好玩的，让success.jsp显示成功信息之后，三秒倒计时然后跳回index.jsp。还是来上success.jsp代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    上传成功&lt;br&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;span id="time"&gt;&lt;/span&gt;秒后跳转页面</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script type="application/javascript"&gt;</div><div class="line">    var x = 3</div><div class="line">    onload = function () &#123;</div><div class="line">        document.getElementById("time").innerHTML = x;</div><div class="line">        setInterval(go, 1000);</div><div class="line">    &#125;;</div><div class="line">    function go() &#123;</div><div class="line">        x--;</div><div class="line">        if (x&gt;0) &#123;</div><div class="line">            document.getElementById("time").innerHTML = x;</div><div class="line">        &#125;else &#123;</div><div class="line">            location.href = '$&#123;pageContext.request.contextPath&#125;/index.jsp';</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>再在WEB-INF/views里写个error.jsp，关于错误页面我觉得也应该专门拿出一篇博客来讲，目前我自己也不太了解，所以就随意写一个错误页面，这里不贴代码了。</p>
<p>妥了之后部署项目在tomcat，然后运行，前端界面效果是这样：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-2.png" alt=""></p>
<p>随便选择一个文件，上传，点击提交</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-3.png" alt=""></p>
<p>得到SUCCESS的页面，同时可以看见跳转倒计时：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-4.png" alt=""></p>
<p>最后跳回了index页面，这时候去工程部署的文件夹里看看，有刚才上传的文件</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-5.png" alt=""></p>
<p>妥妥的。</p>
<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><p>前端的写法和基本的单文件的差不多，只是多文件需要参考<a href="http://www.wangsusu.com.cn/2017/04/27/SpringMVC%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">SpringMVC框架（二）</a>里的数组接收形式的前端写法。直接看代码吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div align="center"&gt;</div><div class="line">        &lt;form enctype="multipart/form-data" method="post" action="$&#123;pageContext.request.contextPath&#125;/uploadMultipartFile.do"&gt;</div><div class="line">            &lt;input type="file" name="file"&gt;&lt;br&gt;</div><div class="line">            &lt;input type="file" name="file"&gt;&lt;br&gt;</div><div class="line">            &lt;input type="file" name="file"&gt;&lt;br&gt;</div><div class="line">            &lt;input type="submit" value="提交"&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这里三个file的name必须要相同，这样后台才能以数组的形式接收文件，方便统一处理。</p>
<h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><p>后台的写法也是差不多，只是MultipartFile接收参数要是数组形式，在FileController里添加函数，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"uploadMultipartFile"</span>)</div><div class="line">public <span class="built_in">String</span> uploadMultipartFile(MultipartFile[] file, HttpSession httpSession) throws IOException &#123;</div><div class="line">    <span class="keyword">for</span> (MultipartFile item : file) &#123;</div><div class="line">        <span class="keyword">if</span> (item.getSize() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">String</span> dirPath = httpSession.getServletContext().getRealPath(<span class="string">"/image"</span>);</div><div class="line">            <span class="built_in">String</span> fileName = item.getOriginalFilename();</div><div class="line">            File destFile = <span class="keyword">new</span> File(dirPath, fileName);</div><div class="line">            item.transferTo(destFile);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是一个for循环整体处理一下就行。运行起来是这样：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-6.png" alt=""></p>
<p>点击提交，查看下image文件夹：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-7.png" alt=""></p>
<p>妥妥的。</p>
<h3 id="文件列表显示"><a href="#文件列表显示" class="headerlink" title="文件列表显示"></a>文件列表显示</h3><p>文件下载有点烦，因为要响应要设置各种http的相关参数，这些参数虽然说是很有必要，但是实在是记不住。</p>
<p>不过在下载文件之前先做一点准备工作，得有文件列表才能下载文件，所以得先写个找文件列表的后台与显示文件列表的前端。</p>
<h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><p>先来看代码，还是在之前的controller里添加一个方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"listFile.do"</span>)</div><div class="line">public ModelAndView listFile(HttpSession httpSession)&#123;</div><div class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">    <span class="built_in">String</span> dirPath = httpSession.getServletContext().getRealPath(<span class="string">"/image"</span>);</div><div class="line">    File dirFile = <span class="keyword">new</span> File(dirPath);</div><div class="line">    <span class="built_in">String</span>[] list = dirFile.list();</div><div class="line">    modelAndView.addObject(<span class="string">"list"</span>, list);</div><div class="line">    modelAndView.setViewName(<span class="string">"listFile"</span>);</div><div class="line">    <span class="keyword">return</span> modelAndView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法比较简单，只是把文件名封装到一个list里面，然后交给modelAndView返回给前台调用。</p>
<h4 id="前端-2"><a href="#前端-2" class="headerlink" title="前端"></a>前端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;table align="center" cellpadding="5" cellspacing="0" border="1"&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;编号&lt;/td&gt;</div><div class="line">            &lt;td&gt;文件名&lt;/td&gt;</div><div class="line">            &lt;td&gt;操作&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;c:forEach items="$&#123;list&#125;" var="item" varStatus="vs"&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;$&#123;vs.count&#125;&lt;/td&gt;</div><div class="line">                &lt;td&gt;$&#123;item&#125;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/download.do?fileName=$&#123;item&#125;"&gt;下载&lt;/a&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/c:forEach&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>用jstl来迭代list，取得名字，然后根据名字去创建下载链接。最后通过跳转到前端界面得到的图示如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-8.png" alt=""></p>
<p>这个时候点下载链接会出错，因为下载文件的后台还没写</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>这里的下载就只有后台了，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"download.do"</span>)</div><div class="line">public ResponseEntity&lt;byte[]&gt; download(<span class="built_in">String</span> fileName, HttpSession httpSession) throws IOException &#123;</div><div class="line">    <span class="built_in">String</span> dirPath = httpSession.getServletContext().getRealPath(<span class="string">"/image"</span>);</div><div class="line">    <span class="comment">//fileName = URLEncoder.encode(fileName,"UTF-8");</span></div><div class="line">    File imageFile = <span class="keyword">new</span> File(dirPath, fileName);</div><div class="line">    HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</div><div class="line">    fileName = URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>);</div><div class="line">    httpHeaders.setContentDispositionFormData(<span class="string">"attachment"</span>, fileName);</div><div class="line">    httpHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(imageFile), httpHeaders, HttpStatus.CREATED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先是返回值，ResponseEntity暂时先记住吧，据说可以做json，xml的数据返回，还可以做文件下载，我没搞懂具体是什么意思，反正返回下载文件就靠他了，所以我觉得下载的后台麻烦。还有最后那一句话，也不懂啥意思，暂时记住吧。</p>
<p>另外还有HttpHeaders，http的头，设置文件名，还有设置类型为二进制。要注意文件名如果是中文会出现乱码，需要用URLEncoder来编码文件名。</p>
<p>最后运行，点击下载，可以得到</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day3-9.png" alt=""></p>
<p>以上就是SpringMVC处理文件上传下载。</p>
<h3 id="代码：https-github-com-kentwood-springMVCDay3"><a href="#代码：https-github-com-kentwood-springMVCDay3" class="headerlink" title="代码：https://github.com/kentwood/springMVCDay3"></a><a href="https://github.com/kentwood/springMVCDay3" target="_blank" rel="external">代码：https://github.com/kentwood/springMVCDay3</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;五一结束了，要上班的感觉好忧伤，但是总不能继续放假颓下去，否则人会废掉。这种状态的快速切换有点受不了，归结到最后还是心态的问题。我要做到波澜不惊。&lt;/p&gt;
&lt;p&gt;早上看代码会困，所以决定今天拿上午的时间来学习，写博客。今天主要想学会SpringMVC操作文件上传与下载的功能
    
    </summary>
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Restful_API设计指南</title>
    <link href="http://yoursite.com/2017/05/07/Restful_API%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/05/07/Restful_API设计指南/</id>
    <published>2017-05-07T14:20:17.000Z</published>
    <updated>2017-05-07T14:45:39.117Z</updated>
    
    <content type="html"><![CDATA[<p>第一次收到的一个项目的文档里就有这个Restful API一开始还以为是某个牛逼的公司自己弄了一套api链接给我们去调用，想着去找找文档的。后来在网上一查，发现这东西越发的牛逼了，然后看了半天实在看不懂。我看的是百度百科，不得不说百度百科可能确实是太专业，我看程序方面的术语真是一条都没看懂过，每次发现一个新玩意，点开百度百科，看半天没看懂，再去找别人写的博客，然后看一个例子，懂了点，再自己按照例子去实现一遍，懂了，最后可能再回过头去看百度百科，又特码不懂了，然后关闭百度百科，就这样吧。</p>
<hr>
<h2 id="Restful-API设计指南"><a href="#Restful-API设计指南" class="headerlink" title="Restful API设计指南"></a>Restful API设计指南</h2><hr>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.importnew.com/17701.html" target="_blank" rel="external">Restful API设计指南:http://www.importnew.com/17701.html</a></li>
</ul>
<hr>
<p>参考文档里的那篇文章讲的比较详细，我这篇文章基本上就是从那上面抄过来的，主要是想自己敲一遍，加深记忆，同时备忘。</p>
<h2 id="Restful-API简介"><a href="#Restful-API简介" class="headerlink" title="Restful API简介"></a>Restful API简介</h2><p>首先说一说为什么要有Restful API，以及Restful API的核心思想。</p>
<p>现在的网络应用程序分为前端与后台两个部分。而前端设备非常的杂乱，手机、平板、桌面电脑等。为此，为了省事与统一，使用一个后台应用于不同的设备，API架构的理论就开始流行起来，甚至出现了“API First”的设计思想。Restful API是目前比较成熟的一套互联网应用程序的API设计理论。关于Restful的好处，这里列出逼乎的某个用户的理论：</p>
<ul>
<li>透明性，暴露资源的存在</li>
<li>充分利用HTTP协议本身语义</li>
<li>无状态，这点非常重要。在调用一个接口（访问、操作资源）的时候可以不用考虑上下文，不用考虑当前状态，极大降级复杂度</li>
<li>HTTP本身提供了丰富的内容协商手段，无论是缓存，还是资源修改的乐观并发控制，都可以以业务无关的中间件来实现</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>相信看了上面的存在一定和我当初看完百度百科一样莫名其妙。所以说Restful到底是什么鬼，Restful是一套API的风格，风格的意思呢，就是用起来逼格更高，不用也没事的意思，一般人都会选逼格高的吧，干不花钱就能装逼的事，多好。下面就来康康：</p>
<h3 id="一、协议"><a href="#一、协议" class="headerlink" title="一、协议"></a>一、协议</h3><p>为了安全起见，使用API与用户的通信协议总是用HTTPs协议</p>
<h3 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h3><p>应该尽量将API部署再专用域名之下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//api.example.com</span></div></pre></td></tr></table></figure></p>
<p>如果确定API很简单，不会有进一步的扩展，可以考虑放在主域名下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//example.org/api/</span></div></pre></td></tr></table></figure></p>
<p>其实我没太看懂这个东西，但是还是记下来，万一今后用得着。</p>
<h3 id="三、版本"><a href="#三、版本" class="headerlink" title="三、版本"></a>三、版本</h3><p>尽量将API的版本放入URL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//api.example.com/v1/</span></div></pre></td></tr></table></figure></p>
<p>另一种做法是将版本号放入HTTP头信息中，但不如放入URL直观。Github就是采用这种将版本放入URL中的做法</p>
<h3 id="四、路径"><a href="#四、路径" class="headerlink" title="四、路径"></a>四、路径</h3><p>路劲又称“终点”（endpoint），表示API的具体网址。<br>在Restful架构中，每一个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的“集合”（collection），所以API中的名词也应该使用复数。</p>
<p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//api.example.com/v1/zoos</span></div><div class="line"> </div><div class="line">https:<span class="comment">//api.example.com/v1/animals</span></div><div class="line"></div><div class="line">https:<span class="comment">//api.example.com/v1/employees</span></div></pre></td></tr></table></figure></p>
<h3 id="五、HTTP动词"><a href="#五、HTTP动词" class="headerlink" title="五、HTTP动词"></a>五、HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个，括号里对应的是SQL命令类型</p>
<ul>
<li>GET(Select)：从服务器取出资源（一项或多项）</li>
<li>POST(Create)：在服务器新建一个资源</li>
<li>PUT(Update)：在服务器更新资源（客户端提供改变后的完整资源）</li>
<li>PATCH(Update)：在服务器更新资源（客户提供改变的属性）</li>
<li>DELETE(Delete)：从服务器删除资源</li>
</ul>
<p>还有两个不常用的HTTP动词</p>
<ul>
<li>HEAD：获取资源的元数据</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</li>
</ul>
<p>这两个动词没太懂，原文也没有给出这两个动词的例子</p>
<ul>
<li>GET/zoos：列出所有动物园</li>
<li>POST/zoos：新建一个动物园</li>
<li>GET/zoos/ID：获取某个指定动物园的信息</li>
<li>PUT/zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH/zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE/zoos/ID：删除某个动物园</li>
<li>GET/zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE/zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
<h3 id="六、过滤信息"><a href="#六、过滤信息" class="headerlink" title="六、过滤信息"></a>六、过滤信息</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p>
<p>以下是一些常见的参数：</p>
<ul>
<li>?limit=10：指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置</li>
<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性，以及排序的顺序</li>
<li>?animal_type_id=1：指定筛选条件</li>
</ul>
<p>参数的设计允许存在冗余，即允许API路劲和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的</p>
<h3 id="七、状态码"><a href="#七、状态码" class="headerlink" title="七、状态码"></a>七、状态码</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是等幂的（不懂）</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功</li>
<li>202 ACCEPTED - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出请求有错误，服务器没有进行新建或修改数据的操作，该操作是等幂的</li>
<li>401 UNAUTHORIZED - [*]：表示用户没有权限（令牌，用户名，密码错误）</li>
<li>403 FORBIDDEN - [*]：表示用户的到授权（与401相对应），但是访问时被禁止的</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是等幂的</li>
<li>406 NOT ACCEPTABLE - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）</li>
<li>410 GONE - [GET]：用户请求的资源被永久删除，且不会再得到</li>
<li>422 UNPROCESABLE ENTITY - [POST/PUT/PATCH]：当创建一个对象时，发生一个验证错误</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功</li>
</ul>
<h3 id="八、错误处理"><a href="#八、错误处理" class="headerlink" title="八、错误处理"></a>八、错误处理</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">error</span>: <span class="string">"Invalid API key"</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="九、返回结果"><a href="#九、返回结果" class="headerlink" title="九、返回结果"></a>九、返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<ul>
<li>GET /collection：返回资源对象的列表（数组）</li>
<li>GET /collection/resource：返回单个资源对象</li>
<li>POST /collection：返回新生成的资源对象</li>
<li>PUT /collection/resource：返回完整的资源对象</li>
<li>PATCH /collection/resource：返回完整的资源对象</li>
<li>DELETE /collection/resource：返回一个空文档</li>
</ul>
<h3 id="十、Hypermedia-API"><a href="#十、Hypermedia-API" class="headerlink" title="十、Hypermedia API"></a>十、Hypermedia API</h3><p>这个暂时有些看不懂，因为也没见过具体的实例，这里就先把原文贴出来吧</p>
<p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"link"</span>: &#123; <span class="string">"rel"</span>: <span class="string">"collection https://www.example.com/zoos"</span>, <span class="string">"href"</span>: <span class="string">"https://api.example.com/zoos"</span>, <span class="string">"title"</span>: <span class="string">"List of zoos"</span>, <span class="string">"type"</span>: <span class="string">"application/vnd.yourformat+json"</span> &#125;&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>, <span class="string">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>, <span class="comment">// ... &#125;</span></div></pre></td></tr></table></figure>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"message"</span>: <span class="string">"Requires authentication"</span>, <span class="string">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span> &#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h3 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a>十一、其他</h3><ul>
<li><p>API的身份认证应该使用OAuth 2.0框架。</p>
</li>
<li><p>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>
</li>
</ul>
<p>关于OAuth这个东西今后肯定是要学到的，到时候估计会弄一篇实例，也会搭上Restful</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次收到的一个项目的文档里就有这个Restful API一开始还以为是某个牛逼的公司自己弄了一套api链接给我们去调用，想着去找找文档的。后来在网上一查，发现这东西越发的牛逼了，然后看了半天实在看不懂。我看的是百度百科，不得不说百度百科可能确实是太专业，我看程序方面的术语
    
    </summary>
    
      <category term="RestfulAPI" scheme="http://yoursite.com/categories/RestfulAPI/"/>
    
    
      <category term="Restful" scheme="http://yoursite.com/tags/Restful/"/>
    
      <category term="互联网API理论" scheme="http://yoursite.com/tags/%E4%BA%92%E8%81%94%E7%BD%91API%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Nginx试试水（一）</title>
    <link href="http://yoursite.com/2017/05/07/Nginx%E8%AF%95%E8%AF%95%E6%B0%B4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/07/Nginx试试水（一）/</id>
    <published>2017-05-07T14:14:55.000Z</published>
    <updated>2017-05-07T14:17:36.202Z</updated>
    
    <content type="html"><![CDATA[<p>感觉摸了一天的鱼，虽然说自己学到了新技术新玩意，但是没有为公司做出实质上的贡献还是有点虚，带薪蹲坑的感觉就像犯错了一样。不管了，继续摸个鱼，写个博客，学习一个。</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://nginx.org/" target="_blank" rel="external">Nginx官网：http://nginx.org/</a></li>
</ul>
<hr>
<h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>这个东西很久以前就听过，网上也能找到关于它一大堆的介绍，这里就摘抄一段百度百科的（不是我不会翻墙，因为这篇博客是在公司里上班摸鱼写的，公司的电脑不准翻我也没办法）：</p>
<p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由Igor Sysoev为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>我用到它也是因为项目需要才用到的，就使用来说其实是一个很简单的配置，但是自己到现在才接触到实在是有些晚了。前段时间和安斯基聊天，知道Nginx本质就是一个HTTP服务器，和tomcat，apache什么的差不多，但是是一个轻量级的，为什么轻量级的，据说他只能部署一些静态网页。</p>
<p>Nginx的主要作用当然不是用来部署网页资源给用户访问，Nginx最大的用途就是反向代理与负载均衡，我一开始觉得Nginx高不可攀的原因很有可能是因为没有理解反向代理的概念。这里要给虫族选手解释一下。</p>
<h3 id="代理与反向代理"><a href="#代理与反向代理" class="headerlink" title="代理与反向代理"></a>代理与反向代理</h3><p>和安斯基聊天也说到了这个问题，感觉自己表述一遍自己的观点会让你对概念的理解更为透彻。代理分两种，正向代理与反向代理。</p>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>一般情况下，代理技术如果没有特别说明都是正向代理。先看下图，图片来源是某视频教程的笔记</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_1.png" alt=""></p>
<p>根据此图，正向代理的概念如下：</p>
<p>正向代理(forward)是一个位于客户端[用户A]和原始服务器(origin server)[服务器B]之间的服务器[代理服务器]，为了从原始服务器取得内容，用户A向代理服务器Z发送一个请求并指定目标服务器(服务器B)，然后代理服务器Z向服务器B转交请求并将获得的内容返回给客户端[用户A]。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>简单的来说，正向代理就是 代理服务器代替客户端去访问目标服务器的中间层。</p>
<p>使用正向代理服务器有很多原因，</p>
<ul>
<li>第一个是访问本无法访问的服务器，比如大家熟知的科学上网；</li>
<li>第二个是提速，因为自己这边带宽不够，而代理服务器和目标服务器之间的带宽够大，可以实现代理加快网速，这个貌似前些年有用到，现在用的不多了；</li>
<li>第三个就是缓存，这个正反向代理都会用到，如果代理服务器上已经缓存了上一次访问的数据，那么这次访问就不用跑去目标服务器下载了，也能减少目标服务器的复杂；</li>
<li>第四个是客户访问授权，这个公司里会用到，比如我现在上网其实就是通过代理上的。我不能上购物网站也不能上视频网站，因为如果我访问这些网站，我会先访问公司的代理服务器，代理服务器一看是它名单上的购物网站就直接拒绝了我的请求。能达到限制员工上网与实现保密的功能</li>
<li>第五个就是隐藏访问者的行踪，‘肉鸡’是黑客常用的技术，肉鸡的概念就是黑客通过攻击某台电脑，然后让这台电脑在不知情的情况下被黑客利用，然后黑客会利用这台电脑去攻击目标服务器（攻击的过程也可理解为访问的过程），这样服务器只知道是肉鸡攻击的它而不知道黑客的本体机器在哪。肉鸡电脑就是为黑客本体电脑实现了代理功能。</li>
</ul>
<h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>网上说反向代理的概念与正向代理的概念相反，我就是被这句话误导了很久。其实我觉得说反向代理的概念和正向代理的概念相近，或者是基本一致才恰当，只是反向代理与正向代理的主客体反了。还是先来看某视频教程上的反向代理示意图：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_2.png" alt=""></p>
<p>反向代理和正向代理的主客体想相反，对于客户端而言，代理服务器就像是原始服务器，客户端不需要进行任何特别的设置。客户端向客户端以为的目标服务器（其实是反向代理服务器）发送普通请求，反向代理服务器将判断向何处（原始服务器）转交请求，并将获得的内容返回给客户端。</p>
<p>在图中，用户A始终认为他访问的是服务器B而不是代理服务器Z，但实际上是反向代理服务器Z接收了A的请求，并从服务器B中取得用户A需要的资源然后发送给用户A。</p>
<p>在概念上来说，代理与反向代理都是接收用户请求，然后转发一道，但是对哪一方透明就不一样了。</p>
<p>反向代理也可用于如下场景：</p>
<ul>
<li>第一是负载均衡，这也是接下来要说的Nginx的主要功能，反向代理服务器接收用户请求，把请求分摊给不同服务器已减轻单个服务器的复杂</li>
<li>第二个是保护隐藏原始资源服务器，如上图中所示，在原始资源服务器里加入防火墙，只允许反向代理服务器访问其资源，这样如果想攻击原始服务器就无从下手</li>
</ul>
<h3 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h3><h4 id="一台机器运行两个tomcat"><a href="#一台机器运行两个tomcat" class="headerlink" title="一台机器运行两个tomcat"></a>一台机器运行两个tomcat</h4><p>这里以Nginx均衡两个tomcat服务器为示例。首先说一个个人认为没有什么卵用的技术，本机运行两个tomcat，因为要负载均衡，而公司的电脑太慢，用虚拟机卡的爆炸，所以我就在网上搜了搜如何运行两个tomcat。首先把你下好的tomcat复制一份：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_3.png" alt=""></p>
<p>然后需要在startup.bat修改一些东西，这是windows下的配置，如果是linux下要修改startup.sh，修改方法不一样，我没研究过，网上应该有，反正是没什么乱用的技术也懒得找了。时候再tomcat的startup.bat头部加入以下两行代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET JAVA_HOME=C:\Program Files\Java\jdk1<span class="number">.8</span><span class="number">.0</span>_60</div><div class="line">SET CATALINA_HOME=D:\software\apache-tomcat<span class="number">-8.0</span><span class="number">.33</span></div></pre></td></tr></table></figure></p>
<p>JAVA_HOME配置成jdk目录，CATALINA_HOME配置成对应的tomcat的目录。</p>
<p>同理，tomdog的starup.bat头部也加入以下两行代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET JAVA_HOME=C:\Program Files\Java\jdk1<span class="number">.8</span><span class="number">.0</span>_60</div><div class="line">SET CATALINA_HOME=D:\software\apache-tomdog<span class="number">-8.0</span><span class="number">.33</span></div></pre></td></tr></table></figure></p>
<p>貌似JAVA_HOME那一行不要也可以。。懒得测试了，反正网上是这么配的，我运行也是可行的。</p>
<p>然后需要更改端口，两边的SHUTDOWN端口与访问端口，该成两个不一样就好，避免端口占用。在tomdog的的server.xml文件里，改变如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Server port=<span class="string">"8055"</span> shutdown=<span class="string">"SHUTDOWN"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">//....</span></div><div class="line"></div><div class="line">&lt;Connector port=<span class="string">"8082"</span> protocol=<span class="string">"HTTP/1.1"</span></div><div class="line">           connectionTimeout=<span class="string">"20000"</span></div><div class="line">           redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>另一个tomcat我把访问端口该成了8081，原本是8080，另外在两边我部署了名字相同的war当时里面的内容不同，以便到时候复杂均衡测试。配置好之后分别启动tomcat和tomdog，分别访问以下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:8081/HelloServlet1</span></div><div class="line"></div><div class="line">http:<span class="comment">//localhost:8082/HelloServlet1</span></div></pre></td></tr></table></figure></p>
<p>可以得到以下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_4.png" alt=""></p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_5.png" alt=""></p>
<p>就当是两台服务器都能输入分别的地址访问成功吧，准备工作都做好了，下面来试试Nginx。如果有服务器或者虚拟机能行的情况下可以忽略这个没什么卵用的技术介绍。</p>
<h4 id="Nginx下载与启动"><a href="#Nginx下载与启动" class="headerlink" title="Nginx下载与启动"></a>Nginx下载与启动</h4><p>首先是下载，这里也是因为条件问题只能在windows下搞。先去<a href="http://nginx.org/" target="_blank" rel="external">Nginx官网</a>下一个，这里下了nginx-1.12.0的windows版，貌似其他版本的配置是一样的。下好了之后解压，解压之后nginx的目录是这样：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_6.png" alt=""></p>
<p>打开黑框框，cd到nginx-1.12.0目录下，输入以下命令可以启动nginx：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start nginx</div></pre></td></tr></table></figure></p>
<p>启动之后在浏览器里输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:80/</span></div></pre></td></tr></table></figure></p>
<p>可以得到以下</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_7.png" alt=""></p>
<p>以上Nginx也能启动成功了。关闭Nginx的话我用网上给的命令没效果，后来是直接找到进程干死的。可能是我电脑的问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s stop</div></pre></td></tr></table></figure></p>
<h4 id="Nginx配置负载均衡"><a href="#Nginx配置负载均衡" class="headerlink" title="Nginx配置负载均衡"></a>Nginx配置负载均衡</h4><p>Nginx的负载均衡配置也是比较简单，打开conf目录下的nginx.conf<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line"></div><div class="line">    keepalive_timeout  65;</div><div class="line">	</div><div class="line">	upstream backend &#123;</div><div class="line"></div><div class="line">		 #ip_hash;</div><div class="line">		 </div><div class="line">		 server 127.0.0.1:8081;</div><div class="line">		 server 127.0.0.1:8082;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">			        </div><div class="line">			#设置主机头和客户端真实地址，以便服务器获取客户端真实IP</div><div class="line">			proxy_set_header Host $host;</div><div class="line">			proxy_set_header X-Real-IP $remote_addr;</div><div class="line">			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">			</div><div class="line">			#反向代理的地址</div><div class="line">			proxy_pass http://backend;     </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我改完之后已经忘了原来的长什么样了，反正删了很多注释。关于负载均很的配置重点是那个upstream backend。upstream是关键字，backend是自己起的名字。里面的server就是反向代理的服务器地址与端口，之后还可以配置权重。之后的proxy开头的三条命令，是配置nginx反向代理的地址，就是建立起与upstream的联系的，proxy_pass后面的那个<a href="http://backend貌似是固定的写法，backend要和后面的匹配。关于全部的配置，我目前也不想全部摸太清楚，有需要再去学习，目前已经能实现简单的负载均衡就可以了。" target="_blank" rel="external">http://backend貌似是固定的写法，backend要和后面的匹配。关于全部的配置，我目前也不想全部摸太清楚，有需要再去学习，目前已经能实现简单的负载均衡就可以了。</a></p>
<p>配置好之后下一步用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure></p>
<p>重新加载配置文件，这个时候要保持上面两台tomcat都启动了而且都能访问到两台服务器的资源，下面在浏览器里输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:80/HelloServlet1/</span></div></pre></td></tr></table></figure></p>
<p>可以得到：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_8.png" alt=""></p>
<p>刷新一下，或者多刷几下，可以得到</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/nginx_day1_9.png" alt=""></p>
<p>简直和摇骰子一样，停不下来。到此为止负载均衡是配置成功了。</p>
<p>简单的负载均衡配置就到这里，以后如果有需要遇到更复杂的配置，那个时候再写一写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉摸了一天的鱼，虽然说自己学到了新技术新玩意，但是没有为公司做出实质上的贡献还是有点虚，带薪蹲坑的感觉就像犯错了一样。不管了，继续摸个鱼，写个博客，学习一个。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="复杂均衡" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="代理服务器" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>EasyUI试试水（二）</title>
    <link href="http://yoursite.com/2017/04/27/EasyUI%E8%AF%95%E8%AF%95%E6%B0%B4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/27/EasyUI试试水（二）/</id>
    <published>2017-04-27T14:21:11.000Z</published>
    <updated>2017-04-27T14:29:30.560Z</updated>
    
    <content type="html"><![CDATA[<p>看别人写的代码好捉鸡，其实我还是能看懂的，但是实在是不想看，关键的问题是不知道看了之后能干啥。光是学习看代码，漫无目的，看了之后就忘了。虽然说熟悉业务也很重要，但是我还是更喜欢有目的的去做事，任务驱动应该学的很快些。摸个鱼，写个博客，学习一个！</p>
<hr>
<h2 id="EasyUI试试水（二）"><a href="#EasyUI试试水（二）" class="headerlink" title="EasyUI试试水（二）"></a>EasyUI试试水（二）</h2><hr>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://www.jeasyui.net/" target="_blank" rel="external">EasyUI中文网：http://www.jeasyui.net/</a></li>
</ul>
<hr>
<p>接着上一篇<a href="http://www.wangsusu.com.cn/2017/04/06/EasyUI%E8%AF%95%E8%AF%95%E6%B0%B4/" target="_blank" rel="external">EasyUI试试水（一）</a>来。这一篇研究下刚学的EasyUI的一个常用的东西datagrid，一般用来与数据库交互动态生成表格。</p>
<p>关于datagrid的具体操作，这篇文章也只给个入门范例，参数略多，查文档更靠谱。</p>
<hr>
<p>本博客用工程一步一步走的形式讲解，这里也用用新学的Maven与SpringMVC里的知识来写后台处理，关于SpringMVC在后续的文章中会慢慢补完。</p>
<p>首先用Intellij新建一个Maven的web工程，先写jar包管理文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.jsut4fun&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;EasyUIDay2&lt;/artifactId&gt;</div><div class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;name&gt;EasyUIDay2 Maven Webapp&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;properties&gt;</div><div class="line">    &lt;spring.version&gt;4.3.5.RELEASE&lt;/spring.version&gt;</div><div class="line">    &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</div><div class="line">  &lt;/properties&gt;</div><div class="line">  </div><div class="line">  &lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">      &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;javax&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;7.0&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    </div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;log4j&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;log4j&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;1.9.13&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;2.8.0&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class="line">      &lt;version&gt;2.8.0&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line">  &lt;build&gt;</div><div class="line">    &lt;finalName&gt;EasyUIDay2&lt;/finalName&gt;</div><div class="line">  &lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>添加springmvc，log4j，还有json处理工具jackson的jar包。完了之后工具会帮你自动下载与加载jar包，不用管，爽歪歪。</p>
<p>参考<a href="http://www.wangsusu.com.cn/2017/04/24/Maven%E8%AF%95%E8%AF%95%E6%B0%B4/" target="_blank" rel="external">Maven试试水</a>那篇文章，要在main目录下建一个java目录，然后把java目录配置成Source Folder。这样项目基本上就可以构建成了。</p>
<p>首先还是做好准备工作，写一个com.just4fun.entity.User类，User类的属性将要作为页面datagrid的格子里的数据来显示。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line">    private int age;</div><div class="line">    private <span class="built_in">String</span> sex;</div><div class="line">    private <span class="built_in">String</span> address;</div><div class="line"></div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后要配置SpringMVC的环境，在resource目录下新建一个spring-mvc.xml文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc</div><div class="line">		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context</div><div class="line">		http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/aop</div><div class="line">		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx</div><div class="line">		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;context:component-scan base-package="com.just4fun"&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt;</div><div class="line">        &lt;property name="messageConverters"&gt;</div><div class="line">            &lt;bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"&gt;&lt;/bean&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;</div><div class="line">        &lt;property name="prefix" value="/WEB-INF/views/"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>要说明一点，在RequestMappingHandlerAdapter下配置了一个json类型转换器，用来把spring的返回视图转换问json数据的，这个知识点在springmvc框架的后续章节会说。这里就先用着。之后是web.xml配置文件，这个没啥好说的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"</div><div class="line">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         version="3.1"&gt;</div><div class="line">    &lt;filter&gt;</div><div class="line">        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;</div><div class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">    &lt;filter-mapping&gt;</div><div class="line">        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;</div><div class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/filter-mapping&gt;</div><div class="line">    </div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>下面先写controller，这里只是为了示范datagrid的基本用法，所以不接受参数，只是把后台的数据发送给前端，前端拿着显示。流程是这样，前端发送一个请求给后台，后台收到之后就传数据给前台，前台拿到之后就用这些数据绘制表格。现在先写后台也没事，因为反正发的请求没有数据，只是一个标识。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    @RequestMapping(<span class="string">"userList"</span>)</div><div class="line">    public @ResponseBody List&lt;User&gt; requestPo()&#123;</div><div class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</div><div class="line">        <span class="keyword">for</span> (int i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) &#123;</div><div class="line">            User user = <span class="keyword">new</span> User();</div><div class="line">            user.setId(i);</div><div class="line">            user.setAge(<span class="number">10</span>);</div><div class="line">            user.setSex(<span class="string">"男"</span>);</div><div class="line">            user.setName(<span class="string">"虫合"</span>);</div><div class="line">            user.setAddress(<span class="string">"天安门"</span>);</div><div class="line">            userList.add(user);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> userList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的交互是基于ajax的。新知识点是@ResponseBody，该注解根据后台配置的json转换器，将userList的数据转换为json传给前台。list转换为json数据应该也能好理解，一个json数组就可以。</p>
<p>下面是重点，前端界面与脚本，就是datagrid的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;$Title$&lt;/title&gt;</div><div class="line">    &lt;link rel="stylesheet" href="$&#123;pageContext.request.contextPath&#125;/css/easyui/themes/icon.css"&gt;</div><div class="line">    &lt;link rel="stylesheet" href="$&#123;pageContext.request.contextPath&#125;/css/easyui/themes/default/easyui.css"&gt;</div><div class="line">    &lt;script type="application/javascript" src="$&#123;pageContext.request.contextPath&#125;/js/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script type="application/javascript" src="$&#123;pageContext.request.contextPath&#125;/js/jquery.easyui.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h2&gt;一个DataGrid&lt;/h2&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;table id="myDataGrid"&gt;&lt;/table&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    $(function () &#123;</div><div class="line">        $("#myDataGrid").datagrid(&#123;</div><div class="line">            columns: [[</div><div class="line">                &#123;</div><div class="line">                    field: 'id', title: '编号', width: 100, align: 'left', formatter: function (value, row, index) &#123;</div><div class="line">                    if (row.id) &#123;</div><div class="line">                        return row.id;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    field: 'name', title: '姓名', width: 100, align: 'center', formatter: function (value, row, index) &#123;</div><div class="line">                    if (row.name) &#123;</div><div class="line">                        return row.name;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    field: 'age', title: '年龄', width: 100, align: 'center', formatter: function (value, row, index) &#123;</div><div class="line">                    if (row.age) &#123;</div><div class="line">                        return row.age;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    field: 'sex', title: '性别', width: 100, align: 'center', formatter: function (value, row, index) &#123;</div><div class="line">                    if (row.sex) &#123;</div><div class="line">                        return row.sex;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    field: 'address', title: '地址', width: 100, align: 'center', formatter: function (value, row, index) &#123;</div><div class="line">                    if (row.address) &#123;</div><div class="line">                        return row.address;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                &#125;,</div><div class="line">            ]],</div><div class="line">            fitColumns:true,</div><div class="line">            url: 'userList.do',</div><div class="line">            idField: "id"</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>代码就是这样了，简单说一下。在body标签里只有一个table标签，里面什么东西也没有，里面的内容都是script脚本创建的。脚本的写法从整体结构来看也是比较简单，这些东西也是要简单点才好，不然谁用呢，就是一个datagrid函数就完事，关键是函数里的参数：</p>
<ul>
<li>columns用于配置格子里的数据，里面的东西很多，field和json数据的key对应，title是列名，width宽度，align用户对齐，formatter函数用于生成数据，关于formatter函数的参数row代表的是那一行的json数据，返回row.address就是显示的数据中address的值。</li>
<li>fitColumns是让表格自动匹配宽度，填满。</li>
<li>url是发送ajax请求的url，发送这个请求之后然后得到返回数据用于填充表格row。</li>
<li>idField是标识字段，有时候要实现点击checkbox会把id一栏选中。</li>
</ul>
<p>还有很多属性，建议到网上查查用法，太多了也不想全部记下来。然后在tomcat上运行。可以得到：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/easyui-day-2-1.png" alt=""></p>
<h2 id="代码：https-github-com-kentwood-EasyUIDay2"><a href="#代码：https-github-com-kentwood-EasyUIDay2" class="headerlink" title="代码：https://github.com/kentwood/EasyUIDay2"></a><a href="https://github.com/kentwood/EasyUIDay2" target="_blank" rel="external">代码：https://github.com/kentwood/EasyUIDay2</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看别人写的代码好捉鸡，其实我还是能看懂的，但是实在是不想看，关键的问题是不知道看了之后能干啥。光是学习看代码，漫无目的，看了之后就忘了。虽然说熟悉业务也很重要，但是我还是更喜欢有目的的去做事，任务驱动应该学的很快些。摸个鱼，写个博客，学习一个！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 i
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="EasyUI" scheme="http://yoursite.com/tags/EasyUI/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架（二）</title>
    <link href="http://yoursite.com/2017/04/27/SpringMVC%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/27/SpringMVC框架（二）/</id>
    <published>2017-04-27T14:12:48.000Z</published>
    <updated>2017-04-27T14:29:32.038Z</updated>
    
    <content type="html"><![CDATA[<p>有点惭愧，都不知道是咋了，明明什么活都没干的感觉，居然被说已经挑大梁了。着实让我有些捉鸡。没法了，只能硬着头皮上了，搞不好也无所谓了。人力资源奖励了一张欢乐谷门票，说是对优秀实习生的奖励，这样下次去欢乐谷就能省一张门票钱了。</p>
<hr>
<h2 id="SpringMVC框架（二）"><a href="#SpringMVC框架（二）" class="headerlink" title="SpringMVC框架（二）"></a>SpringMVC框架（二）</h2><p>–</p>
<h3 id="SpringMVC注解开发"><a href="#SpringMVC注解开发" class="headerlink" title="SpringMVC注解开发"></a>SpringMVC注解开发</h3><p>注解开发应该是工程中最常用的一种开发方式了，在spring-mvc.xml文件中配置好基于注解的处理器映射器与适配器，然后只用创建普通的java类，并且在其之上添加注解就可以实现controller。这里也不涉及具体的原理，因为我也没看源码，主要说一说操作的流程。用多了自然就会思考其内部的原理吧，到时候再看源码。</p>
<p>首先还是引入jar包，jar包如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-1.png" alt=""></p>
<p>先配置web.xml，这里增加一个新知识点，关于spring处理中文乱码问题的，spring中有一个CharacterEncodingFilter可以通过过滤器的方式解决post请求中文乱码问题。</p>
<p>另外，通过在tomcat的配置文件里更改参数配置能解决get请求方式中文乱码问题。关于在tomcat的配置文件修改，打开$tomcat_home$\conf\server.xml，更改端口配置的那一段代码为如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8081"</span> protocol=<span class="string">"HTTP/1.1"</span></div><div class="line">               connectionTimeout=<span class="string">"20000"</span></div><div class="line">               redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>重点是那个URIEncoding=”UTF-8”。</p>
<p>再回到web.xml配置，文件如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"</div><div class="line">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         version="3.1"&gt;</div><div class="line">    &lt;filter&gt;</div><div class="line">        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;</div><div class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">    &lt;filter-mapping&gt;</div><div class="line">        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;</div><div class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/filter-mapping&gt;</div><div class="line">    </div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>CharacterEncodingFilter需要配置参数encoding为UTF-8，剩下的springMVC配置DispatcherServlet和之前的程序一样。</p>
<p>下一步编写spring-mvc.xml，在src目录下，生成web项目的时候会自动拷贝到classes目录下，所以写classpath:spring-mvc.xml。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans</div><div class="line">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc</div><div class="line">		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context</div><div class="line">		http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/aop</div><div class="line">		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx</div><div class="line">		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;context:component-scan base-package="com.just4fun"&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;</div><div class="line">        &lt;property name="prefix" value="/WEB-INF/views/"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>这个context:component-scan在spring里也有说到，就是扫描注解的起始包。之后的两个bean是上一篇博客简要介绍过的处理器映射器与处理器适配器，从两者的命名就可以得到他们的功能就是基于注解的controller的，这里不深究他们的原理，就知道配置这两个东西就能使用基于注解的controller就行了。</p>
<p>下一步写controller：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping(<span class="string">"springmvc"</span>)</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAnnoController</span> </span>&#123;</div><div class="line">    @RequestMapping(<span class="string">"hello"</span>)</div><div class="line">    public <span class="built_in">String</span> hello() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了注解，就是一个普通类与普通函数，非常简单。@Controller指定这个类是一个controller，springmvc扫描到这个controller就会把他加入容器，让其能被处理器映射器与适配器建立联系，@RequestMapping用于配置访问路径与controller联系，在类上的是根路径，在方法上的是自定义路径。启动之后在浏览器中访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:8081/springMVCDay2/springmvc/hello.do</span></div></pre></td></tr></table></figure></p>
<p>可以得到结果。</p>
<p>最后完了还得在WEB-INF/views下加一个haha.jsp文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        this is a haha jsp</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>最后输入上面的url地址，可以得到：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-2.png" alt=""></p>
<p>以上是一个简单的注解开发示例，下面慢慢深入渗透扩展一下。</p>
<h3 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h3><p>当前台通过提交表单，get或post请求提交了request参数，参数可能是基本类型，或者是对象类型，还有数组类型等等。</p>
<h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>首先来看看基本类型，这里主要说两种数字与字符串，字符串虽然不是java的基本类型，但是在web请求传递的过程中，就勉强把它当成基本类型吧。基本类型的接收比较简单，只要接收的参数名和表单提交的栏位的name匹配就好，还是基于上面的工程，修改index.jsp为如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;$Title$&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div align="center"&gt;</div><div class="line">      &lt;h3&gt;接收基本参数&lt;/h3&gt;</div><div class="line">      &lt;form name="aForm" action="$&#123;pageContext.request.contextPath&#125;/springmvc/param.do"&gt;</div><div class="line">        ID:&lt;input type="number" name="id"&gt;&lt;br&gt;</div><div class="line">        NAME:&lt;input type="text" name="name"&gt;&lt;br&gt;</div><div class="line">        SALARY:&lt;input type="text" name="salary"&gt;</div><div class="line">        &lt;input type="submit" value="提交"&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>修改controller代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping(<span class="string">"springmvc"</span>)</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAnnoController</span> </span>&#123;</div><div class="line">    @RequestMapping(<span class="string">"hello"</span>)</div><div class="line">    public <span class="built_in">String</span> hello() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @RequestMapping(<span class="string">"param"</span>)</div><div class="line">    public <span class="built_in">String</span> param(int id, <span class="built_in">String</span> name, double salary)&#123;</div><div class="line">        System.out.println(id + <span class="string">" ,"</span> + name + <span class="string">" ,"</span> + salary);</div><div class="line">        <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>增加一个param方法，方法接收三个参数，(int id, String name, double salary)，三个参数与form表单的三个参数的name匹配。运行程序，得到index界面如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-3.png" alt=""></p>
<p>在参数里输id为1，name为chonghe，salary为2.5。点击提交，什么也没有，然后在intellij的终端里看到：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> ,chonghe ,<span class="number">2.5</span></div></pre></td></tr></table></figure></p>
<p>表示springmvc接收参数成功。这是基本类型，下面看下数组类型。</p>
<h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>数组类型有一个常用的应用场景，感觉上除了这个场景其他的用的很少，那就是checkbox批量操作。先来前台代码，前台在以上index.jsp的基础上增加如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div align=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;h3&gt;接收数组类型&lt;/h3&gt;</div><div class="line">  &lt;form name=<span class="string">"aForm"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/springmvc/array.do"</span>&gt;</div><div class="line">    数字<span class="number">1</span>:&lt;input type="checkbox" name="ids" value="1"&gt;&lt;br&gt;</div><div class="line">    数字2:&lt;input type="checkbox" name="ids" value="233"&gt;&lt;br&gt;</div><div class="line">    数字3:&lt;input type="checkbox" name="ids" value="3"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;hr&gt;</div></pre></td></tr></table></figure></p>
<p>后台增加一个array方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"array"</span>)</div><div class="line">public <span class="built_in">String</span> array(Integer[] ids)&#123;</div><div class="line">    <span class="keyword">for</span> (Integer id : ids) &#123;</div><div class="line">        System.out.println(id);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前台三个checkbox的name属性和后台的接收参数名称一致，前台的value就表示传过来的具体值。重新部署再运行，浏览器里输入项目的初始url。得到如下</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-4.png" alt=""></p>
<p>勾选两个数字1，数字2，点提交，在控制台可以得到如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">233</span></div></pre></td></tr></table></figure></p>
<p>妥妥的，下面讲讲POJO类型</p>
<h4 id="POJO类型"><a href="#POJO类型" class="headerlink" title="POJO类型"></a>POJO类型</h4><p>参照MyBatis的接收POJO类型，其实从某种程度上来说其实是差不多的。那边是把数据库字段与POJO属性对应，SpringMVC是把表单的字段和POJO的属性对应。具体怎么对应的，这里也不讨论，因为我确实没看过源码。</p>
<p>既然是要接收POJO类型，首先得有POJO类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line">    private <span class="built_in">String</span> address;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前端增加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div align=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;h3&gt;接收POJO类型&lt;/h3&gt;</div><div class="line">  &lt;form name=<span class="string">"aForm"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/springmvc/user.do"</span>&gt;</div><div class="line">    用户ID:&lt;input type="text" name="id"&gt;&lt;br&gt;</div><div class="line">    用户姓名:&lt;input type="text" name="name"&gt;&lt;br&gt;</div><div class="line">    用户地址:&lt;input type="text" name="address"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;hr&gt;</div></pre></td></tr></table></figure></p>
<p>修改后台代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"user"</span>)</div><div class="line">public <span class="built_in">String</span> user(User user) &#123;</div><div class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</div><div class="line">        System.out.println(user.getId());</div><div class="line">        System.out.println(user.getName());</div><div class="line">        System.out.println(user.getAddress());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新部署程序，运行得到如下界面：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-5.png" alt=""></p>
<p>输入id：12，姓名：虫合，地址：天安门，点提交可以得到如下信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">12</span></div><div class="line">虫合</div><div class="line">天安门</div></pre></td></tr></table></figure></p>
<p>妥妥的，这个是很简单的，但是按照一般套路来说，得有字符串转换成日期类型的套路。</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>一般在前端的页面，如果是稍微专业点的话，基本上都会配置插件，以鼠标点击的形式选择日期，选择完之后提交表单就会自动生成特定格式的字符串给后台去识别，最后生成Date类型。没有谁会给个text然用户自己输字符串的。</p>
<p>但是，现在是学习阶段，以这种形式试试水总还是好的，这次先写前端：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div align=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;h3&gt;日期类型转换&lt;/h3&gt;</div><div class="line">  &lt;form name=<span class="string">"aForm"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/springmvc/dateFormat.do"</span>&gt;</div><div class="line">    用户ID:&lt;input type="text" name="id"&gt;&lt;br&gt;</div><div class="line">    用户姓名:&lt;input type="text" name="name"&gt;&lt;br&gt;</div><div class="line">    用户地址:&lt;input type="text" name="address"&gt;</div><div class="line">    用户生日:&lt;input type="text" name="birthday"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>关于如何实现类型转换，按照网上的说法一共有三种：</p>
<h5 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="@DateTimeFormat"></a>@DateTimeFormat</h5><p>第一种是在实体类的属性上加入注解实现。然后还是要写一个实体类UserWithBirth：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserWithBirth</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line">    private <span class="built_in">String</span> address;</div><div class="line">    @DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd"</span>)</div><div class="line">    private <span class="built_in">Date</span> birthday;</div><div class="line"></div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要让注解生效还需要在配置文件里配置相关信息，增加如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService"</span>&gt;&lt;/mvc:annotation-driven&gt;</div><div class="line"></div><div class="line">&lt;bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"&gt;</div><div class="line">    &lt;property name="converters"&gt;</div><div class="line">        &lt;set&gt;</div><div class="line"></div><div class="line">        &lt;/set&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>这两句配置我想了半天没有想到该如何来描述，因为我自己也不懂内部的原理，暂且记住，就当做他是实现注解与开启类型转换服务的吧。</p>
<p>下面在controller里添加方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"dateFormat"</span>)</div><div class="line">public <span class="built_in">String</span> dateFormat(UserWithBirth userWithBirth) &#123;</div><div class="line">    <span class="keyword">if</span> (userWithBirth != <span class="literal">null</span>) &#123;</div><div class="line">        System.out.println(userWithBirth.getId());</div><div class="line">        System.out.println(userWithBirth.getName());</div><div class="line">        System.out.println(userWithBirth.getAddress());</div><div class="line">        System.out.println(userWithBirth.getBirthday());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行之后得到如下，输入如下信息：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-6.png" alt=""></p>
<p>点击提交，得到输出信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">100</span></div><div class="line">主席</div><div class="line">天安门</div><div class="line">Tue Aug <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1926</span></div></pre></td></tr></table></figure></p>
<p>妥妥的。另外，除了@DateTimeFormat注解，还有@NumberFormat。另外的注解形式实现类型转换的方式这里也不细说了，篇幅有限，有需要的时候再去研究。</p>
<h5 id="Controller里添加initBinder方法"><a href="#Controller里添加initBinder方法" class="headerlink" title="Controller里添加initBinder方法"></a>Controller里添加initBinder方法</h5><p>这种方式也很简单，只需要在Controller内添加一个带有@initBinder的方法。添加的方法代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@InitBinder</div><div class="line">public <span class="keyword">void</span> initBinder(WebDataBinder webDataBinder)&#123;</div><div class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>);</div><div class="line">    webDataBinder.registerCustomEditor(<span class="built_in">Date</span>.class,<span class="keyword">new</span> CustomDateEditor(sdf,<span class="literal">true</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件不用做修改，然后把原来配置的@DateTimeFormat注释掉，之后运行，在网页里输入以下信息：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-7.png" alt=""></p>
<p>点击提交，控制台可以得到如下信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">101</span></div><div class="line">主席</div><div class="line">地安门</div><div class="line">Tue Aug <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1926</span></div></pre></td></tr></table></figure></p>
<p>妥妥的。关于这个initBinder的原理，我还是不懂，也记住吧····</p>
<h5 id="自定义全局转换器"><a href="#自定义全局转换器" class="headerlink" title="自定义全局转换器"></a>自定义全局转换器</h5><p>此种方式是相对较为繁琐的一种方式，但是通过自定义类型转换器，可以让其适用于各个controller，而且控制灵活。先写一个转换器类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyDateConverter</span> <span class="title">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy_MM_dd"</span>);</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public <span class="built_in">Date</span> convert(<span class="built_in">String</span> s) &#123;</div><div class="line">        <span class="built_in">Date</span> date = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            date = sdf.parse(s);</div><div class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> date;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Converter里面的两个泛型是从第一个转换到第二个，之后需要在配置文件里配置自定义的转换器，基于第一种方法里写过的配置文件，在FormattingConversionServiceFactoryBean的属性converters里的set里添加刚写好的MyDateConverter类的bean：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"conversionService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</div><div class="line">    &lt;property name="converters"&gt;</div><div class="line">        &lt;set&gt;</div><div class="line">            &lt;bean class="com.just4fun.converter.MyDateConverter"&gt;&lt;/bean&gt;</div><div class="line">        &lt;/set&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;<span class="regexp">/bean&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行项目，得到如下界面，输入：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-8.png" alt=""></p>
<p>控制台得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">102</span></div><div class="line">主席</div><div class="line">地安门</div><div class="line">Tue Aug <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1926</span></div></pre></td></tr></table></figure></p>
<p>以上是三种配置类型转换的方式，第一种只能适用于单个实体类的单个属性，第二个适用于单个controller，第三个适用全局。</p>
<h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><p>最后说一说springmvc接收集合类型，接收集合类型其实也非常简单，只是前端的代码遵循特定的格式就好。</p>
<h5 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h5><p>下面就直接写代码了，先新建一个UserTable包装类，里面有list集合，待会前端传来的东西就要存在这个nameList集合里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserTable</span> </span>&#123;</div><div class="line">    List&lt;<span class="built_in">String</span>&gt; nameList;</div><div class="line"></div><div class="line">    public List&lt;<span class="built_in">String</span>&gt; getNameList() &#123;</div><div class="line">        <span class="keyword">return</span> nameList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setNameList(List&lt;<span class="built_in">String</span>&gt; nameList) &#123;</div><div class="line">        <span class="keyword">this</span>.nameList = nameList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前端：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div align=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;h3&gt;List类型&lt;/h3&gt;</div><div class="line">  &lt;form name=<span class="string">"aForm"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/springmvc/list.do"</span>&gt;</div><div class="line">    姓名<span class="number">1</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameList[0]"</span>&gt;&lt;br&gt;</div><div class="line">    姓名2：&lt;input type="text" name="nameList[1]"&gt;&lt;br&gt;</div><div class="line">    姓名3：&lt;input type="text" name="nameList[2]"&gt;&lt;br&gt;</div><div class="line">    姓名4：&lt;input type="text" name="nameList[3]"&gt;&lt;br&gt;</div><div class="line">    姓名5：&lt;input type="text" name="nameList[4]"&gt;&lt;br&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;hr&gt;</div></pre></td></tr></table></figure></p>
<p>然后是controller代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"list"</span>)</div><div class="line">public <span class="built_in">String</span> listName(UserTable table)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> name: table.getNameList()) &#123;</div><div class="line">        System.out.println(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-9.png" alt=""></p>
<p>最后可得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div><div class="line">e</div></pre></td></tr></table></figure></p>
<p>需要说明的是，springmvc不能直接接受List<string>这样的集合类型参数，需要用包装类装起来才行，原因就是前端form表单传来的参数是与属性相对应。</string></p>
<h5 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h5><p>Map集合的封装和List差不多，也需要遵循特定的规则。还是在原来的包装类里再包装一个Map集合：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserTable</span> </span>&#123;</div><div class="line">    List&lt;<span class="built_in">String</span>&gt; nameList;</div><div class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; userProperty;</div><div class="line"></div><div class="line">    public <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getUserProperty() &#123;</div><div class="line">        <span class="keyword">return</span> userProperty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setUserProperty(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; userProperty) &#123;</div><div class="line">        <span class="keyword">this</span>.userProperty = userProperty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;<span class="built_in">String</span>&gt; getNameList() &#123;</div><div class="line">        <span class="keyword">return</span> nameList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setNameList(List&lt;<span class="built_in">String</span>&gt; nameList) &#123;</div><div class="line">        <span class="keyword">this</span>.nameList = nameList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再写前端：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div align=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;h3&gt;Map类型&lt;/h3&gt;</div><div class="line">  &lt;form name=<span class="string">"aForm"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/springmvc/map.do"</span>&gt;</div><div class="line">    姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"userProperty['name']"</span>&gt;&lt;br&gt;</div><div class="line">    地址：&lt;input type="text" name="userProperty['address']"&gt;&lt;br&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;hr&gt;</div></pre></td></tr></table></figure></p>
<p>Controller增加方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(<span class="string">"map"</span>)</div><div class="line">public <span class="built_in">String</span> map(UserTable table)&#123;</div><div class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; userProperty = table.getUserProperty();</div><div class="line">    System.out.println(userProperty.get(<span class="string">"name"</span>));</div><div class="line">    System.out.println(userProperty.get(<span class="string">"address"</span>));</div><div class="line">    <span class="keyword">return</span> <span class="string">"haha"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行，页面输入参数：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day2-10.png" alt=""></p>
<p>提交可得：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主席</div><div class="line">地球</div></pre></td></tr></table></figure></p>
<p>写的有点多了，应该分篇才好的。算了不管了，代码地址如下：</p>
<h2 id="代码：https-github-com-kentwood-springMVCDay2"><a href="#代码：https-github-com-kentwood-springMVCDay2" class="headerlink" title="代码：https://github.com/kentwood/springMVCDay2"></a><a href="https://github.com/kentwood/springMVCDay2" target="_blank" rel="external">代码：https://github.com/kentwood/springMVCDay2</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点惭愧，都不知道是咋了，明明什么活都没干的感觉，居然被说已经挑大梁了。着实让我有些捉鸡。没法了，只能硬着头皮上了，搞不好也无所谓了。人力资源奖励了一张欢乐谷门票，说是对优秀实习生的奖励，这样下次去欢乐谷就能省一张门票钱了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;SpringM
    
    </summary>
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架（一）</title>
    <link href="http://yoursite.com/2017/04/26/SpringMVC%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/26/SpringMVC框架（一）/</id>
    <published>2017-04-26T13:36:31.000Z</published>
    <updated>2017-04-27T14:19:55.457Z</updated>
    
    <content type="html"><![CDATA[<p>整个项目组只剩下我一个人做java后台了，有点不知所措。除了好好学习也不知道该怎么做了，但是不管怎么说还是乐观点好，一个人扛成长的也快。我还是蛮喜欢公司的不加班的文化的，我可以自己多学一点，写写博客，充实一下新技术。</p>
<hr>
<h2 id="SpringMVC框架（一）"><a href="#SpringMVC框架（一）" class="headerlink" title="SpringMVC框架（一）"></a>SpringMVC框架（一）</h2><hr>
<p>先说说SpringMVC是什么，SpringMVC是Spring的一部分。参照Spring的架构来说，它是属于web模块的。它是一个MVC框架，首先什么是MVC框架，网上的资料也是一大堆，这里也不细说MVC的思想。</p>
<p>我想讲讲怎样使用SpringMVC吧，之后再通过使用的过程来简单分析下SpringMVC的运行流程。</p>
<h3 id="SpringMVC简单示例"><a href="#SpringMVC简单示例" class="headerlink" title="SpringMVC简单示例"></a>SpringMVC简单示例</h3><p>用Intellij新建web工程，参照之前的博客<a href="http://www.wangsusu.com.cn/2017/04/13/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">Spring框架</a>或者后几篇，下载spring的jar包。最后导入的jar文件如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day1-1.png" alt=""></p>
<p>在src目录下建一com.just4fun.controller.HelloController类，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="title">implements</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    @Override</div><div class="line">    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;</div><div class="line">        System.out.println(<span class="string">"haha"</span>);</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">        modelAndView.addObject(<span class="string">"hello"</span>, <span class="string">"this is springMVC"</span>);</div><div class="line">        modelAndView.setViewName(<span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先不用管这个Controller与ModelAndView是干什么的，不过基本上也能看出来了，MVC三个字母都出现了。</p>
<p>接着在src目录下新建一个spring-mvc.xml配置文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id="helloController" name="/hello.do" class="com.just4fun.controller.HelloController"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;</div><div class="line">        &lt;property name="prefix" value="/WEB-INF/view/"&gt;&lt;/property&gt;</div><div class="line">        &lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>最后修改一下web.xml：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"</div><div class="line">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         version="3.1"&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>然后在WEB-INF下新建一个view目录，在view目录下新建一个hello.jsp：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    $&#123;hello&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>里面用el表达式取hello的值。之后再tomcat上运行，在浏览器地址里输<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:8081/springMVCDay1/hello.do</span></div></pre></td></tr></table></figure></p>
<p>可以得到如图所示：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day1-2.png" alt=""></p>
<p>这就是一个简单的SpringMVC的示例，有点莫名其妙的感觉，下面解释下SpringMVC的运行原理。</p>
<h3 id="SpringMVC原理"><a href="#SpringMVC原理" class="headerlink" title="SpringMVC原理"></a>SpringMVC原理</h3><p>SpringMVC是一个MVC框架，基本原理也是遵循了MVC模式的原理。原理的图示如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day1-3.png" alt=""></p>
<p>先看web.xml中配置的DispatcherServlet，这个Servlet映射的mapping是*.do，最后一步输入的hello.do匹配了DispatcherServlet的映射。DispatcherServlet拿到这个url去请求处理器映射器，也就是这个BeanNameUrlHandlerMapping，映射器根据这个hello.do找到了HelloController类，然后返还给DispatcherServlet，DispatcherServlet拿到类又去请求处理器适配器SimpleControllerHandlerAdapter，处理器适配器根据类名找到HelloController并调用里面的方法之后得到ModelAndView并把ModelAndView返回给DispatcherServlet，接着DispatcherServlet根据ModelAndView的名字以及InternalResourceViewResolver配置的前缀与后缀拼接成了/WEB-INF/view/hello.jsp并将ModelAndView的hello参数发送给了jsp页面让其能用EL表达式调用。</p>
<p>以上就是一个完整的SpringMVC从请求再到视图映射的过程，当然这是最最简单的情况，使用的只是简单的名称适配Controller，Controller适配器也只能匹配一个方法。以上也算是入了个门吧。</p>
<h3 id="处理器映射器"><a href="#处理器映射器" class="headerlink" title="处理器映射器"></a>处理器映射器</h3><p>接下来稍微细讲一下这个处理器映射器。这东西的作用就是根据DispatcherServlet发来的url请求去寻找Controller，找到之后把处理器的引用返还给DispatcherServlet。关于这个寻找的方式，SpringMVC提供了几个常用的给我们。</p>
<h4 id="BeanNameUrlHandlerMapping"><a href="#BeanNameUrlHandlerMapping" class="headerlink" title="BeanNameUrlHandlerMapping"></a>BeanNameUrlHandlerMapping</h4><p>这个就是我们的简单程序中用到的，他会根据url请求去匹配controller的bean的Name属性，匹配上了就获取到这个controller类。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=<span class="string">"helloController"</span> name=<span class="string">"/hello.do"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.just4fun.controller.HelloController"</span>&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码就是根据url中的hello.do去匹配name为hello.do的controller。</p>
<h4 id="SimpleUrlHandlerMaping"><a href="#SimpleUrlHandlerMaping" class="headerlink" title="SimpleUrlHandlerMaping"></a>SimpleUrlHandlerMaping</h4><p>这货也是一个简单基本上没什么人用的处理器映射器，这里讲一讲只是为了加深对处理器映射器的印象。先来一点关于SimpleUrlHandlerMaping的配置代码，同时再写一个AnotherController类。</p>
<p>配置代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;</div><div class="line">    &lt;property name="mappings"&gt;</div><div class="line">        &lt;props&gt;</div><div class="line">            &lt;prop key="/haha.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">            &lt;prop key="/chonghe.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">            &lt;prop key="/houa.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">        &lt;/props&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;bean id="anotherController" class="com.just4fun.controller.AnotherController"&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>Controller代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnotherController</span> <span class="title">implements</span> <span class="title">Controller</span></span>&#123;</div><div class="line">    @Override</div><div class="line">    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">        modelAndView.addObject(<span class="string">"haha"</span>, <span class="string">"虫合虫合"</span>);</div><div class="line">        modelAndView.setViewName(<span class="string">"chonghe"</span>);</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在WEB-INF/view里加一个chonghe.jsp：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    $&#123;haha&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>从代码里应该能看出来SimpleUrlHandlerMapping的正确使用方法，就是拿三个url去匹配helloController。运行下康康结果：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day1-4.png" alt=""></p>
<p>妥妥的。但是这里引出一个问题，多个处理器映射器之间能不能共存，答案是可以的，但是如果存在url匹配命名冲突的问题，我测试的是会以后一个为准。但是应该也没人这么无聊吧，认真点写代码不好么。</p>
<p>上面这些处理器映射器在实际的项目中我是从来没有用过，实际的项目中都是用的注解去配置，简单又方便，这里讲这些知识为了进一步巩固SpringMVC的运行流程，DispatcherServlet拿到url之后先去找处理器映射器，处理器映射器找到处理器的引用再返还给DispatcherServlet。</p>
<h3 id="处理器适配器"><a href="#处理器适配器" class="headerlink" title="处理器适配器"></a>处理器适配器</h3><p>这东西的作用就是接受DispatcherServlet传来的处理器引用，找到里面对应的方法并执行，返回模型或试图或者是其他的比如json的参数，其实也是视图的一种。</p>
<h4 id="SimpleControllerHandlerAdapter"><a href="#SimpleControllerHandlerAdapter" class="headerlink" title="SimpleControllerHandlerAdapter"></a>SimpleControllerHandlerAdapter</h4><p>上面的代码用的就是这个，这个SimpleControllerHandlerAdapter的作用很简单，就是执行Controller里面的handleRequest方法，我们上面的代码写的controller都是继承了org.springframework.web.servlet.mvc.Controller。然后实现handleRequest方法。</p>
<h4 id="HttpRequestHandlerAdapter"><a href="#HttpRequestHandlerAdapter" class="headerlink" title="HttpRequestHandlerAdapter"></a>HttpRequestHandlerAdapter</h4><p>这个东西虽然我没用过，但是感觉在工程中应该是会有用的，它是用来执行HttpRequestHandler里的handleRequest方法。来点代码示范下，先写个MyHttpRequestHandler：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyHttpRequest</span> <span class="title">implements</span> <span class="title">HttpRequestHandler</span> </span>&#123;</div><div class="line">    @Override</div><div class="line">    public <span class="keyword">void</span> handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException &#123;</div><div class="line">        httpServletRequest.getRequestDispatcher(<span class="string">"WEB-INF/view/houa.jsp"</span>).forward(httpServletRequest, httpServletResponse);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件增加这样的东西：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;</div><div class="line">    &lt;property name="mappings"&gt;</div><div class="line">        &lt;props&gt;</div><div class="line">            &lt;prop key="/hello.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">            &lt;prop key="/chonghe.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">            &lt;prop key="/houa.do"&gt;anotherController&lt;/prop&gt;</div><div class="line">            &lt;prop key="/hou.do"&gt;myHttpRequest&lt;/prop&gt;</div><div class="line">        &lt;/props&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id="myHttpRequest" class="com.just4fun.controller.MyHttpRequest"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>然后在WEB-INF/view里写houa.jsp:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    吼啊！</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>启动之后在浏览器里输入<a href="http://localhost:8081/springMVCDay1/hou.do：" target="_blank" rel="external">http://localhost:8081/springMVCDay1/hou.do：</a></p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springmvc-day1-5.png" alt=""></p>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>最后要说的就是控制器了，就是那个controller。SpringMVC里的controller有很多种，但是实际开发中如果是使用注解的话也用不上SpringMVC自带的那些，但是这里先介绍一种CommandController吧。</p>
<p>但是一想到要写个小项目就决定下一篇再弄了。今天就到这里了。</p>
<h3 id="代码：https-github-com-kentwood-springMVCDay1"><a href="#代码：https-github-com-kentwood-springMVCDay1" class="headerlink" title="代码：https://github.com/kentwood/springMVCDay1"></a><a href="https://github.com/kentwood/springMVCDay1" target="_blank" rel="external">代码：https://github.com/kentwood/springMVCDay1</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整个项目组只剩下我一个人做java后台了，有点不知所措。除了好好学习也不知道该怎么做了，但是不管怎么说还是乐观点好，一个人扛成长的也快。我还是蛮喜欢公司的不加班的文化的，我可以自己多学一点，写写博客，充实一下新技术。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;SpringMVC框架
    
    </summary>
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Maven试试水</title>
    <link href="http://yoursite.com/2017/04/24/Maven%E8%AF%95%E8%AF%95%E6%B0%B4/"/>
    <id>http://yoursite.com/2017/04/24/Maven试试水/</id>
    <published>2017-04-23T16:44:40.000Z</published>
    <updated>2017-04-23T16:45:33.017Z</updated>
    
    <content type="html"><![CDATA[<p>今天降温了，早上起来不知道是怎么了，一直流鼻涕，感觉鼻炎又犯了。吃过午饭去优衣库买了一件棉麻的裤子，裤子好长，穿上感觉自己腿好短，但是确实舒服。妹子也买了一件，感觉她穿起来比我好看。后来叫店员给改了裤脚，勉强到了合适自己的长度。感觉一天又要这么过去了的感觉。晚上要和远道的杰哥哥一起吃饭，他从大美利坚回来了，准备在深圳找工作，这样大学室友有三个都在深圳工作了。感觉要热闹起来了。先赶快写一篇博客，待会晚了估计就没机会学习了。</p>
<hr>
<h2 id="Maven尝试"><a href="#Maven尝试" class="headerlink" title="Maven尝试"></a>Maven尝试</h2><hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://maven.apache.org/" target="_blank" rel="external">Maven官方网站：http://maven.apache.org/</a></li>
</ul>
<hr>
<h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>Maven这个东西以前算是用过，但是也仅仅只是用了一下，感觉非常方便，只用几行代码就可以确定jar包，然后自动下载下来就可以使用。当时我创建的是基于maven的web工程，工程创建类的目录与资源目录都已经分配好，在intellij里指定好类的目录与资源目录分配在web项目的对应目录下时就可以自动构建出一个war。</p>
<p>今天在网上也找了找相关的资料，知道Maven最主要的功能就是上述所说的两个，一是<strong>项目构建</strong>，二是<strong>依赖管理</strong>。首先说说什么是项目构建，我目前还没有参与过大型的项目，所以对项目的构建理解也不是很深刻，但是我也先说说我理解的项目构建吧，举个简单的栗子，用一个Intellij创建一个javaweb项目，IDE就帮你生成了一个目录结构，有src，web等目录，web下又有WEB-INF目录。如果学过手动搭一个javaweb项目在tomcat里运行的会知道一个war包里的目录结构应该是如下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WEB-ROOT   根目录，一般虚拟目录会直接在此目录中设置</div><div class="line">	| ---  WEB-INF  整个WEB中最安全的目录，无法直接访问</div><div class="line">		|-- classes  保存所有的*.class文件	所有的class都要放在 包中</div><div class="line">		|-- lib           存放第三方的jar文件</div><div class="line">		|-- web.xml  WEB的部署描述符    </div><div class="line">	|---   index.jsp       欢迎页面</div></pre></td></tr></table></figure></p>
<p>用intellij创建的javaweb工程目录和这个标准的目录相比有相似的东西，但是还是有不同，首先是没有class目录，也没有lib目录。但是，你通过一些点击，修改一下artifact设置下的东西，就可以把这些java文件编译成class放在WEB-INF下的class目录下，同时把以来的jar文件添加到lib目录下最后生成war文件，这个过程就叫项目的构建。</p>
<p>那么Maven，也是可以完成这样一个功能，按照专业的说法，项目的构建有以下步骤：</p>
<p><strong>清理–编译–测试–报告–打包–部署</strong></p>
<p>Maven在进行项目构建时，对项目的结构拥有约定，一个Maven项目的基本结构是如下的样子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Project</div><div class="line">  |-src</div><div class="line">  |   |-main</div><div class="line">  |   |  |-java        —— 存放项目的.java文件</div><div class="line">  |   |  |-resources   —— 存放项目资源文件，如spring, hibernate配置文件</div><div class="line">  |   |-test</div><div class="line">  |      |-java        —— 存放所有测试.java文件，如JUnit测试类</div><div class="line">  |      |-resources   —— 测试资源文件</div><div class="line">  |-target             —— 目标文件输出位置例如.class、.jar、.war文件</div><div class="line">  |-pom.xml            —— maven项目核心配置文件</div></pre></td></tr></table></figure></p>
<p>感觉说了这么多，也没啥用处，我也不太想纠Maven这个东西太细，因为大概也用不上。下面就说一说具体的操作吧</p>
<h3 id="Intellij中使用Maven"><a href="#Intellij中使用Maven" class="headerlink" title="Intellij中使用Maven"></a>Intellij中使用Maven</h3><h4 id="下载与配置Maven"><a href="#下载与配置Maven" class="headerlink" title="下载与配置Maven"></a>下载与配置Maven</h4><p>Intellij中自带Maven的构建工具，但是为了加深理解，还是从头下载开始吧，Maven工具的下载地址是这个：<a href="http://maven.apache.org/" target="_blank" rel="external">http://maven.apache.org/</a>。下载那个bin.zip，不要下src，下载好之后解压。忘了说了，网上说maven至少需要jdk1.6，我下了jdk1.8。解压完毕之后是这样的：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-1.png" alt=""></p>
<p>如果需要在命令行里使用Maven时，需要在环境变量里设置，设置的方法和java的差不多，先这是MAVEN_HOME，再把%MAVEN_HOME%/bin加入到环境变量就好了。</p>
<p>之后可以在cmd里输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -v</div></pre></td></tr></table></figure></p>
<p>如果得到如下，就表示maven环境变量添加妥了。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-2.png" alt=""></p>
<p>然后得配置下Maven，配置的话主要是本地的检索包路径，就是从网上下载的jar包放在哪个文件夹里，如果是本地检索jar包的话该从哪个文件里检索，以及把下载的maven源改成阿里云的源，下载jar包的速度会快很多的配置。</p>
<p>Maven是有两个配置文件，一个全局配置，一个是用户配置。</p>
<p>全局配置：%MAVEN_HOME%/conf/settings.xml是Maven的全局配置文件。该文件配置了本地的仓库路径，默认的路劲是~/.m2/repository。其中~表示当前用户路径C:\Users\[UserName]。</p>
<p>用户配置：用户配置默认是没有的，需要把全局配置文件拷贝到~/.m2/settings.xml，之后进行修改。用户配置文件一但设置，全局配置文件将不再生效。配置用户配置文件的步骤如下：</p>
<ul>
<li>一. 创建一个本地仓库目录，比如：D:\software\maven\myLocalRepo</li>
<li>二. 复制%MAVEN_HOME%/conf/settings.xml，到~/.m2/settings.xml</li>
<li>三. 修改~/.m2/settings.xml为如下：</li>
</ul>
<p>本地仓库的配置信息如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-3.png" alt=""></p>
<p>同时改一下maven的源镜像为阿里云，下载速度杠杠的</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-4.png" alt=""></p>
<p>弄好的这些基本的就可以使用Intellij创建Maven工程了。</p>
<h4 id="使用Maven"><a href="#使用Maven" class="headerlink" title="使用Maven"></a>使用Maven</h4><p>新建工程点创建Maven项目，选工程中最常用的webapp吧，如图，注意画圈圈的地方是要点的</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-5.png" alt=""></p>
<p>之后点击next会弹出一个这样的，其中GroupId就是你的组织名称，和包名的名称是一个意思，ArtifactId是项目名称，version就是你项目的版本号。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-6.png" alt=""></p>
<p>之后点下一步会有一个maven的配置选项，Intellij可供配置的可选方案很多，选择maven目录，配置文件，以及包管理repo目录。选择好之后如图</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-7.png" alt=""></p>
<p>再点next，点finish就可以创建一个Maven管理的javaweb工程了。整体的目录是这个样子</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-8.png" alt=""></p>
<p>通过这个工程，来看看如何使用Maven的两个基本功能，项目构建与依赖管理吧。使用Intellij的Maven项目构架我也不想说太多了，网上搜Intellij创建javaweb项目教程一大堆，讲的如何点击一步一步的记住步骤就好了。然后facets，module中src、resource对应，最后是artifact。</p>
<p>如何构建项目的内部细节我没有深究过，只知道点击的步骤，反正我知道到最后生成的web工程项目应该是怎样的，如果哪里出错了网上再搜就妥了。</p>
<p>下面是重点，也是我觉得是Maven的最方便的地方，就是依赖管理。再回到刚才项目目录结构中，里面有一个pom.xml，就在图里，里面有个dependences标签，里面的东西就是对依赖的管理，在web项目中，基本上就是对jar包的管理，那么这个东西是如何管理jar的呢，举个例子，如果我要使用mybatis管理我的mysql数据库，那该如何管理呢？图里有个junit的实例，代码是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">        &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;<span class="regexp">/dependencies&gt;</span></div></pre></td></tr></table></figure></p>
<p>dependence标签里同样也有四个标签，groupId，artifactId，version，scope。其中前三个标签定位了jar包在资源repo里的位置，后一个scope定义了这个资源是能在哪个范围内使用。专业一点的说法的话，GAV坐标就能定位资源模块（主要是jar包），定位了之后会先从本地也就是我们在用户配置里定义的那个repo目录里找，如果没有的话就会从mirror里定义的那个网络资源也就是阿里云的maven源里去下载到repo目录中，可以供下次使用。而scope，中的test就定义了这个jar只能在测试中用到，关于这个test其实上面没讲清楚，与maven约定工作目录与项目构建相关的知识有关。就当作是只能在test目录下用到的jar包吧。</p>
<p>先试试水吧，比如我要在工程里使用struts框架，我就在pom.xml添加如下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">        &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;2.5&lt;/version&gt;</div><div class="line">        &lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;2.5.1&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>
<p>添加完之后右键pom.xml点reimport一下，或者可以设置自动导入，这样maven就会从本地或者从远程仓库找到mybatis的jar包然后导入你的工程，关于这个坐标的写法只能自己去maven的源里找了。其实写多了也就那么几个。保存下来或者记下来就行了。</p>
<p>接下来可以看看工程external library里有关于struts所有的一切了：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-10.png" alt=""></p>
<p>这些其实你都不用再管了，直接用起来就OK，配置web.xml的filter<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;web-app&gt;</div><div class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</div><div class="line">  &lt;filter&gt;</div><div class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">    &lt;filter-class&gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;filter-mapping&gt;</div><div class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">  &lt;/filter-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>在resources目录下新建struts.xml，写成以下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;struts&gt;</div><div class="line">    &lt;package name="myPack" extends="struts-default"&gt;</div><div class="line">        &lt;action name="login" class="com.just4fun.action.MyTestAction" method="login"&gt;</div><div class="line">            &lt;result&gt;haha.jsp&lt;/result&gt;</div><div class="line">        &lt;/action&gt;</div><div class="line">    &lt;/package&gt;</div><div class="line">&lt;<span class="regexp">/struts&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在java目录下写com.just4fun.action.MyTestAction类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyTestAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    public <span class="built_in">String</span> login() &#123;</div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样工程就写完了，然后是构建和部署，可以去网上找找intellij的点击步骤，在project structure里面先配置facets，再配置artifact，然后用tomcat一运行，在浏览器地址里输login.action，如图，妥妥的可以，这样就使用maven用了struts框架，简直是方便。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-11.png" alt=""></p>
<p>另外关于这个依赖范围scope，还是有必要再展开讲一讲。</p>
<p>首先依赖范围有四种</p>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>对于主代码有效</th>
<th>对于测试代码有效</th>
<th>对于运行时代码有效</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>log4j</td>
</tr>
<tr>
<td>test</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>junit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>JDBC Driver </td>
</tr>
</tbody>
</table>
<ul>
<li>1.compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</li>
<li>2.test：测试依赖范围。只对于测试classpath有效</li>
<li>3.provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api</li>
<li>4.runtime:运行时提供。例如:jdbc驱动</li>
</ul>
<p>下面说一下依赖传递的概念，关于依赖的传递应该很好理解，假定ABC三个都是Maven项目但是三者之间存在着依赖的关系，比如C依赖于B，B又依赖于A。那么C对于A的依赖就是一个被传递的过程。专业一点的说法是B是C的直接依赖，A是B的直接依赖，A是C的间接依赖。给一个图形说明的话是这样</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-9.png" alt=""></p>
<p>其中有B和C的关系是第一直接依赖，A和B是第二直接依赖。</p>
<p>再对应于四种依赖范围，不同的依赖范围对于依赖传递的效果也是不同的，下面给出一个表格：</p>
<table>
<thead>
<tr>
<th>*</th>
<th>compile</th>
<th>test</th>
<th>provided</th>
<th>runtime</th>
</tr>
</thead>
<tbody>
<tr>
<td>compile</td>
<td>compile</td>
<td>-</td>
<td>-</td>
<td>runtime</td>
</tr>
<tr>
<td>test</td>
<td>test</td>
<td>-</td>
<td>-</td>
<td>test</td>
</tr>
<tr>
<td>provided</td>
<td>provided</td>
<td>-</td>
<td>provided</td>
<td>provided</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime</td>
<td>-</td>
<td>-</td>
<td>runtime</td>
</tr>
</tbody>
</table>
<p>在上面这个表格中，左边第一列表示第一直接依赖范围，上面第一行表示第二直接依赖范围，中间的交叉单元格表示传递性依赖范围。</p>
<p>总结一下的话得到如下结论：</p>
<ul>
<li>当第二依赖的范围是compile的时候，传递性依赖的范围与第一直接依赖的范围一致。</li>
<li>当第二依赖的范围是test的时候，依赖不会得以传递。</li>
<li>当第二依赖的范围是provided的时候，只传递第一直接依赖范围也为provided的依赖，且传递性依赖的范围同样为 provided。</li>
<li>当第二直接依赖的范围是runtime的时候，传递性依赖的范围与第一直接依赖的范围一致，但compile例外，此时传递的依赖范围为runtime。</li>
</ul>
<p>那么这样来说的话又引出了一个新的问题，如果B引用了mybatis3.4版本作用范围为compile，A引用了myBatis3.0版本作用范围compile，那么C中的被传递的mybatis应该是哪个版本或者会报错？答案是Maven中不会存在依赖冲突的问题，在依赖传递中Maven遵循的是就近原则，所以C中引用的就是mybatis3.4版本。同理，如果同一个项目中写了写了两个dependence标签，里面的内容除了版本号其他的都一样，maven会议最下写的那个版本为准。</p>
<p>另外Maven的依赖还有排除依赖与可选依赖。可选依赖的写法如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.5.1&lt;/version&gt;</div><div class="line">    &lt;!--决定是否向下传递，true为传递，false为不传递--&gt;</div><div class="line">    &lt;optional&gt;true&lt;/optional&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>排除依赖的作用是如果有多余的jar依赖进来了，想排除出去会用到这个，目前为止我是从来没用到过。弄了半天发现也不好怎么写出来，网上找了个图暂时先看写法吧。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mavenday1-12.png" alt=""></p>
<p>以上就是简单的Maven介绍。</p>
<h3 id="代码：https-github-com-kentwood-MavenDay1"><a href="#代码：https-github-com-kentwood-MavenDay1" class="headerlink" title="代码：https://github.com/kentwood/MavenDay1"></a><a href="https://github.com/kentwood/MavenDay1" target="_blank" rel="external">代码：https://github.com/kentwood/MavenDay1</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天降温了，早上起来不知道是怎么了，一直流鼻涕，感觉鼻炎又犯了。吃过午饭去优衣库买了一件棉麻的裤子，裤子好长，穿上感觉自己腿好短，但是确实舒服。妹子也买了一件，感觉她穿起来比我好看。后来叫店员给改了裤脚，勉强到了合适自己的长度。感觉一天又要这么过去了的感觉。晚上要和远道的杰
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/categories/Maven/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架（六）</title>
    <link href="http://yoursite.com/2017/04/22/MyBatis%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/22/MyBatis框架（六）/</id>
    <published>2017-04-21T16:50:13.000Z</published>
    <updated>2017-04-22T06:53:36.291Z</updated>
    
    <content type="html"><![CDATA[<p>又回到了MyBatis框架，做事虽然可以多线程一起推进，但是有时候完成一件事还是要更有成就感一些。伤其十指不如断其一指 的感觉。这两个月一直教我技术的小哥要走了，以后就得靠自己了，感觉很忧伤，紧张，压力。但是还是得好好干活，上班写博客不知道算不算摸鱼。但是这些东西以后肯定也会用上的，多学习一点总是有好处。</p>
<hr>
<h2 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h2><hr>
<p>在实际的项目中，往往是多张表格有关联。举个例子，在商场项目中，用户肯定是要下订单买东西的，所以一个订单表肯定是有一个用户相关联。而一个用户可以下多个订单。在此商场系统中，用户表与订单表是一对多关系，订单表对用户表是多对一关系。而一个订单里又有多个商品，订单与商品又是一对多的关系，但是商品却不只属于一个订单，所以商品与订单是多对多的关系。而有的时候，我们可能会做一些特殊的查询，查询名字里有“虎”的用户购买的商品名有“鸡”的订单信息（我也不知道为什么会这样查，可能用户的需求独特，也可能是<del>我</del>程序员无聊）。</p>
<p>接着之前的文章，如果用parameterType就不能只是传入一个User就行了的，但是MyBatis只能传入一个parameterType，咋整？虽然不能增加传递参数的数量，但是可以改变传递参数的类型，好在我们可以自定义传入的对象。所以这里就引入了包装类的概念，包装类就是把要用到作为传递参数的类型作扩展，加入其他的信息，以满足特殊查询的需求（其实也算不上特殊，反而在工程中查单表才特殊吧）。</p>
<p>还是先设计好数据库吧，这里安利以下navicat这个数据库可视化工具，可以直接利用可视化管理数据表，清晰又可靠，具体的navicat操作方法网上一大堆，我刚才都没在网上找资料，自己摸索了出来。我直接把我画的数据库表结构图形贴出来</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mysql_structure.png" alt=""></p>
<p>貌似图里的外键的表述不太清晰，先看表字段的名字吧，名字很清晰，待会我会把代码下载的地址贴出来，代码里有生成的sql文件，新建个数据库然后执行下，妥妥的。然后添加一点数据。添加的数据我也一起在sql文件里生成了。最后生成四张表，用navicta的逆向成图标的工具试了试，效果如下</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mybatis6user.png" alt=""><br><img src="http://onv8ytvk1.bkt.clouddn.com/mybatis6item.png" alt=""><br><img src="http://onv8ytvk1.bkt.clouddn.com/mybatis6myorder.png" alt=""><br><img src="http://onv8ytvk1.bkt.clouddn.com/mybatis6orderdetail.png" alt=""></p>
<p>可以看到这四张表之间的关联关系，user与my_order是一对多的关系，my_order与order_detail也是一对多的关系，item与order_detail是一对多关系，另外可以得到user与item是多对多的关系。</p>
<p>好了，数据生成了下面要来查询，刚才说要查什么来着，对，查询名字里有“虎”的用户购买的商品名有“鸡”的订单信息。先写一下sql语句测试下吧。我花了1分钟写好了测试了下，可以用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">SELECT </div><div class="line">    <span class="string">`user`</span>.<span class="string">`name`</span> <span class="keyword">as</span> <span class="string">'username'</span>,</div><div class="line">    my_order.id <span class="keyword">as</span> <span class="string">'orderId'</span>,</div><div class="line">    item.<span class="string">`name`</span> <span class="keyword">as</span> <span class="string">'itemName'</span>,</div><div class="line">    order_detail.item_num <span class="keyword">as</span> <span class="string">'itemNum'</span></div><div class="line">FROM </div><div class="line">    <span class="string">`user`</span>,my_order,order_detail,item</div><div class="line">WHERE</div><div class="line">    <span class="string">`user`</span>.id = my_order.user_id AND </div><div class="line">    my_order.id = order_detail.order_id AND </div><div class="line">    item.id = order_detail.item_id AND </div><div class="line">    <span class="string">`user`</span>.<span class="string">`name`</span> like <span class="string">"%虎%"</span> AND </div><div class="line">    item.<span class="string">`name`</span> like <span class="string">"%鸡%"</span>;</div></pre></td></tr></table></figure></p>
<p>得带的结果如下：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/mybatis6zuizhongjieguo.png" alt=""></p>
<p>好了，现在问题来了，四张表相互关联，对类的设计有怎样的要求？另外，那如要用MyBatis实现该怎么办，这里得参数包含了user，my_order，order_detail，item四种表格所对应的对象，传入的parameterType该为怎样的类型？</p>
<p>首先看第一个问题吧，如何将多表之间的信息用类的结构表现出来，该如何设计这样的类？我就先贴出代码来</p>
<ul>
<li>Item类<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line">    private <span class="built_in">Date</span> productDate;</div><div class="line">    private double price;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>item类最为简单，就把字段映射成属性就好了</p>
<ul>
<li>OrderDetail类<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OrderDetail</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private int orderId;</div><div class="line">    private int itemId;</div><div class="line">    private int itemNum;</div><div class="line">    private Item item;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>OrderDetail中包含Item信息，其中得有一个Item属性</p>
<ul>
<li>MyOrder类<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyOrder</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">Date</span> orderDate;</div><div class="line">    private int userId;</div><div class="line">    private List&lt;OrderDetail&gt; orderDetails;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Order里有多个OrderDetail，用List<orderdetail>的属性类表示。</orderdetail></p>
<ul>
<li>User类<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    private int id;</div><div class="line">    private <span class="built_in">String</span> name;</div><div class="line">    private <span class="built_in">Date</span> birthday;</div><div class="line">    private <span class="built_in">String</span> address;</div><div class="line">    private <span class="built_in">String</span> sex;</div><div class="line">    private List&lt;MyOrder&gt; myOrders;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>一个User包含多个Order，用List<myorder> myOrders来表示。</myorder></p>
<p>这样通过类的设计就将数据库之间的关联关系给弄妥了。下面是写配置文件与mapper.xml。主配置文件没啥好说的，在之前的文章里有说明，重点是这个mapper.xml里的statement设计。先别急，来分析下刚才那一长串的sql语句，语句的目的是“查询名字里有“虎”的用户购买的商品名有“鸡”的订单信息”。可以看到需要传入的参数，只有“虎”与“鸡”两个，所以传入的parameterType可以为Item类User做一个包装类，包装类如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</div><div class="line">    private User user;</div><div class="line">    private <span class="built_in">String</span> itemName;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>传入的参数定了，查询到了信息，也应该有一个类来收编。毕竟是自己乱写的业务，总得把屁股擦干净，实际的项目中设计的类肯定比这个更有意义一点吧··。写一个ItemExt类来接收：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ItemExt</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</div><div class="line">    private int orderId;</div><div class="line">    private <span class="built_in">String</span> userName;</div><div class="line">    private int itemNum;</div><div class="line">    <span class="comment">//getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面开始写ItemMapper.java与ItemMapper.xml。先写ItemMapper.java，里面只有一个简单的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface ItemMapper &#123;</div><div class="line">    ItemExt findSpecialItem(UserVO userVO);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后开始写ItemMapper.xml：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;!DOCTYPE mapper</div><div class="line">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line">&lt;mapper namespace="com.just4fun.mapper.ItemMapper"&gt;</div><div class="line"></div><div class="line">    &lt;resultMap id="myItemMap" type="itemExt"&gt;</div><div class="line">        &lt;id column="username" property="userName"&gt;&lt;/id&gt;</div><div class="line">        &lt;id column="orderId" property="orderId"&gt;&lt;/id&gt;</div><div class="line">        &lt;id column="itemName" property="name"&gt;&lt;/id&gt;</div><div class="line">        &lt;id column="itemNum" property="itemNum"&gt;&lt;/id&gt;</div><div class="line">    &lt;/resultMap&gt;</div><div class="line">    </div><div class="line">    &lt;select id="findSpecialItem" parameterType="com.just4fun.po.vo.UserVO" resultMap="myItemMap"&gt;</div><div class="line">    SELECT</div><div class="line">        `user`.`name` as 'username',</div><div class="line">        my_order.id as 'orderId',</div><div class="line">        item.`name` as 'itemName',</div><div class="line">        order_detail.item_num as 'itemNum'</div><div class="line">    FROM</div><div class="line">        `user`,my_order,order_detail,item</div><div class="line">    WHERE</div><div class="line">        `user`.id = my_order.user_id AND</div><div class="line">        my_order.id = order_detail.order_id AND</div><div class="line">        item.id = order_detail.item_id AND</div><div class="line">        `user`.`name` like "%$&#123;user.name&#125;%" AND</div><div class="line">        item.`name` like "%$&#123;itemName&#125;%";</div><div class="line">    &lt;/select&gt;</div><div class="line">    </div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></p>
<p>写测试类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyTTTest</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws IOException &#123;</div><div class="line">        <span class="built_in">String</span> resource = <span class="string">"SqlMapConfig.xml"</span>;</div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">        ItemMapper itemMapper = sqlSession.getMapper(ItemMapper.class);</div><div class="line">        UserVO userVO = <span class="keyword">new</span> UserVO();</div><div class="line">        userVO.setItemName(<span class="string">"鸡"</span>);</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"虎"</span>);</div><div class="line">        userVO.setUser(user);</div><div class="line">        List&lt;ItemExt&gt; specialItem = itemMapper.findSpecialItem(userVO);</div><div class="line">        <span class="keyword">for</span> (ItemExt itemExt : specialItem) &#123;</div><div class="line">            System.out.println(itemExt.getUserName() + <span class="string">":"</span> + itemExt.getOrderId() + <span class="string">":"</span> + itemExt.getName() + <span class="string">":"</span> + itemExt.getItemNum());;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">大虎娃子:<span class="number">2</span>:肯德基鸡米花:<span class="number">1</span></div><div class="line">大虎娃子:<span class="number">1</span>:创维鸡丁盒:<span class="number">1</span></div><div class="line">虎蛋:<span class="number">4</span>:肯德基鸡米花:<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>直接用sql查询的结果一直。妥！今天先简单的捋一下MyBatis的多表映射，因为我几天没看MyBatis了也忘了很多东西，在MyBatis框架7里重点讲讲一对一，一对多，多对多映射的具体。</p>
<h3 id="代码：https-github-com-kentwood-myBatisDay6"><a href="#代码：https-github-com-kentwood-myBatisDay6" class="headerlink" title="代码：https://github.com/kentwood/myBatisDay6"></a><a href="https://github.com/kentwood/myBatisDay6" target="_blank" rel="external">代码：https://github.com/kentwood/myBatisDay6</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又回到了MyBatis框架，做事虽然可以多线程一起推进，但是有时候完成一件事还是要更有成就感一些。伤其十指不如断其一指 的感觉。这两个月一直教我技术的小哥要走了，以后就得靠自己了，感觉很忧伤，紧张，压力。但是还是得好好干活，上班写博客不知道算不算摸鱼。但是这些东西以后肯定也
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="myBatis" scheme="http://yoursite.com/tags/myBatis/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门（一）</title>
    <link href="http://yoursite.com/2017/04/22/Redis%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/22/Redis入门（一）/</id>
    <published>2017-04-21T16:11:50.000Z</published>
    <updated>2017-04-21T16:36:45.989Z</updated>
    
    <content type="html"><![CDATA[<p>新项目中用到了Redis，以前只是听说过NoSql，一直觉得很厉害，这次终于用上了，边学边用也算是对这个东西有所了解了。目前还是在学习中，但是觉得还是把学到的东西先总结一下有助于自己的提高。</p>
<hr>
<h2 id="Redis数据库（一）"><a href="#Redis数据库（一）" class="headerlink" title="Redis数据库（一）"></a>Redis数据库（一）</h2><hr>
<h3 id="参考Site"><a href="#参考Site" class="headerlink" title="参考Site"></a>参考Site</h3><p><a href="https://redis.io/" target="_blank" rel="external">Redis官网：https://redis.io/</a></p>
<p><a href="https://redisdesktop.com/download" target="_blank" rel="external">RedisDesktopManager下载地址：https://redisdesktop.com/download</a></p>
<hr>
<h3 id="NoSql简介"><a href="#NoSql简介" class="headerlink" title="NoSql简介"></a>NoSql简介</h3><h4 id="NoSql概念"><a href="#NoSql概念" class="headerlink" title="NoSql概念"></a>NoSql概念</h4><p>NoSql是Not Only Sql的缩写，意思是不仅仅是Sql。我在网上看了很多关于NoSql的资料，关于革命性的运动之类的。感觉也记不住那么多。但是我知道了NoSql是Sql的一个阉割版，保留了部分功能从而极大提升性能以满足大型数据服务。NoSql在某些方面已经完全的超越了传统Sql数据库，但是NoSql也只能作为传统Sql的补充，不能完全取代Sql。一个大项目，类似于淘宝京东之类的，也不可能只用一种数据库，NoSql有自己的擅长。</p>
<h4 id="NoSql分类"><a href="#NoSql分类" class="headerlink" title="NoSql分类"></a>NoSql分类</h4><p>1、键值(Key-Value)存储数据库</p>
<ul>
<li>相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li>
<li>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </li>
<li>数据模型： 一系列键值对</li>
<li>优势： 快速查询</li>
<li>劣势： 存储的数据缺少结构化</li>
</ul>
<p>2、列存储数据库</p>
<ul>
<li>相关产品：Cassandra, HBase, Riak</li>
<li>典型应用：分布式的文件系统</li>
<li>数据模型：以列簇式存储，将同一列数据存在一起</li>
<li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li>
<li>劣势：功能相对局限</li>
</ul>
<p>3、文档型数据库</p>
<ul>
<li>相关产品：CouchDB、MongoDB</li>
<li>典型应用：Web应用（与Key-Value类似，Value是结构化的）</li>
<li>数据模型： 一系列键值对</li>
<li>优势：数据结构要求不严格</li>
<li>劣势： 查询性能不高，而且缺乏统一的查询语法</li>
</ul>
<p>4、图形(Graph)数据库</p>
<ul>
<li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li>
<li>典型应用：社交网络</li>
<li>数据模型：图结构</li>
<li>优势：利用图结构相关算法。</li>
<li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li>
</ul>
<p>这几个分类是从网上抄的，看到这些东西也算是打开了新世界的门缝了，原来NoSql有那么多，今天要讲的Redis只是一种分类（KV存储数据库）里的一个小类型。</p>
<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>说到了Redis就来简单介绍下它，关于它的起源网上也有相关的<del>说明</del>故事，讲它怎样诞生的。多知道点还是有好处的。不过这里就不多说了，懒得<del>复制</del>打字。</p>
<p>Redis是用C语言开发的一个高性能的KV类型的数据库，可以用个键值类型来存储一些数据，具体的来说，可以存储一下几种类型：</p>
<ul>
<li>String字符类型</li>
<li>Map散列类型</li>
<li>List列表类型</li>
<li>Set集合类型</li>
<li>SortedSet有序集合类型<br>第一个字母大写，不代表是java的类。只是写习惯了想把第一个字母写成大写。</li>
</ul>
<p>关于Redis的应用场景，网上说可以做一下的</p>
<ul>
<li>缓存（数据查询、短连接、新闻内容、商品内容等等）。（最多使用）</li>
<li>分布式集群架构中的session分离。</li>
<li>聊天室的在线好友列表。</li>
<li>任务队列。（秒杀、抢购、12306等等）</li>
<li>应用排行榜。</li>
<li>网站访问统计。</li>
<li>数据过期处理（可以精确到毫秒）<br>具体怎么做的我还不知道，我做的项目中的貌似一点都没有符合。</li>
</ul>
<h3 id="Redis下载与安装"><a href="#Redis下载与安装" class="headerlink" title="Redis下载与安装"></a>Redis下载与安装</h3><p><a href="https://redis.io/" target="_blank" rel="external">官网</a>有下载，下个稳定版3.2.8吧。稳一点好。官网下的是源码，需要自己编译才行，这里在Linux上搞事。我用的Centos6.5。具体的步骤如下：<br>首先解压：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu ~]# tar -zxf redis-3.2.8.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压了之后，如果得编译，编译需要c++编译工具，用yum装一个：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu ~]# yum install gcc-c++</div></pre></td></tr></table></figure></p>
<p>安装完毕了编译源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu ~]# cd redis-3.2.8</div><div class="line">[root@wangsusu redis-3.2.8]# make</div></pre></td></tr></table></figure></p>
<p>最后是安装：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu redis-3.2.8]# make install PREFIX=/usr/local/redis328</div></pre></td></tr></table></figure></p>
<p>这样就在/user/local/目录下装好了redis328。</p>
<p>安装好之后cd进redis328目录，只有一个bin目录，bin目录底下有如下东西：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redisBin.png" alt=""></p>
<p>启动一下Redis服务，输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu redis328]# ./redis-server</div></pre></td></tr></table></figure></p>
<p>得到如下信息：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redis-start.png" alt=""></p>
<p>即是Redis服务启动成功。但是这种方式的启动有一个问题，这是前端启动的方式，启动之后终端界面不能再输入东西，如果是在linux操作系统下还可以再开一个终端，但是如果用SecureCRT之类的软件登录系统，就得再开一个连接，这样很繁琐。我也不知道Redis为什么要弄一个前端启动的概念在里面，一般的sql服务部都应该是以后台服务的形式存在的么。那就说一说Redis如何能像Sql服务一样在后台启动吧。</p>
<p>首先按Ctrl+c退出前端服务界面。后端启动有一点麻烦，需要修改配置文件。首先要回到安装之前的那个目录redis-3.2.8，这个里面才有配置文件。把redis.conf文件复制到bin目录下。之后修改redis.conf文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# cp /user/local/redis-3.2.8/redis.conf ./</div><div class="line">[root@wangsusu bin]# vim redis.conf</div></pre></td></tr></table></figure></p>
<p>把daemonize的属性改为yes</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redis_conf.png" alt=""></p>
<p>之后就可以后端启动了，输入如下命令，后面要接这个redis.conf配置文件参数<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# ./redis-server redis.conf</div></pre></td></tr></table></figure></p>
<p>启动之后可以检查一下是否启动成功：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# ps aux|grep redis</div></pre></td></tr></table></figure></p>
<p>如果出现一下进程信息，则代表启动成功：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redis_jincheng.png" alt=""></p>
<p>如果要关闭服务，输入以下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# ./redis-cli shutdown</div></pre></td></tr></table></figure></p>
<p>这里再说一下，如果将输入用redis缓存，会加载到内存中，这样存取数据非常的快捷。但是关闭redis服务，数据却并不会丢失，因为关闭redis会有一个数据持久化再关闭的过程。这是非常棒的。</p>
<h3 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h3><h4 id="黑框客户端"><a href="#黑框客户端" class="headerlink" title="黑框客户端"></a>黑框客户端</h4><p>刚才说了redis的下载安装与服务端的前端启动与后端启动的方法，下面说一下Redis的客户端。首先还是要说终端登录的客户端，就像mysql的黑框框，这个是用图形界面之前必须先用熟的。进入客户端的方法也很简单，再启动了redis服务之后。还是在bin目录下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# ./redis-cli -h 127.0.0.1 -p 6379</div></pre></td></tr></table></figure></p>
<p>-h是host的意思，登录的ip。-p就是port端口，redis的默认端口是6379，没啥好说的。这样就登录进去了。得到如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</div></pre></td></tr></table></figure></p>
<p>之后先过下瘾，试下简单的操作：</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redis-guoyin.png" alt=""></p>
<p>图上是简单的set与get操作，但是，发现了一个问题，居然不用密码就可以登录，默认redis是不需要密码登录的，但是为了安全还是得给redis设置一个客户端密码。设置方法如下，还是在配置文件redis.conf里，将requirepass前的注释去掉，后面跟的参数就是密码</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redismima.png" alt=""></p>
<p>redis没有账户的概念，只有一个密码就可以。感觉简单就是好。设置完密码之后重启redis服务。下面启动redis客户端的的命令如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# ./redis-cli -h 127.0.0.1 -p 6379 -a yourpassword</div></pre></td></tr></table></figure></p>
<p>-a是auth，后面跟的就是你的密码。</p>
<p>再补充一点，如果进入客户端不加后面的-a，其实也是可以进入的，只是没有密码授权不能对数据进行任何操作。我也不知道为什么要设置成这样。以上就是黑框客户端。</p>
<h4 id="图形界面客户端"><a href="#图形界面客户端" class="headerlink" title="图形界面客户端"></a>图形界面客户端</h4><p>不要鄙视图形界面，图形界面只是技术的另一种表现形式，图形界面可以让技术变得更加简洁清晰。redis也一样，不需要写登录客户端脚本，也不需要get与set语句就可以直接对redis操作。而且，一般在windows下开发javaweb的话，redis数据库的服务端在远程的linux上，用一个图形界面客户端连上远程的redis数据库，测试程序也方便。</p>
<p>关于这个图形界面客户端，目前我只知道有这个RedisDesktopManager。下载地址在这个里：<a href="https://redisdesktop.com/download" target="_blank" rel="external">RedisDesktopManager下载地址</a>。下下来装好之后是这样的。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/redisDeskto.png" alt=""></p>
<p>然后过了一会儿居然弹出了Bender</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/bender.png" alt=""></p>
<p>以前就拿这个贱机器人做过头像，redis的创始人肯定是个好人。之后点下面那个connect to redis server，name随便写，host写你的redis所在的服务器ip，port一般就是6379，auth填刚设置的密码，然后测试一下登录。这个时候一般情况下你会登录不成功。如果熟悉linux操作系统的话知道这是因为防火墙把连接请求挡住了。这个时候就需要修改linux操作系统里的防火墙服务配置。记得以前弄过centos7的防火墙配置，7和6.5的是不一样，这种情况下还是多去网上找下资料，这里我就说一下我这里的修改方法。输入命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure></p>
<p>添加允许6379的端口</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/iptables.png" alt=""></p>
<p>之后重启防火墙服务<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@wangsusu bin]# service iptables restart</div></pre></td></tr></table></figure></p>
<p>再用RedisDesktopManager测试下连接，妥妥的。关于如何在里面添加数据自己摸摸就会了。</p>
<h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>这也算是一个客户端吧，redis这个东西也不仅仅只能用java来操作，但可惜的是java也没有提供类似于JDBC的规范接口（应该说是庆幸）。所以如果java要使用Redis的话，也是需要一些API的。本质的说Jedis就是jar包，用它里面的类和方法就可以使用Redis了，这东西使用起来也是非常方便，大概是因为Redis本来就很方便。首先下载，Maven上有，还是用阿里云的Maven，快的很。就下最新版的jedis-2.9.0.jar，下好之后添加到工程里就可以使用了。</p>
<p>新建一个工程，写一个测试类测试下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.14.101"</span>, <span class="number">6379</span>);</div><div class="line">        jedis.auth(<span class="string">"skyworth@redis"</span>);</div><div class="line">        jedis.set(<span class="string">"haha"</span>, <span class="string">"chonghechonghe"</span>);</div><div class="line">        System.out.println(jedis.get(<span class="string">"haha"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chonghechonghe</div></pre></td></tr></table></figure></p>
<p>这是最简单的jedis使用，之后还有有各种数据的操作，连接池，集群等等，以及spring<br>整合jedis，之后再讲。</p>
<p>今天就讲到这里了，代码不贴github了，因为只有那么几行，复制过去运行下就妥了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新项目中用到了Redis，以前只是听说过NoSql，一直觉得很厉害，这次终于用上了，边学边用也算是对这个东西有所了解了。目前还是在学习中，但是觉得还是把学到的东西先总结一下有助于自己的提高。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Redis数据库（一）&quot;&gt;&lt;a href=&quot;#R
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="nosql" scheme="http://yoursite.com/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架（三）</title>
    <link href="http://yoursite.com/2017/04/22/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/22/Spring框架（三）/</id>
    <published>2017-04-21T16:05:13.000Z</published>
    <updated>2017-04-21T16:07:45.471Z</updated>
    
    <content type="html"><![CDATA[<p>一想到这篇文章要写的东西，我就想起了自己的阿里面试，面试官问我AOP是什么，我说不知道。后来就被深深的鄙视了，有点不知所措。这篇文章写AOP也算是对自己的一个交代吧。</p>
<hr>
<h2 id="Spring入门之AOP"><a href="#Spring入门之AOP" class="headerlink" title="Spring入门之AOP"></a>Spring入门之AOP</h2><hr>
<h3 id="AOP基本概念"><a href="#AOP基本概念" class="headerlink" title="AOP基本概念"></a>AOP基本概念</h3><p>首先说一下AOP的基本概念吧，AOP是Aspect Oriented Programming的缩写，意思是面向切面编程。这种编程是通过预编译和动态代理的方式实现程序功能统一维护的一种技术。</p>
<p>这段话是抄的，我也不太懂这个预编译与统一维护是什么意思。就我自己的理解的话，所谓AOP就是让对象只关注于自己的业务，将其他的例如安全，事物（数据库关闭连接）等操作交给切面来处理。由此，将共性的切面提取出来可以降低业务逻辑之间的耦合度，同时提高程序的重用性。</p>
<p>那么说了半天到底什么是切面呢，先来介绍一下AOP中的术语。</p>
<h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><p>《spring in action》一书中原字原句（中文版）说了AOP里的术语十分不直观，但是即使不直观它也成为了AOP编程了一部分，进入AOP领域之前必须要学会这些术语。先给一个适用场景吧，例如，要对UserService这个类进行AOP编程，对UserService进行代理，在对它的所有方法，addUser，deleteUser，selectUser进行事物处理，在执行方法前执行beforeMethod方法，执行方法完之后执行afterMethod方法。</p>
<p>在以上这个场景中其实也就基本阐述了AOP的最基本应用，也是SpringAOP中最常用的应用之一，对数据操作的事务处理。一般是在before方法里从资源池里拿连接，在after方法里释放资源。</p>
<p>关于具体的术语：</p>
<ul>
<li>Target：目标类，这个最好理解，就是需要被代理的对象，如UserService</li>
<li>JoinPoint：连接点，连接点指的是可能被拦截到的方法。</li>
<li>PointCut：切入点，会被通知/增强的连接点</li>
<li>Advice：通知，或者叫增强。比如上场景中的before与after（这里不是指具体的方法，而是指方法的前置通知，后置通知这种类型，在后面会说明有五种方法的通知类型）</li>
<li>Proxy：代理对象，这个就是spring创建的代理对象，没啥好说</li>
<li>Weaving：织入，把Advice应用到Target来创建Proxy代理对象的过程</li>
<li>Aspect：切面，PointCut和Advice的结合</li>
</ul>
<p>在说了以上术语之后，其实还是没法吃透AOP，先不急，下面再来说说AspectJ。</p>
<h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h3><p>AspectJ是一个基于Java语言的AOP框架，很牛逼，spring的AOP编程在很多方面就借鉴了AspectJ，具体怎么借鉴的我不知道，反正只要知道它很牛逼就行了。另外Spring这种东西一开始就说过，因为它的特性对于好的框架肯定是来者不拒，所以肯定AspectJ的AOP就妥妥的吸收过来了。对于Spring它是提供了4种类型的AOP支持</p>
<ul>
<li>基于代理的经典SpringAOP（基本没人用了）</li>
<li>纯POJO切面（书里写的，没看懂，但是貌似也没人用了）</li>
<li>@AspectJ注解驱动的切面</li>
<li>注入式AspectJ切面（适用于Spring各种版本）</li>
</ul>
<p>一般来说，项目中用到的AOP基本上都是AspectJ提供的，而由spring整合的AOP。这里还是放一放具体的程序写法，来看看刚才说的Advice的类型，在AspectJ中可以应用5种通知类型：</p>
<ul>
<li>Before：前置通知，在方法被调用之前调用通知功能</li>
<li>After：后置通知，在目标方法完成之后调用通知，此时不会关心方法的输出是什么</li>
<li>After-returning：返回通知，在目标方法成功执行之后调用通知</li>
<li>After-throwing：异常通知，在目标方法抛出异常后调用通知</li>
<li>Around：环绕通知，通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</li>
</ul>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>说了这么多，还是云里雾里的感觉，现在来看看代码吧，新建一个工程，导入如下的jar包：</p>
<ul>
<li>aspectjrt-1.8.10.jar</li>
<li>aspectjweaver-1.8.10.jar</li>
<li>commons-logging-1.1.3.jar</li>
<li>spring-aop-4.3.7.RELEASE.jar</li>
<li>spring-aspects-4.3.7.RELEASE.jar</li>
<li>spring-beans-4.3.7.RELEASE.jar</li>
<li>spring-context-4.3.7.RELEASE.jar</li>
<li>spring-core-4.3.7.RELEASE.jar</li>
<li>spring-expression-4.3.7.RELEASE.jar</li>
</ul>
<p>关于AspectJ的两个jar包的下载，我是直接在<a href="http://maven.aliyun.com/nexus/" target="_blank" rel="external">阿里云MAVEN</a>管理网站上下的。既然这里说到了MAVEN，那之后会再出一个专门讲MAVEN相关的博客。讲过之后以后的项目就还是基于MAVEN吧，因为这东西简直太方便了。</p>
<h4 id="基于XML"><a href="#基于XML" class="headerlink" title="基于XML"></a>基于XML</h4><p>写个基于XML的AOP编程示例。</p>
<p>先写一个UserService作为Target类，接口我就不贴出来了，里面只有一个add方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    @Override</div><div class="line">    public <span class="keyword">void</span> add(<span class="built_in">String</span> user) &#123;</div><div class="line">        System.out.println(user + <span class="string">" is added"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再写一个切面类，切面类里有前置方法（前置通知），后置方法（后置通知），环绕方法（环绕通知）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import org.aspectj.lang.JoinPoint;</div><div class="line">import org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"></div><div class="line">public class MyAcpect &#123;</div><div class="line"></div><div class="line">    public void myBefore(JoinPoint joinpoint) &#123;</div><div class="line">        System.out.println(&quot;前置通知：&quot; + joinpoint.getSignature().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void myAfter(JoinPoint joinPoint) &#123;</div><div class="line">        System.out.println(&quot;后置通知：&quot; + joinPoint.getSignature().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object myAround(ProceedingJoinPoint joinPoint, Throwable throwable) throws Throwable &#123;</div><div class="line">        System.out.println(&quot;前面&quot;);</div><div class="line">        Object proceed = joinPoint.proceed();</div><div class="line">        System.out.println(&quot;后面&quot;);</div><div class="line">        return proceed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void myAfterReturning(JoinPoint joinPoint, Object ret) &#123;</div><div class="line">        System.out.println(&quot;返回通知：&quot; + joinPoint.getSignature().getName() + &quot;:&quot; + ret);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void myAfterThrowable(JoinPoint joinPoint, Throwable throwable) &#123;</div><div class="line">        System.out.println(&quot;异常通知：&quot; + throwable.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面写spring的xml配置，spring-core.xml<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">                           http://www.springframework.org/schema/aop</div><div class="line">                           http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;bean id="userService" class="com.just4fun.service.impl.UserServiceImpl"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id="myAspect" class="com.just4fun.aspect.MyAspect"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;aop:config&gt;</div><div class="line">        &lt;aop:aspect ref="myAspect"&gt;</div><div class="line">            &lt;aop:pointcut id="myPointCut" expression="execution(* com.just4fun.service..*.*(..))"&gt;&lt;/aop:pointcut&gt;</div><div class="line">            &lt;aop:before method="myBefore" pointcut-ref="myPointCut"&gt;&lt;/aop:before&gt;</div><div class="line">            &lt;aop:after method="myAfter" pointcut-ref="myPointCut"&gt;&lt;/aop:after&gt;</div><div class="line">            &lt;aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="ret"&gt;&lt;/aop:after-returning&gt;</div><div class="line">            &lt;aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="throwable"&gt;&lt;/aop:after-throwing&gt;</div><div class="line">            &lt;aop:around method="myAround" pointcut-ref="myPointCut"&gt;&lt;/aop:around&gt;</div><div class="line">        &lt;/aop:aspect&gt;</div><div class="line">    &lt;/aop:config&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>首先看文件开头的命名空间，有一个xmlns:aop，这是固定写法，再xsi:schemaLocation里也要添加aop的约束文件。然后配置两个bean，userService与myAspect两个类。之后的是重点，aop:config标签里配置所有的aop信息，首先aop:aspect标签引用之前配置好的切面类myAspect。aop:pointcut里写的是切入点表达式，这个待会会拿一个小节专门讲，在这里简要讲解一下，这里是为com.just4fun.service包下所有类的所有方法，配置切面。之后的aop:before与aop:after等标签就是具体将切面类的通知（方法）作为具体的哪一种通知。</p>
<p>下面是测试类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestForXMLAOP</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-core.xml"</span>);</div><div class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</div><div class="line">        userService.add(<span class="string">"haha"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">前置通知：add</div><div class="line">前面</div><div class="line">haha is added</div><div class="line">后面</div><div class="line">返回通知：add:<span class="literal">null</span></div><div class="line">后置通知：add</div></pre></td></tr></table></figure></p>
<p>从通知的顺序也可以更清楚的了解五种通知的具体在什么时候执行。</p>
<h4 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h4><p>Spring这种东西有了XML方式就肯定会有注解的方式。复制一个工程吧，因为spring的配置文件都不同了。下面改一下spring-core.xml里的东西：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">                           http://www.springframework.org/schema/aop</div><div class="line">                           http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">                           http://www.springframework.org/schema/context</div><div class="line">       					   http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;context:component-scan base-package="com.just4fun"&gt;&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>首先是创建bean的注解配置，需要引入context的命名空间，引入的方法同上面的aop命名空间。之后开启注解扫描，扫描com.just4fun包下的所有类。然后开启aspectj的注解配置。配置好了之后，开始写注解：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Service(<span class="string">"userService"</span>)</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</div></pre></td></tr></table></figure></p>
<p>@Service将UserServiceImpl加入容器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</div><div class="line">    @Pointcut(<span class="string">"execution(* com.just4fun.service..*.*(..))"</span>)</div><div class="line">    private <span class="keyword">void</span> pointCut() &#123;&#125;</div><div class="line"></div><div class="line">    @Before(value = <span class="string">"pointCut()"</span>)</div><div class="line">    public <span class="keyword">void</span> myBefore(JoinPoint joinpoint) &#123;</div><div class="line">        System.out.println(<span class="string">"前置通知："</span> + joinpoint.getSignature().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @After(value = <span class="string">"pointCut()"</span>)</div><div class="line">    public <span class="keyword">void</span> myAfter(JoinPoint joinPoint) &#123;</div><div class="line">        System.out.println(<span class="string">"后置通知："</span> + joinPoint.getSignature().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Around(value = <span class="string">"pointCut()"</span>)</div><div class="line">    public <span class="built_in">Object</span> myAround(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        System.out.println(<span class="string">"前面"</span>);</div><div class="line">        <span class="built_in">Object</span> proceed = joinPoint.proceed();</div><div class="line">        System.out.println(<span class="string">"后面"</span>);</div><div class="line">        <span class="keyword">return</span> proceed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterReturning(value = <span class="string">"pointCut()"</span>, returning = <span class="string">"ret"</span>)</div><div class="line">    public <span class="keyword">void</span> myAfterReturning(JoinPoint joinPoint, <span class="built_in">Object</span> ret) &#123;</div><div class="line">        System.out.println(<span class="string">"返回通知："</span> + joinPoint.getSignature().getName() + <span class="string">":"</span> + ret);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @AfterThrowing(value = <span class="string">"pointCut()"</span>, throwing = <span class="string">"throwable"</span>)</div><div class="line">    public <span class="keyword">void</span> myAfterThrowing(JoinPoint joinPoint, Throwable throwable) &#123;</div><div class="line">        System.out.println(<span class="string">"异常通知："</span> + throwable.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Component将MyAspect加入容器，@Aspect将MyAspect配置为切面类。@PointCut配置切入点表达式，切入点表达式要写在函数头上所以创建一个空函数为切入点表达式载体，同事函数名提供ID。之后的@Before，@After为具体的方法配置成具体类型通知。</p>
<p>测试类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestForAnnoAOP</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-core.xml"</span>);</div><div class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</div><div class="line">        userService.add(<span class="string">"haha"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">前面</div><div class="line">前置通知：add</div><div class="line">haha is added</div><div class="line">后面</div><div class="line">后置通知：add</div><div class="line">返回通知：add:<span class="literal">null</span></div></pre></td></tr></table></figure></p>
<p>和前面一毛一样。现在是不是要通畅一些了，感觉AOP说穿了也就是这些东西。</p>
<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>在XML和注解方式写AOP中都用到了这个切入点表达式，程序里的写法是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">execution(* com.just4fun.service..*.*(..))</div></pre></td></tr></table></figure></p>
<p>下面来解释下，这个是什么意思。首先execution()这个东西是固定写法，表示我这个里面就要开始写切入点表达式了，在execution()括号里的第一个*号，是代表方法返回值的意思。*代表匹配任意类型的返回值com.just4fun.service..这一串东西，包括最后<strong>两个点</strong>，匹配的是包名，匹配com.just4fun.service包及其所有子包，最后那两个点就是子包的意思，如果没有那两个点而是一个，则只匹配固定的包。最后这个东西*.*(..)，第一个星号匹配类名，第二个信号匹配方法名，括号里的两个点匹配所有的方法参数。我这一说是不是就清晰多了。</p>
<p>下面再来看下具体通用表达式的写法：</p>
<p>execution(修饰符  返回值  包.类.方法名(参数) throws异常)</p>
<p>一般修饰符会省略。再对比下上面说的，套进模板里试试。妥妥的。关于AOP其实还有很多的更细的方式，目前知识量还是不够，等今后学了更多再补充。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="XML方式AOP：https-github-com-kentwood-springDay03anno"><a href="#XML方式AOP：https-github-com-kentwood-springDay03anno" class="headerlink" title="XML方式AOP：https://github.com/kentwood/springDay03anno"></a><a href="https://github.com/kentwood/springDay03anno" target="_blank" rel="external">XML方式AOP：https://github.com/kentwood/springDay03anno</a></h3><h3 id="注解方式AOP：https-github-com-kentwood-springDay03anno"><a href="#注解方式AOP：https-github-com-kentwood-springDay03anno" class="headerlink" title="注解方式AOP：https://github.com/kentwood/springDay03anno"></a><a href="https://github.com/kentwood/springDay03anno" target="_blank" rel="external">注解方式AOP：https://github.com/kentwood/springDay03anno</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一想到这篇文章要写的东西，我就想起了自己的阿里面试，面试官问我AOP是什么，我说不知道。后来就被深深的鄙视了，有点不知所措。这篇文章写AOP也算是对自己的一个交代吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Spring入门之AOP&quot;&gt;&lt;a href=&quot;#Spring入门之AOP
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架（二）</title>
    <link href="http://yoursite.com/2017/04/21/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/21/Spring框架（二）/</id>
    <published>2017-04-21T15:56:01.000Z</published>
    <updated>2017-06-02T23:46:30.507Z</updated>
    
    <content type="html"><![CDATA[<p>今天做关于MBC项目的时候遇到了一个问题，需要在服务器空闲的时候将存储在自身数据库的数据传输给MBC主服务器，但是该如何判断服务器是否空闲？网上找了很多关于监测服务器状态比如JavaMelody啥的东西，但是所谓的服务器空闲状态又通过怎样的方式来界定，如果一直没有所谓的“空闲状态”是不是就一直发送不了数据了。后来还是在师兄的指点下，知道了在实际工程中，如果是考虑到负载过大的情况，第一选择是扩容而不是判断服务器是否处于空闲再做某些工作。如果非要在空闲的时候才做某些操作的话，一般的选择是选择在人们休息的时候，也就是凌晨这个时段进行比如服务器更新，数据上传，数据转移等等操作。知道这个之后感觉很棒，第一是知道了新的知识点，第二是把编程和生活联系在了一起感觉很有意思。</p>
<hr>
<h2 id="Spring入门之装配Bean"><a href="#Spring入门之装配Bean" class="headerlink" title="Spring入门之装配Bean"></a>Spring入门之装配Bean</h2><hr>
<p>上回说到了通过spring容器来管理对象。可以实现IoC功能。但是这又引出一个问题，如果需要用工厂的方式创建对象，再者创建对象的类型如果是单例类，或者是要多个实例。其实Spring已经提供了各种关于创建对象的方式与创建对象类型的考虑。首先来看看实例化的方式。</p>
<h3 id="实例化方式"><a href="#实例化方式" class="headerlink" title="实例化方式"></a>实例化方式</h3><p>首先关于Bean的实例化方式，不考虑反射之类的话主要就有三种（虽然说spring也就是用反射来创建对象的）。默认构造，静态工厂，实例工厂。</p>
<p>对于这三种创建对象的方式，spring也给出了解决方案。</p>
<h4 id="默认构造方式"><a href="#默认构造方式" class="headerlink" title="默认构造方式"></a>默认构造方式</h4><p>spring通过默认构造方法创建对象的方式特别简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.just4fun.service.impl.UserServiceImpl"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>但是此种形式必须提供默认的构造方法，不提供构造方法也算提供了默认构造方法。</p>
<h4 id="静态工厂构造方式"><a href="#静态工厂构造方式" class="headerlink" title="静态工厂构造方式"></a>静态工厂构造方式</h4><p>首先，利用静态工厂构造方式必须要先写一个工厂类，写静态工厂方法，如下代码所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</div><div class="line">	public <span class="keyword">static</span> UserService createService()&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>spring的配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.just4fun.factrory.MyBeanFactory"</span> factory-method=<span class="string">"createService"</span>&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>将静态工厂创建的实例的过程交给spring，class属性写静态工厂的全限定名称。factory-method写静态工厂创建实例的方法。</p>
<h4 id="实例工厂构造方式"><a href="#实例工厂构造方式" class="headerlink" title="实例工厂构造方式"></a>实例工厂构造方式</h4><p>实例工厂的构造方式同样必须先写实例工厂类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory2</span> </span>&#123;</div><div class="line">	public UserService createService()&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>spring的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;myBeanFactory2&quot; class=&quot;com.just4fun.factory.MyBeanFactory2&quot;&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;userService&quot; factory-bean=&quot;myBeanFactory2&quot; factory-method=&quot;createService&quot;&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>这里的配置中，先要创建MyBeanFactory2实例，然后创建userService，在创建userService的配置中，factory-bean属性写之前创建工厂实例myBeanFactory2的id引用，factory-method写工厂实例的创建方法。</p>
<p>以上就是三种spring创建对象的方式。</p>
<h3 id="spring中对象的作用域"><a href="#spring中对象的作用域" class="headerlink" title="spring中对象的作用域"></a>spring中对象的作用域</h3><p>下面简要介绍一些spring中对象的作用域，首先看看作用域是什么意思。在引言中提过，如果要spring创建单例对象该怎么做。作用域就是为了解决这个问题而存在的。简单的说，作用域的作用就是用于管理创建对象的实例以及确定创建对象适用于何种上下文环境。</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>singleton</td>
<td>在SpringIoC容器中仅存在一个实例，Bean以单例方式存在，默认值</td>
</tr>
<tr>
<td>prototype</td>
<td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用Bean时，相当于执行 new Bean()</td>
</tr>
<tr>
<td>request</td>
<td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext上下文环境</td>
</tr>
<tr>
<td>session</td>
<td>同一个HttpSession共享一个Bean，不同的Session使用不同的Bean，仅适用于WebApplicationContext上下文环境</td>
</tr>
<tr>
<td>globalSession</td>
<td>一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext上下文环境(我不懂这个)</td>
</tr>
</tbody>
</table>
<p>以上表格是对作用域的取值以及说明，下面来看下具体的应用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.just4fun.service.impl.UserServiceImpl"</span> scope=<span class="string">"singleton"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>最后那个scope属性就是用来配置作用域的，里面的取值根据上表给出的类别来取就可以了。以上的spring配置就是创建了一个单实例的userService，如果其他的地方也通过IoC容器注入了userService，则还是使用同一个实例而不是创建新的userService对象。</p>
<h3 id="spring中对象的生命周期"><a href="#spring中对象的生命周期" class="headerlink" title="spring中对象的生命周期"></a>spring中对象的生命周期</h3><p>这里不是介绍对象生命周期以及JVM虚拟机这种复杂的东西，那些东西我以前看过但是又忘了，以后有空得再看一遍。这里要说的生命周期只是对象与spring相关的东西，在spring中可以配置当对象创建或者销毁时，触发一些方法。先看看具体的配置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.just4fun.service.UserServiceImpl"</span> </div><div class="line">		init-method=<span class="string">"myInit"</span> destroy-method=<span class="string">"myDestroy"</span> &gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>这里多了两个属性，init-method属性填写对象创建时调用的方法，destroy-method属性填写当对象销毁时执行的方法。贴出UserServiceImpl类的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public <span class="keyword">void</span> addUser() &#123;</div><div class="line">		System.out.println(<span class="string">"lifecycle add user"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public <span class="keyword">void</span> myInit()&#123;</div><div class="line">		System.out.println(<span class="string">"初始化"</span>);</div><div class="line">	&#125;</div><div class="line">	public <span class="keyword">void</span> myDestroy()&#123;</div><div class="line">		System.out.println(<span class="string">"销毁"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在UserServiceImpl类中，myInit与myDestory只是两个普通的方法。下面来测试下，新写个测试方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public <span class="keyword">void</span> test() throws Exception&#123;</div><div class="line">	<span class="comment">//spring 工厂</span></div><div class="line">	<span class="built_in">String</span> xmlPath = <span class="string">"beans.xml"</span>;</div><div class="line">	ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</div><div class="line">	UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</div><div class="line">	userService.addUser();</div><div class="line">	<span class="comment">//要求：</span></div><div class="line">	<span class="comment">//1.容器必须close，销毁方法执行; </span></div><div class="line">	<span class="comment">//2.必须是单例的</span></div><div class="line">    <span class="comment">//applicationContext.getClass().getMethod("close").invoke(applicationContext);</span></div><div class="line">	applicationContext.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行测试方法，得到结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">初始化</div><div class="line">lifecycle add user</div><div class="line">销毁</div></pre></td></tr></table></figure></p>
<p>以上新增的两个属性只是将普通的方法配置成了对象创建于销毁时的触发方法，另外需要注意的是，1.容器必须使用close方法，销毁方法才会执行，2.对象在spring中的配置必须是单例。</p>
<h3 id="spring中对属性的依赖注入"><a href="#spring中对属性的依赖注入" class="headerlink" title="spring中对属性的依赖注入"></a>spring中对属性的依赖注入</h3><p>对属性的注入方式只有两种，构造器注入的方式与setter方法注入方式。从我见到的程序里看的话，使用setter方法注入属性的方式基本上是占绝大多数。</p>
<h4 id="构造器注入属性方式"><a href="#构造器注入属性方式" class="headerlink" title="构造器注入属性方式"></a>构造器注入属性方式</h4><p>关于构造器注入属性的方式，我觉得是有点麻烦，比setter方法注入的方式麻烦多了··，为什么麻烦呢，先看看一个User类以及它的构造方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	</div><div class="line">	private Integer uid;</div><div class="line">	private <span class="built_in">String</span> username;</div><div class="line">	private Integer age;</div><div class="line">	</div><div class="line">	public User(Integer uid, <span class="built_in">String</span> username) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.uid = uid;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public User(<span class="built_in">String</span> username, Integer age) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多个构造方法的方式注定造就了通过构造器注入属性的方式比较麻烦。但是存在即是合理，spring也提供了相应的配置来对以上的莫名其妙的构造器注入方式提供了支持。下面就来简单看看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 构造方法注入 </div><div class="line">	&lt;<span class="keyword">constructor</span>-arg&gt; 用于配置构造方法一个参数argument</div><div class="line">		name ：参数的名称</div><div class="line">		value：设置普通数据</div><div class="line">		ref：引用数据，一般是另一个bean id值</div><div class="line">		</div><div class="line">		index ：参数的索引号，从0开始 。如果只有索引，匹配到了多个构造方法时，默认使用第一个。</div><div class="line">		type ：确定参数类型</div><div class="line">	例1：使用名称name</div><div class="line">		&lt;<span class="keyword">constructor</span>-arg name="username" value="jack"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">		&lt;<span class="keyword">constructor</span>-arg name="age" value="18"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">	例2：【类型type 和  索引 index】</div><div class="line">		&lt;<span class="keyword">constructor</span>-arg index="0" type="java.lang.String" value="1"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">		&lt;<span class="keyword">constructor</span>-arg index="1" type="java.lang.Integer" value="2"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">--&gt;</div><div class="line">&lt;bean id="userId" class="com.just4fun.entity.User" &gt;</div><div class="line">	&lt;<span class="keyword">constructor</span>-arg index="0" type="java.lang.String" value="1"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">	&lt;<span class="keyword">constructor</span>-arg index="1" type="java.lang.Integer" value="2"&gt;&lt;/<span class="keyword">constructor</span>-arg&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>先看最下面的非注释部分，这里写了关于构造器注入方式的基本用法，constructor-arg就是构造器传入的参数。在注释里写了关于constructor-arg的基本用法，有两种，一种是通过参数的名称去匹配，注释里的例1给出了用法，这种方式可以精确匹配构造方法。第二种是通过类型与索引去匹配，例2给出了具体实例，这种方法可能匹配出多个构造方法，这种情况下默认使用第一个。</p>
<h4 id="setter方法注入属性方式"><a href="#setter方法注入属性方式" class="headerlink" title="setter方法注入属性方式"></a>setter方法注入属性方式</h4><p>关于setter方法注入属性非常的简单，首先在需要创建的类里提供对属性的setter方法。然后在spring配置的bean结点之下配置property结点就可以了。下面来看具体的写法，假设User类里已经提供了name与age的setter方法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean id="user" class="com.just4fun.entity.User"&gt;</div><div class="line">	&lt;property name="name" value="王苏苏"&gt;&lt;/property&gt;</div><div class="line">	&lt;property name="age"&gt;</div><div class="line">		&lt;value&gt;1234&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>以上就是通过setter方法注入属性的方式，简单易用。如果是通过引用的方式把value属性改成ref引用就好。但是由此再引出一个问题，如果是需要注入集合类型该怎么办。关于集合的创建与注入spring同样给给出了解决方案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;!-- </div><div class="line">	集合的注入都是给&lt;property&gt;添加子标签</div><div class="line">		数组：&lt;array&gt;</div><div class="line">		List：&lt;list&gt;</div><div class="line">		<span class="built_in">Set</span>：&lt;set&gt;</div><div class="line">		<span class="built_in">Map</span>：&lt;map&gt; ，map存放k/v 键值对，使用&lt;entry&gt;描述</div><div class="line">		Properties：&lt;props&gt;  &lt;prop key=""&gt;&lt;/prop&gt;  【】</div><div class="line">		</div><div class="line">	普通数据：&lt;value&gt;</div><div class="line">	引用数据：&lt;ref&gt;</div><div class="line">--&gt;</div><div class="line">&lt;bean id="collDataId" class="com.itheima.f_xml.e_coll.CollData" &gt;</div><div class="line">	&lt;property name="arrayData"&gt;</div><div class="line">		&lt;array&gt;</div><div class="line">			&lt;value&gt;王&lt;/value&gt;</div><div class="line">			&lt;value&gt;大&lt;/value&gt;</div><div class="line">			&lt;value&gt;锅&lt;/value&gt;</div><div class="line">			&lt;value&gt;子&lt;/value&gt;</div><div class="line">		&lt;/array&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">	</div><div class="line">	&lt;property name="listData"&gt;</div><div class="line">		&lt;list&gt;</div><div class="line">			&lt;value&gt;大&lt;/value&gt;</div><div class="line">			&lt;value&gt;都&lt;/value&gt;</div><div class="line">			&lt;value&gt;不&lt;/value&gt;</div><div class="line">			&lt;value&gt;比&lt;/value&gt;</div><div class="line">		&lt;/list&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">	</div><div class="line">	&lt;property name="setData"&gt;</div><div class="line">		&lt;set&gt;</div><div class="line">			&lt;value&gt;搞&lt;/value&gt;</div><div class="line">			&lt;value&gt;不&lt;/value&gt;</div><div class="line">			&lt;value&gt;懂&lt;/value&gt;</div><div class="line">		&lt;/set&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">	</div><div class="line">	&lt;property name="mapData"&gt;</div><div class="line">		&lt;map&gt;</div><div class="line">			&lt;entry key="jack" value="杰克"&gt;&lt;/entry&gt;</div><div class="line">			&lt;entry&gt;</div><div class="line">				&lt;key&gt;&lt;value&gt;rose&lt;/value&gt;&lt;/key&gt;</div><div class="line">				&lt;value&gt;肉丝&lt;/value&gt;</div><div class="line">			&lt;/entry&gt;</div><div class="line">		&lt;/map&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">	</div><div class="line">	&lt;property name="propsData"&gt;</div><div class="line">		&lt;props&gt;</div><div class="line">			&lt;prop key="dao"&gt;mybatis&lt;/prop&gt;</div><div class="line">			&lt;prop key="service"&gt;spring&lt;/prop&gt;</div><div class="line">			&lt;prop key="controller"&gt;springmvc&lt;/prop&gt;</div><div class="line">		&lt;/props&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>以上就是一些关于使用xml配置springIoC容器的相关内容，另外还有命名空间与springEl表达式等内容，我暂时也没学，工程中貌似也没遇到过，如果遇到了我会再学，然后写出博客。</p>
<p>刚才看了一下关于使用注解来装配Bean的方式，基本的原理与注意事项其实和XML一样，只是操作的方式有些不用，这里就直接罗列出来了，不做过多的讲解。注解就是一个类，使用@注解名称，在开发中会使用注解取代xml配置文件。</p>
<ul>
<li>@Component取代bean<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Component取代&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</div><div class="line"></div><div class="line">@Component(<span class="string">"id"</span>) 取代 &lt;bean id=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>在web开发，中提供3个@Component注解衍生注解（功能一样）取代xml中bean<ul>
<li>@Repository ：dao层</li>
<li>@Service：service层</li>
<li>@Controller：web层</li>
</ul>
</li>
<li><p>依赖注入，给私有字段设置，也可以给setter方法设置</p>
<ul>
<li>普通值：@Value(“”)</li>
<li><p>引用值：</p>
<ul>
<li><p>方式1：按照【类型】注入</p>
<p>  @Autowired</p>
</li>
<li><p>方式2：按照【名称】注入1</p>
<p>  @Autowired</p>
<p>  @Qualifier(“名称”)</p>
</li>
<li><p>方式3：按照【名称】注入2</p>
<p>  @Resource(“名称”)</p>
</li>
</ul>
</li>
</ul>
</li>
<li>生命周期<ul>
<li>初始化：@PostConstruct</li>
<li>销毁：@PreDestroy</li>
</ul>
</li>
<li>作用域<ul>
<li>@Scope(“prototype”) 多例</li>
</ul>
</li>
</ul>
<h2 id="今天的东西没有现成代码。"><a href="#今天的东西没有现成代码。" class="headerlink" title="今天的东西没有现成代码。"></a>今天的东西没有现成代码。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做关于MBC项目的时候遇到了一个问题，需要在服务器空闲的时候将存储在自身数据库的数据传输给MBC主服务器，但是该如何判断服务器是否空闲？网上找了很多关于监测服务器状态比如JavaMelody啥的东西，但是所谓的服务器空闲状态又通过怎样的方式来界定，如果一直没有所谓的“空
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架（五）</title>
    <link href="http://yoursite.com/2017/04/14/MyBatis%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/14/MyBatis框架（五）/</id>
    <published>2017-04-14T14:05:43.000Z</published>
    <updated>2017-04-22T06:54:01.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><hr>
<p>今天是一个大日子，感觉一下子被激活了感觉。因为今天参加了一个会议，导师轻描淡写的说就把项目交给他吧，然后就这样被交付了一个项目，是做一个数据收集与传递的服务器后台，功能不复杂，不懂的问题也能问。关于这个项目，我思考了一整天，考虑了各种技术细节，到最后都被同事说需求都没弄清就开始扣技术细节，这样不好。。感觉大概是自己太激动了吧，得开始努力加班了。</p>
<hr>
<p>这是MyBatis里一个非常碉堡与实用的东西，他通过实用MyBatis的标签实现动态的拼接sql语句，使得mapper映射文件在编写sql的时候更加灵活。常用的MyBatis的SQL标签有：</p>
<ul>
<li>if</li>
<li>where</li>
<li>foreach</li>
</ul>
<h3 id="if和where标签"><a href="#if和where标签" class="headerlink" title="if和where标签"></a>if和where标签</h3><p>一般来说，这个两个标签是用来查询用的，根据某些判断的插入查询的条件。下面来看具体的用法吧，工程还是原来那个工程。数据库也是原来那个数据库。改的只有UserMapper.xml文件，现在要让一个statement的能够在paramenterType变化的条件下，得到不同的查询语句进而查询到不同的结果。来看看具体用法吧，在com.just4fun.mapper包里，首先在UserMapper接口里添加一个findDynamicUser方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;User&gt;  findDynamicUser(User user);</div></pre></td></tr></table></figure></p>
<p>然后在UserMapper.xml里添加一个statement<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;select id="findDynamicUser" parameterType="user" resultType="user"&gt;</div><div class="line">	SELECT * FROM USER </div><div class="line">	&lt;where&gt;</div><div class="line">		&lt;if test="name != null"&gt;</div><div class="line">			AND NAME LIKE '%$&#123;name&#125;%'</div><div class="line">		&lt;/if&gt;</div><div class="line">		&lt;if test="sex != null"&gt;</div><div class="line">			AND sex = #&#123;sex&#125;</div><div class="line">		&lt;/if&gt;</div><div class="line">	&lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>where标签就是sql语句里的where的意思，这个很好理解。if标签里的test是判断条件，里面的查询条件的写法感觉上是和java里的写法差不多，我还没有细看，反正这个不等于null的写法是抄过来的，暂且先记住，如果以后有特殊需求再学学。需要注意的一点是，如果if标签条件全部满足，生成的语句按理说应该是多了一个‘AND’。但事实上是没有，这个是where标签的功能之一，删掉查询条件里的第一个‘AND’。</p>
<p>下面来测试下，在UserTest里添加一个方法，第一次测试代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public <span class="keyword">void</span> testFindDynamicUser()&#123;</div><div class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setName(<span class="string">"大"</span>);</div><div class="line">    user.setSex(<span class="string">"男"</span>);</div><div class="line">    List&lt;User&gt; list = userMapper.findDynamicUser(user);</div><div class="line">    <span class="keyword">for</span> (User singleUser : list) &#123;</div><div class="line">        System.out.println(singleUser.getId());</div><div class="line">        System.out.println(singleUser.getName());</div><div class="line">        System.out.println(singleUser.getAddress());</div><div class="line">        System.out.println(singleUser.getBirthday());</div><div class="line">        System.out.println(singleUser.getSex());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">DEBUG [main] - Created connection <span class="number">1586845078.</span></div><div class="line">DEBUG [main] - Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5e955596</span>]</div><div class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM USER WHERE NAME LIKE <span class="string">'%大%'</span> AND sex = ? </div><div class="line">DEBUG [main] - ==&gt; Parameters: 男(<span class="built_in">String</span>)</div><div class="line">DEBUG [main] - &lt;==      Total: 2</div><div class="line">4</div><div class="line">大都比</div><div class="line">深圳</div><div class="line">Fri Apr 14 00:00:00 CST 2017</div><div class="line">男</div><div class="line">5</div><div class="line">大都不比</div><div class="line">深圳</div><div class="line">Fri Apr 14 00:00:00 CST 2017</div><div class="line">男</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>可以看到查询到了两条数据，查询语句可以看到，通过name与sex两者一起匹配查询。</p>
<p>下面不修改statement，只是将user.setSex那条语句注释掉：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public <span class="keyword">void</span> testFindDynamicUser()&#123;</div><div class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setName(<span class="string">"大"</span>);</div><div class="line">    <span class="comment">//user.setSex("男");</span></div><div class="line">    List&lt;User&gt; list = userMapper.findDynamicUser(user);</div><div class="line">    <span class="keyword">for</span> (User singleUser : list) &#123;</div><div class="line">        System.out.println(singleUser.getId());</div><div class="line">        System.out.println(singleUser.getName());</div><div class="line">        System.out.println(singleUser.getAddress());</div><div class="line">        System.out.println(singleUser.getBirthday());</div><div class="line">        System.out.println(singleUser.getSex());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再运行测试方法，可以得到：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">DEBUG [main] - Created connection <span class="number">1586845078.</span></div><div class="line">DEBUG [main] - Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5e955596</span>]</div><div class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM USER WHERE NAME LIKE <span class="string">'%大%'</span> </div><div class="line">DEBUG [main] - ==&gt; Parameters: </div><div class="line">DEBUG [main] - &lt;==      Total: 3</div><div class="line">1</div><div class="line">大虎娃子</div><div class="line">漯河</div><div class="line">Mon Mar 09 00:00:00 CST 1992</div><div class="line">女</div><div class="line">4</div><div class="line">大都比</div><div class="line">深圳</div><div class="line">Fri Apr 14 00:00:00 CST 2017</div><div class="line">男</div><div class="line">5</div><div class="line">大都不比</div><div class="line">深圳</div><div class="line">Fri Apr 14 00:00:00 CST 2017</div><div class="line">男</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>可以看到查询用的sql语句已经变了，只用到了name一个属性，而且查询的结果也变成了三条。只是通过将sex设置成null就达到了这个效果。MyBatis的动态sql还是很强大的。</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>where标签里签到if标签写查询条件很强大，但是也有一点毛病，就是如果条件太复杂，会造成写的一个statement很长，看起来不太美观。而且如果查询条件被也有其他的statement用到，达不到复用的效果。于是聪明的MyBatis就引入的SQL片段的概念，通过一个标签，将SQL片段封装进去给其他的statement调用。说起来有点虚，还是直接来看代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;sql id="select_user_where"&gt;</div><div class="line">	&lt;if test="name != null"&gt;</div><div class="line">		AND NAME LIKE '%$&#123;name&#125;%'</div><div class="line">	&lt;/if&gt;</div><div class="line">	&lt;if test="sex != null"&gt;</div><div class="line">		AND sex = #&#123;sex&#125;</div><div class="line">	&lt;/if&gt;</div><div class="line">&lt;/sql&gt;</div><div class="line"></div><div class="line">&lt;select id="findDynamicUser" parameterType="user" resultType="user"&gt;</div><div class="line">	SELECT * FROM USER </div><div class="line">	&lt;where&gt;</div><div class="line">		&lt;include refid="select_user_where"&gt;&lt;/include&gt;</div><div class="line">	&lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>实际然后还是用同样的测试代码测试，结果是一样。</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>关于这个foreach标签的适用场合，感觉多半也是用在查询上，比如说，查询某个ID集合里的所有用户之类的。下面来试试水，这里正好强行运用一<a href="http://www.wangsusu.com.cn/2017/04/12/MyBatis%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89/" target="_blank" rel="external">myBatis框架（四）</a>，里的POJO包装类型知识点。</p>
<p>还是原来的工程，在PO包下创建一个UserVO类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>&#123;</div><div class="line">    private User user;</div><div class="line">    private List&lt;Integer&gt; idList;</div><div class="line">    <span class="comment">//getter和setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类里封装了User对象，然后在User的信息之外增加用户id集合的信息，整个UserVO就是一个传递需要查询的条件。下面在UserMapper接口中增加一个findUsersByNameInIDs方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;User&gt; findUsersByNameInIDs(UserVO userVO);</div></pre></td></tr></table></figure></p>
<p>然后在UserMapper.xml里写实现的statement：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;select id="findUsersByNameInIDs" parameterType="com.just4fun.mapperType.po.UserVO" resultType="user"&gt;</div><div class="line">	SELECT * FROM USER</div><div class="line">	&lt;where&gt;</div><div class="line">		&lt;if test="user.name != null"&gt;</div><div class="line">			AND NAME LIKE '%$&#123;user.name&#125;%'</div><div class="line">		&lt;/if&gt;</div><div class="line">		&lt;if test="idList != null and idList.size &gt; 0"&gt;</div><div class="line">			&lt;foreach collection="idList" item="id" open="AND id IN(" close=")" separator=","&gt;</div><div class="line">				#&#123;id&#125;</div><div class="line">			&lt;/foreach&gt;</div><div class="line">		&lt;/if&gt;</div><div class="line">	&lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码有点小复杂，只要是关于foreach标签里的，collection属性里取得是一个list，就是UserVO里的list，item是每次迭代得到的东西，open和close这个就是包裹整个的sql语句，不写在这里而直接强写在foreach标签的开头和末尾也行，只是这样更美观，显得更专业。<br>下面是测试带代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public <span class="keyword">void</span> testFindUsersByNameInIds()&#123;</div><div class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setName(<span class="string">"大"</span>);</div><div class="line">    List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    idList.add(<span class="number">1</span>);</div><div class="line">    idList.add(<span class="number">2</span>);</div><div class="line">    idList.add(<span class="number">3</span>);</div><div class="line">    userVO.setIdList(idList);</div><div class="line">    userVO.setUser(user);</div><div class="line">    List&lt;User&gt; users = userMapper.findUsersByNameInIDs(userVO);</div><div class="line">    <span class="keyword">for</span> (User singleUser : users) &#123;</div><div class="line">        System.out.println(singleUser.getId()+<span class="string">" "</span>+singleUser.getName()+<span class="string">" "</span>+singleUser.getAddress()+<span class="string">" "</span>+singleUser.getBirthday()+<span class="string">" "</span>+singleUser.getSex());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在id为1，2，3的用户里查找名字里包含大的用户。得到结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DEBUG [main] - Created connection <span class="number">1004095028.</span></div><div class="line">DEBUG [main] - Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">3</span>bd94634]</div><div class="line">DEBUG [main] - ==&gt;  Preparing: SELECT * FROM USER WHERE NAME LIKE <span class="string">'%大%'</span> AND id IN( ? , ? , ? ) </div><div class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(Integer), <span class="number">2</span>(Integer), <span class="number">3</span>(Integer)</div><div class="line">DEBUG [main] - &lt;==      Total: 1</div><div class="line">1 大虎娃子 漯河 Mon Mar 09 00:00:00 CST 1992 女</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>可以看到sql语句是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM USER WHERE NAME LIKE &apos;%大%&apos; AND id IN( ? , ? , ? )</div></pre></td></tr></table></figure></p>
<p>正好就是想要的效果。关于sql片段暂时就先说这么多，感觉应该会是一个很实用的东西。今天就到这里。</p>
<h2 id="代码：https-github-com-kentwood-myBatisLesson5"><a href="#代码：https-github-com-kentwood-myBatisLesson5" class="headerlink" title="代码：https://github.com/kentwood/myBatisLesson5"></a><a href="https://github.com/kentwood/myBatisLesson5" target="_blank" rel="external">代码：https://github.com/kentwood/myBatisLesson5</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态SQL语句&quot;&gt;&lt;a href=&quot;#动态SQL语句&quot; class=&quot;headerlink&quot; title=&quot;动态SQL语句&quot;&gt;&lt;/a&gt;动态SQL语句&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天是一个大日子，感觉一下子被激活了感觉。因为今天参加了一个会议，导师轻描淡写的说就把项目
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="myBatis" scheme="http://yoursite.com/tags/myBatis/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架（一）</title>
    <link href="http://yoursite.com/2017/04/13/Spring%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/13/Spring框架（一）/</id>
    <published>2017-04-13T14:06:22.000Z</published>
    <updated>2017-04-13T15:16:19.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring入门之IoC简介"><a href="#Spring入门之IoC简介" class="headerlink" title="Spring入门之IoC简介"></a>Spring入门之IoC简介</h2><hr>
<p>今天在纠结是否该迁户口的问题，好处坏处只是和同学同事们交流了一下，听取了下意见，但是自己还是没有仔细思考迁户口不迁户口对自己的影响，最主要的原因一是自己没有去多了解相关政策所以不知道迁户口的好处，第二个原因就是自己也不知道自己想要的是什么。最终还是决定迁户口了，以后就是深圳本地屌丝了！请多指教！</p>
<p>今天决定先放一放MyBatis框架，因为一直讲一个框架有些无聊，穿插着讲东西应该是能更好的调动大脑积极性的，所以今天来看一个强大碉堡的新东西，Spring框架。</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://spring.io/" target="_blank" rel="external">Spring官网：https://spring.io/</a></p>
<p><a href="http://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="external">Spring下载地址：http://repo.spring.io/release/org/springframework/spring/</a></p>
<p><a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi" target="_blank" rel="external">common-logging下载：http://commons.apache.org/proper/commons-logging/download_logging.cgi</a></p>
<hr>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Spring是一个开源框架，是2003年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作《Expert One-On-One J2EE Development and Design》中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情（关于EJB的概念和框架原理我还在学习中，东西很老了现在也没什么人在用，之后的博客可能会讲）。然而，Spring的用途不仅限于服务端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</p>
<p>Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EE full-stack（一站式）轻量级开源框架。</p>
<p>这段话是网上抄下来的，感觉抄下来还是有点用，毕竟能让自己更熟悉一点，反正我就记住了几个点。Spring的优势是<strong>分层</strong>，Spring的核心是<strong>IoC</strong>和<strong>AOP</strong>，另外还是<strong>轻量级</strong>的框架，为所有java应用提供<strong>一站式</strong>的解决方案。</p>
<p>就我个人经验来说，对于一个javaweb工程，从dao层，service层，web层，Spring为每一层都提供了解决方案。</p>
<ul>
<li>web层：SpringMVC</li>
<li>service层：Spring</li>
<li>dao层：jdbcTemplate</li>
</ul>
<p>这些只是在不运用其他框架时Spring为应用提供的解决方案，Spring还有一个最大的特点就是与其他的框架所整合，通过它的容器与控制反转相关技术，可以轻易的与web层的struts，dao层的hibernate，mybatis框架整合。可谓是海纳百川。</p>
<h3 id="Spring分层结构"><a href="#Spring分层结构" class="headerlink" title="Spring分层结构"></a>Spring分层结构</h3><p>关于Spring分层结构，我在网上也看到了很多的版本，我也看过但是没看完《Spring实战》，书里将Spring分成了6个大模块</p>
<ul>
<li>Spring核心容器：是Spring最核心的部分，管理着bean的创建、配置和管理，提供应用上下文实现，同时提供DI功能。</li>
<li>Spring的AOP模块：面向切面编程是Spring的基本功能，在该模块中可以引入Aspects面向切面编程技术共同实现AOP。</li>
<li>数据集成与访问：包括Spring自身提供的JDBC模板代码，同时也提供了支持集成其他ORM框架的模块。</li>
<li>WEB与远程调用：一方面Spring自身提供了强大的SpringMVC框架，另一方面提供了支持其他WEB层框架的模块</li>
<li>Instrumentation：提供了JVM添加代理的功能。这个半天没懂，现在也没懂。书里也没有过多说明，如果以后牛逼了可能会懂吧。</li>
<li>测试：Spring提供了测试模块来对Spring应用进行测试。测试模块里通过一些技术能实现在测试中加载Spring应用上下文与容器来实现bean的创建，非常方便。</li>
</ul>
<p>关于这些分层结构，网上还有很多，比如讲的细的有22个模块，然后7大模块，5大模块的都有。我觉得也没必要究太细，就按照《Spring实战》知道这6大模块，的基本作用就足够了。剩下的东西在今后的实践与学习中会再学到。</p>
<h3 id="Spring入门程序"><a href="#Spring入门程序" class="headerlink" title="Spring入门程序"></a>Spring入门程序</h3><p>官网上推荐的是采用Maven与Gradle对Spring进行下载与包管理，关于Maven我今后学到肯定会在博客里写，这里就只用添加jar包的方式先简要讲解下Spring的基本。</p>
<p>从<a href="https://spring.io/" target="_blank" rel="external">Spring官网</a>里找了半天没找到下载地址，里面只有Maven与Gradle的管理方式，这里找到一个像ftp下载界面一样的<a href="http://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="external">Spring包下载地址</a>，为了跟上时代的潮流，就下最新版4.3.7吧，我正好也可以学习一下，点进去下dist那个，60多M的。</p>
<p>下好之后可以简要看一看里面有什么东西，像我的话一般是去看一眼libs文件夹里有什么东西，点进去看有很多jar，但是仔细一看jar文件有三种，一个是普通jar，一个是名字里有doc的，一个是名字里有source的，名字一看就知道，一个是文档，一个是源码，我们最后要导入的是普通jar。</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/spring3jar.png" alt=""></p>
<p>再看看还有其他的与lib同级的文件夹，schema与doc，约束文件与文档。文档里东西应该是很全的，看文档比听我哔哔强，有能力直接看文档或者听我哔哔完再看文档。</p>
<p>在运用Spring之前，还需要下载另一个支持jar包，在Spring的libs里没有的，common-logging的日志jar。可以去<a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi" target="_blank" rel="external">common-loggin的apache的官网下载</a>，得到common-logging-1.2.jar，这就是我们需要的。</p>
<p>下面就来建一个工程来体验下Spring的一点点威力，用intellij，新建一个普通java项目，先体验下Spring的核心IoC功能。</p>
<p>建好了之后，需要添加Spring四个核心jar与一个依赖jar，具体名字我就不打出来了。看图</p>
<p><img src="http://onv8ytvk1.bkt.clouddn.com/springProjectjar.png" alt=""></p>
<p>我看的《spring in action》书中一直是强力推荐使用注解的方式开发Spring，注解确实不错，但是实际项目中往往是xml方式与注解联合起来开发，而且基本上是有固定的模式。就个人来说，我觉得xml的方式其实更加直观一点，看xml可以容易的看出类与类之间的关系，把握整体的项目架构。这里只提供一种简答的Spring入门方式，用ClassPathXmlApplicationContext上下文通过解析xml方式实现IoC，之后的章节继续引入注解与xml联合方式开发。</p>
<p>既然是xml方式，先写一个Spring的xml配置文件，Intellij里可以直接新建Spring的xml文件，头与约束都给你添加好了，你也可以去文档里看，随便找一个xml代码，把文件头说明和约束拷下来，最后在src目录下建好一个application.xml文件，文件里内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>beans为根目录，里面的东西就是你需要管理的对象门，这个xml理解成为一个配置容器里内容的地方，但是这不是全部，还有注解或者二者联合起来一起实现的。</p>
<p>写一个UserDao接口与实现类，以及UserService接口与实现类来模拟下吧。<br>UserDao代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface UserDao &#123;</div><div class="line">    <span class="keyword">void</span> add(<span class="built_in">String</span> user);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserDaoImpl代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="title">implements</span> <span class="title">UserDao</span></span>&#123;</div><div class="line">    @Override</div><div class="line">    public <span class="keyword">void</span> add(<span class="built_in">String</span> user) &#123;</div><div class="line">        System.out.println(user + <span class="string">" is added"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserService接口代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface UserService &#123;</div><div class="line">    <span class="keyword">void</span> addUser(<span class="built_in">String</span> user);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UserServiceImpl实现类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    private UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public <span class="keyword">void</span> addUser(<span class="built_in">String</span> user) &#123;</div><div class="line">        userDao.add(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面来体验下IoC，先解释下什么是IoC吧，关于这个网上资料是一大堆，要说的话也能说一整篇博客。我谈谈我的理解吧，IoC是Invertion of Control，控制反转的意思。一般来说，一个对象如果要依赖另一个对象，在对象内部的里调用所依赖对象的方法时，往往需要直接在使用之前先new出来，这样的话就造成了种对象之间的强耦合，好比之上的代码，Service对Dao的实现类是完全控制，如果dao的实现类由另一个实现类替代，这段代码就要改变，违反了面向对象的开闭原则。而控制反转，就是要将这种对实现类的完全控制给反转，将实现类的创建交给其他特殊对象或者是容器。所以UserServiceImpl的实现类代码应该变成以下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="title">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    private UserDao userDao;</div><div class="line"></div><div class="line">    public UserDao getUserDao() &#123;</div><div class="line">        <span class="keyword">return</span> userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="keyword">void</span> setUserDao(UserDao userDao) &#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public <span class="keyword">void</span> addUser(<span class="built_in">String</span> user) &#123;</div><div class="line">        userDao.add(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就只对userDao提供setter方法，将具体实现类的创建反转给其他东西了。控制反转有两种类型，一是依赖注入（DI），另一个是依赖查找（DL），依赖查找应用在JavaEE的EJB框架中应用比较多，例如通过特殊的字符串规则能查找EJB的具体方法实现远程调用之类的；而对于Spring框架应用中依赖注入应用的最为广泛。DI相对于IoC其实只是另一种理解的方式，就上述例子来说，DI这个说法针对的是作为UserServiceImpl属性的UserDao，userDao的实现类不由UserServiceImpl来创建，而是被setter方法“注入”到UserServiceImpl里来。说到这里，你应该能想到，所谓的依赖注入用代码实现起来就是不自己new出来，而是用setter方法来“注入”，再拓展一点，依赖注入有很多的方式，比如构造器注入，属性注入（就是刚才的setter注入），接口注入（其实就是通过实现接口，把注入实现在接口的方法里）。</p>
<p>如果到这里还没有理解的话，推荐一篇刚看的<a href="http://stamen.iteye.com/blog/1489223/" target="_blank" rel="external">控制反转的博客</a>，有点老，但是讲的很清楚。</p>
<p>知道IoC的概念了，下面我们来使用spring的核心，也就是容器来实现下这个IoC，首先写好配置文件application.xml：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line">    &lt;bean id="userDao" class="com.just4fun.dao.UserDaoImpl"&gt;&lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id="userService" class="com.just4fun.service.UserServiceImpl"&gt;</div><div class="line">        &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>在application.xml中，我们创建了两个对象，并实现了它们的依赖关系。通过属性注入的方式，将userDao注入给了userService。下面写一个测试类来实际体验下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</div><div class="line">    @Test</div><div class="line">    public <span class="keyword">void</span> demo1() &#123;</div><div class="line">        <span class="built_in">String</span> xmlPath = <span class="string">"application.xml"</span>;</div><div class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</div><div class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</div><div class="line">        userService.addUser(<span class="string">"王大锤"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先看看输出结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">王大锤 is added</div></pre></td></tr></table></figure></p>
<p>结果肯定是妥妥的，这里要解释下的是这个ApplicationContext，这个上下文对象其实就可以理解为容器。他的子类是ClassPathXmlApplicationContext，这个他的实现类是ClassPathXmlApplicationContext通过实现类的文件来创建容器对象，最后通过从容器中通过ID取出创建好userService，运行方法得到正确结果。</p>
<p>关于以上只是关于Spring的一个简单的入门介绍，要完全说清Spring的话也不是几篇博客或者是几本书的完全说清楚的，要深入理解Spring的话还是得看源码实现。今后我应该会去看。</p>
<h2 id="代码：https-github-com-kentwood-SpringLesson1"><a href="#代码：https-github-com-kentwood-SpringLesson1" class="headerlink" title="代码：https://github.com/kentwood/SpringLesson1"></a><a href="https://github.com/kentwood/SpringLesson1" target="_blank" rel="external">代码：https://github.com/kentwood/SpringLesson1</a></h2><p>代码里没有给jar包，但是在文中给出了jar的下载地址与需要引入哪些jar的说明，看着来吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring入门之IoC简介&quot;&gt;&lt;a href=&quot;#Spring入门之IoC简介&quot; class=&quot;headerlink&quot; title=&quot;Spring入门之IoC简介&quot;&gt;&lt;/a&gt;Spring入门之IoC简介&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天在纠结是否该迁户口的问题，好处
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
</feed>
